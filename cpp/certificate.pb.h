// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: certificate.proto

#ifndef PROTOBUF_certificate_2eproto__INCLUDED
#define PROTOBUF_certificate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "zlint.pb.h"
#include "ct.pb.h"
// @@protoc_insertion_point(includes)
namespace zsearch {
class ASAtom;
class ASAtomDefaultTypeInternal;
extern ASAtomDefaultTypeInternal _ASAtom_default_instance_;
class CTServerStatus;
class CTServerStatusDefaultTypeInternal;
extern CTServerStatusDefaultTypeInternal _CTServerStatus_default_instance_;
class CTStatus;
class CTStatusDefaultTypeInternal;
extern CTStatusDefaultTypeInternal _CTStatus_default_instance_;
class Certificate;
class CertificateDefaultTypeInternal;
extern CertificateDefaultTypeInternal _Certificate_default_instance_;
class CertificateAudit;
class CertificateAuditDefaultTypeInternal;
extern CertificateAuditDefaultTypeInternal _CertificateAudit_default_instance_;
class CertificateRevocation;
class CertificateRevocationDefaultTypeInternal;
extern CertificateRevocationDefaultTypeInternal _CertificateRevocation_default_instance_;
class CertificateValidation;
class CertificateValidationDefaultTypeInternal;
extern CertificateValidationDefaultTypeInternal _CertificateValidation_default_instance_;
class LintResult;
class LintResultDefaultTypeInternal;
extern LintResultDefaultTypeInternal _LintResult_default_instance_;
class Lints;
class LintsDefaultTypeInternal;
extern LintsDefaultTypeInternal _Lints_default_instance_;
class Metadatum;
class MetadatumDefaultTypeInternal;
extern MetadatumDefaultTypeInternal _Metadatum_default_instance_;
class MozillaSalesForceStatus;
class MozillaSalesForceStatusDefaultTypeInternal;
extern MozillaSalesForceStatusDefaultTypeInternal _MozillaSalesForceStatus_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class RootStoreStatus;
class RootStoreStatusDefaultTypeInternal;
extern RootStoreStatusDefaultTypeInternal _RootStoreStatus_default_instance_;
class SCT;
class SCTDefaultTypeInternal;
extern SCTDefaultTypeInternal _SCT_default_instance_;
class UserdataAtom;
class UserdataAtomDefaultTypeInternal;
extern UserdataAtomDefaultTypeInternal _UserdataAtom_default_instance_;
class ZLint;
class ZLintDefaultTypeInternal;
extern ZLintDefaultTypeInternal _ZLint_default_instance_;
}  // namespace zsearch

namespace zsearch {

namespace protobuf_certificate_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_certificate_2eproto

enum CertificateType {
  CERTIFICATE_TYPE_RESERVED = 0,
  CERTIFICATE_TYPE_UNKNOWN = 1,
  CERTIFICATE_TYPE_LEAF = 2,
  CERTIFICATE_TYPE_INTERMEDIATE = 3,
  CERTIFICATE_TYPE_ROOT = 4,
  CertificateType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CertificateType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CertificateType_IsValid(int value);
const CertificateType CertificateType_MIN = CERTIFICATE_TYPE_RESERVED;
const CertificateType CertificateType_MAX = CERTIFICATE_TYPE_ROOT;
const int CertificateType_ARRAYSIZE = CertificateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CertificateType_descriptor();
inline const ::std::string& CertificateType_Name(CertificateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CertificateType_descriptor(), value);
}
inline bool CertificateType_Parse(
    const ::std::string& name, CertificateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CertificateType>(
    CertificateType_descriptor(), name, value);
}
enum CertificateSource {
  CERTIFICATE_SOURCE_RESERVED = 0,
  CERTIFICATE_SOURCE_UNKNOWN = 1,
  CERTIFICATE_SOURCE_SCAN = 2,
  CERTIFICATE_SOURCE_CT = 3,
  CERTIFICATE_SOURCE_MOZILLA_SALESFORCE = 4,
  CERTIFICATE_SOURCE_RESEARCH = 5,
  CERTIFICATE_SOURCE_RAPID7 = 6,
  CERTIFICATE_SOURCE_HUBBLE = 7,
  CERTIFICATE_SOURCE_CT_CHAIN = 8,
  CertificateSource_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CertificateSource_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CertificateSource_IsValid(int value);
const CertificateSource CertificateSource_MIN = CERTIFICATE_SOURCE_RESERVED;
const CertificateSource CertificateSource_MAX = CERTIFICATE_SOURCE_CT_CHAIN;
const int CertificateSource_ARRAYSIZE = CertificateSource_MAX + 1;

const ::google::protobuf::EnumDescriptor* CertificateSource_descriptor();
inline const ::std::string& CertificateSource_Name(CertificateSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    CertificateSource_descriptor(), value);
}
inline bool CertificateSource_Parse(
    const ::std::string& name, CertificateSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CertificateSource>(
    CertificateSource_descriptor(), name, value);
}
enum CertificateParseStatus {
  CERTIFICATE_PARSE_STATUS_RESERVED = 0,
  CERTIFICATE_PARSE_STATUS_UNKNOWN = 1,
  CERTIFICATE_PARSE_STATUS_SUCCESS = 2,
  CERTIFICATE_PARSE_STATUS_FAIL = 3,
  CERTIFICATE_PARSE_STATUS_NOT_PARSED = 4,
  CertificateParseStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CertificateParseStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CertificateParseStatus_IsValid(int value);
const CertificateParseStatus CertificateParseStatus_MIN = CERTIFICATE_PARSE_STATUS_RESERVED;
const CertificateParseStatus CertificateParseStatus_MAX = CERTIFICATE_PARSE_STATUS_NOT_PARSED;
const int CertificateParseStatus_ARRAYSIZE = CertificateParseStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* CertificateParseStatus_descriptor();
inline const ::std::string& CertificateParseStatus_Name(CertificateParseStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    CertificateParseStatus_descriptor(), value);
}
inline bool CertificateParseStatus_Parse(
    const ::std::string& name, CertificateParseStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CertificateParseStatus>(
    CertificateParseStatus_descriptor(), name, value);
}
enum CertificateRevocationReason {
  CERTIFICATE_REVOCATION_REASON_RESERVED = 0,
  CERTIFICATE_REVOCATION_REASON_UNKNOWN = 1,
  CERTIFICATE_REVOCATION_REASON_UNSPECIFIED = 2,
  CERTIFICATE_REVOCATION_REASON_KEY_COMPROMISE = 3,
  CERTIFICATE_REVOCATION_REASON_CA_COMPROMISE = 4,
  CERTIFICATE_REVOCATION_REASON_AFFILIATION_CHANGED = 5,
  CERTIFICATE_REVOCATION_REASON_SUPERSEDED = 6,
  CERTIFICATE_REVOCATION_REASON_CESSATION_OF_OPERATION = 7,
  CERTIFICATE_REVOCATION_REASON_CERTIFICATE_HOLD = 8,
  CERTIFICATE_REVOCATION_REASON_REMOVE_FROM_CRL = 9,
  CERTIFICATE_REVOCATION_REASON_PRIVILEGE_WITHDRAWN = 10,
  CERTIFICATE_REVOCATION_REASON_AA_COMPROMISE = 11,
  CertificateRevocationReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CertificateRevocationReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CertificateRevocationReason_IsValid(int value);
const CertificateRevocationReason CertificateRevocationReason_MIN = CERTIFICATE_REVOCATION_REASON_RESERVED;
const CertificateRevocationReason CertificateRevocationReason_MAX = CERTIFICATE_REVOCATION_REASON_AA_COMPROMISE;
const int CertificateRevocationReason_ARRAYSIZE = CertificateRevocationReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* CertificateRevocationReason_descriptor();
inline const ::std::string& CertificateRevocationReason_Name(CertificateRevocationReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    CertificateRevocationReason_descriptor(), value);
}
inline bool CertificateRevocationReason_Parse(
    const ::std::string& name, CertificateRevocationReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CertificateRevocationReason>(
    CertificateRevocationReason_descriptor(), name, value);
}
// ===================================================================

class Path : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zsearch.Path) */ {
 public:
  Path();
  virtual ~Path();

  Path(const Path& from);

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Path& default_instance();

  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }

  void Swap(Path* other);

  // implements Message ----------------------------------------------

  inline Path* New() const PROTOBUF_FINAL { return New(NULL); }

  Path* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Path* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes sha256fp = 1;
  int sha256fp_size() const;
  void clear_sha256fp();
  static const int kSha256FpFieldNumber = 1;
  const ::std::string& sha256fp(int index) const;
  ::std::string* mutable_sha256fp(int index);
  void set_sha256fp(int index, const ::std::string& value);
  void set_sha256fp(int index, const char* value);
  void set_sha256fp(int index, const void* value, size_t size);
  ::std::string* add_sha256fp();
  void add_sha256fp(const ::std::string& value);
  void add_sha256fp(const char* value);
  void add_sha256fp(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sha256fp() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sha256fp();

  // @@protoc_insertion_point(class_scope:zsearch.Path)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sha256fp_;
  mutable int _cached_size_;
  friend struct  protobuf_certificate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RootStoreStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zsearch.RootStoreStatus) */ {
 public:
  RootStoreStatus();
  virtual ~RootStoreStatus();

  RootStoreStatus(const RootStoreStatus& from);

  inline RootStoreStatus& operator=(const RootStoreStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RootStoreStatus& default_instance();

  static inline const RootStoreStatus* internal_default_instance() {
    return reinterpret_cast<const RootStoreStatus*>(
               &_RootStoreStatus_default_instance_);
  }

  void Swap(RootStoreStatus* other);

  // implements Message ----------------------------------------------

  inline RootStoreStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  RootStoreStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RootStoreStatus& from);
  void MergeFrom(const RootStoreStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RootStoreStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zsearch.Path trusted_paths = 8;
  int trusted_paths_size() const;
  void clear_trusted_paths();
  static const int kTrustedPathsFieldNumber = 8;
  const ::zsearch::Path& trusted_paths(int index) const;
  ::zsearch::Path* mutable_trusted_paths(int index);
  ::zsearch::Path* add_trusted_paths();
  ::google::protobuf::RepeatedPtrField< ::zsearch::Path >*
      mutable_trusted_paths();
  const ::google::protobuf::RepeatedPtrField< ::zsearch::Path >&
      trusted_paths() const;

  // bool valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // bool was_valid = 2;
  void clear_was_valid();
  static const int kWasValidFieldNumber = 2;
  bool was_valid() const;
  void set_was_valid(bool value);

  // bool has_trusted_path = 3;
  void clear_has_trusted_path();
  static const int kHasTrustedPathFieldNumber = 3;
  bool has_trusted_path() const;
  void set_has_trusted_path(bool value);

  // bool had_trusted_path = 4;
  void clear_had_trusted_path();
  static const int kHadTrustedPathFieldNumber = 4;
  bool had_trusted_path() const;
  void set_had_trusted_path(bool value);

  // bool blacklisted = 5;
  void clear_blacklisted();
  static const int kBlacklistedFieldNumber = 5;
  bool blacklisted() const;
  void set_blacklisted(bool value);

  // bool whitelisted = 6;
  void clear_whitelisted();
  static const int kWhitelistedFieldNumber = 6;
  bool whitelisted() const;
  void set_whitelisted(bool value);

  // bool in_revocation_set = 9;
  void clear_in_revocation_set();
  static const int kInRevocationSetFieldNumber = 9;
  bool in_revocation_set() const;
  void set_in_revocation_set(bool value);

  // .zsearch.CertificateType type = 7;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::zsearch::CertificateType type() const;
  void set_type(::zsearch::CertificateType value);

  // @@protoc_insertion_point(class_scope:zsearch.RootStoreStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zsearch::Path > trusted_paths_;
  bool valid_;
  bool was_valid_;
  bool has_trusted_path_;
  bool had_trusted_path_;
  bool blacklisted_;
  bool whitelisted_;
  bool in_revocation_set_;
  int type_;
  mutable int _cached_size_;
  friend struct  protobuf_certificate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CertificateValidation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zsearch.CertificateValidation) */ {
 public:
  CertificateValidation();
  virtual ~CertificateValidation();

  CertificateValidation(const CertificateValidation& from);

  inline CertificateValidation& operator=(const CertificateValidation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CertificateValidation& default_instance();

  static inline const CertificateValidation* internal_default_instance() {
    return reinterpret_cast<const CertificateValidation*>(
               &_CertificateValidation_default_instance_);
  }

  void Swap(CertificateValidation* other);

  // implements Message ----------------------------------------------

  inline CertificateValidation* New() const PROTOBUF_FINAL { return New(NULL); }

  CertificateValidation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CertificateValidation& from);
  void MergeFrom(const CertificateValidation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CertificateValidation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zsearch.RootStoreStatus nss = 1;
  bool has_nss() const;
  void clear_nss();
  static const int kNssFieldNumber = 1;
  const ::zsearch::RootStoreStatus& nss() const;
  ::zsearch::RootStoreStatus* mutable_nss();
  ::zsearch::RootStoreStatus* release_nss();
  void set_allocated_nss(::zsearch::RootStoreStatus* nss);

  // .zsearch.RootStoreStatus microsoft = 2;
  bool has_microsoft() const;
  void clear_microsoft();
  static const int kMicrosoftFieldNumber = 2;
  const ::zsearch::RootStoreStatus& microsoft() const;
  ::zsearch::RootStoreStatus* mutable_microsoft();
  ::zsearch::RootStoreStatus* release_microsoft();
  void set_allocated_microsoft(::zsearch::RootStoreStatus* microsoft);

  // .zsearch.RootStoreStatus apple = 3;
  bool has_apple() const;
  void clear_apple();
  static const int kAppleFieldNumber = 3;
  const ::zsearch::RootStoreStatus& apple() const;
  ::zsearch::RootStoreStatus* mutable_apple();
  ::zsearch::RootStoreStatus* release_apple();
  void set_allocated_apple(::zsearch::RootStoreStatus* apple);

  // .zsearch.RootStoreStatus java = 4;
  bool has_java() const;
  void clear_java();
  static const int kJavaFieldNumber = 4;
  const ::zsearch::RootStoreStatus& java() const;
  ::zsearch::RootStoreStatus* mutable_java();
  ::zsearch::RootStoreStatus* release_java();
  void set_allocated_java(::zsearch::RootStoreStatus* java);

  // .zsearch.RootStoreStatus android = 5;
  bool has_android() const;
  void clear_android();
  static const int kAndroidFieldNumber = 5;
  const ::zsearch::RootStoreStatus& android() const;
  ::zsearch::RootStoreStatus* mutable_android();
  ::zsearch::RootStoreStatus* release_android();
  void set_allocated_android(::zsearch::RootStoreStatus* android);

  // .zsearch.RootStoreStatus google_ct_primary = 10;
  bool has_google_ct_primary() const;
  void clear_google_ct_primary();
  static const int kGoogleCtPrimaryFieldNumber = 10;
  const ::zsearch::RootStoreStatus& google_ct_primary() const;
  ::zsearch::RootStoreStatus* mutable_google_ct_primary();
  ::zsearch::RootStoreStatus* release_google_ct_primary();
  void set_allocated_google_ct_primary(::zsearch::RootStoreStatus* google_ct_primary);

  // @@protoc_insertion_point(class_scope:zsearch.CertificateValidation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zsearch::RootStoreStatus* nss_;
  ::zsearch::RootStoreStatus* microsoft_;
  ::zsearch::RootStoreStatus* apple_;
  ::zsearch::RootStoreStatus* java_;
  ::zsearch::RootStoreStatus* android_;
  ::zsearch::RootStoreStatus* google_ct_primary_;
  mutable int _cached_size_;
  friend struct  protobuf_certificate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MozillaSalesForceStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zsearch.MozillaSalesForceStatus) */ {
 public:
  MozillaSalesForceStatus();
  virtual ~MozillaSalesForceStatus();

  MozillaSalesForceStatus(const MozillaSalesForceStatus& from);

  inline MozillaSalesForceStatus& operator=(const MozillaSalesForceStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MozillaSalesForceStatus& default_instance();

  static inline const MozillaSalesForceStatus* internal_default_instance() {
    return reinterpret_cast<const MozillaSalesForceStatus*>(
               &_MozillaSalesForceStatus_default_instance_);
  }

  void Swap(MozillaSalesForceStatus* other);

  // implements Message ----------------------------------------------

  inline MozillaSalesForceStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  MozillaSalesForceStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MozillaSalesForceStatus& from);
  void MergeFrom(const MozillaSalesForceStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MozillaSalesForceStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string owner_name = 3;
  void clear_owner_name();
  static const int kOwnerNameFieldNumber = 3;
  const ::std::string& owner_name() const;
  void set_owner_name(const ::std::string& value);
  #if LANG_CXX11
  void set_owner_name(::std::string&& value);
  #endif
  void set_owner_name(const char* value);
  void set_owner_name(const char* value, size_t size);
  ::std::string* mutable_owner_name();
  ::std::string* release_owner_name();
  void set_allocated_owner_name(::std::string* owner_name);

  // string parent_name = 4;
  void clear_parent_name();
  static const int kParentNameFieldNumber = 4;
  const ::std::string& parent_name() const;
  void set_parent_name(const ::std::string& value);
  #if LANG_CXX11
  void set_parent_name(::std::string&& value);
  #endif
  void set_parent_name(const char* value);
  void set_parent_name(const char* value, size_t size);
  ::std::string* mutable_parent_name();
  ::std::string* release_parent_name();
  void set_allocated_parent_name(::std::string* parent_name);

  // string certificate_name = 5;
  void clear_certificate_name();
  static const int kCertificateNameFieldNumber = 5;
  const ::std::string& certificate_name() const;
  void set_certificate_name(const ::std::string& value);
  #if LANG_CXX11
  void set_certificate_name(::std::string&& value);
  #endif
  void set_certificate_name(const char* value);
  void set_certificate_name(const char* value, size_t size);
  ::std::string* mutable_certificate_name();
  ::std::string* release_certificate_name();
  void set_allocated_certificate_name(::std::string* certificate_name);

  // string certificate_policy = 6;
  void clear_certificate_policy();
  static const int kCertificatePolicyFieldNumber = 6;
  const ::std::string& certificate_policy() const;
  void set_certificate_policy(const ::std::string& value);
  #if LANG_CXX11
  void set_certificate_policy(::std::string&& value);
  #endif
  void set_certificate_policy(const char* value);
  void set_certificate_policy(const char* value, size_t size);
  ::std::string* mutable_certificate_policy();
  ::std::string* release_certificate_policy();
  void set_allocated_certificate_policy(::std::string* certificate_policy);

  // string certification_practice_statement = 7;
  void clear_certification_practice_statement();
  static const int kCertificationPracticeStatementFieldNumber = 7;
  const ::std::string& certification_practice_statement() const;
  void set_certification_practice_statement(const ::std::string& value);
  #if LANG_CXX11
  void set_certification_practice_statement(::std::string&& value);
  #endif
  void set_certification_practice_statement(const char* value);
  void set_certification_practice_statement(const char* value, size_t size);
  ::std::string* mutable_certification_practice_statement();
  ::std::string* release_certification_practice_statement();
  void set_allocated_certification_practice_statement(::std::string* certification_practice_statement);

  // string standard_audit = 10;
  void clear_standard_audit();
  static const int kStandardAuditFieldNumber = 10;
  const ::std::string& standard_audit() const;
  void set_standard_audit(const ::std::string& value);
  #if LANG_CXX11
  void set_standard_audit(::std::string&& value);
  #endif
  void set_standard_audit(const char* value);
  void set_standard_audit(const char* value, size_t size);
  ::std::string* mutable_standard_audit();
  ::std::string* release_standard_audit();
  void set_allocated_standard_audit(::std::string* standard_audit);

  // string br_audit = 11;
  void clear_br_audit();
  static const int kBrAuditFieldNumber = 11;
  const ::std::string& br_audit() const;
  void set_br_audit(const ::std::string& value);
  #if LANG_CXX11
  void set_br_audit(::std::string&& value);
  #endif
  void set_br_audit(const char* value);
  void set_br_audit(const char* value, size_t size);
  ::std::string* mutable_br_audit();
  ::std::string* release_br_audit();
  void set_allocated_br_audit(::std::string* br_audit);

  // string auditor = 12;
  void clear_auditor();
  static const int kAuditorFieldNumber = 12;
  const ::std::string& auditor() const;
  void set_auditor(const ::std::string& value);
  #if LANG_CXX11
  void set_auditor(::std::string&& value);
  #endif
  void set_auditor(const char* value);
  void set_auditor(const char* value, size_t size);
  ::std::string* mutable_auditor();
  ::std::string* release_auditor();
  void set_allocated_auditor(::std::string* auditor);

  // bool current_in = 1;
  void clear_current_in();
  static const int kCurrentInFieldNumber = 1;
  bool current_in() const;
  void set_current_in(bool value);

  // bool was_in = 2;
  void clear_was_in();
  static const int kWasInFieldNumber = 2;
  bool was_in() const;
  void set_was_in(bool value);

  // bool cp_same_as_parent = 8;
  void clear_cp_same_as_parent();
  static const int kCpSameAsParentFieldNumber = 8;
  bool cp_same_as_parent() const;
  void set_cp_same_as_parent(bool value);

  // bool audit_same_as_parent = 9;
  void clear_audit_same_as_parent();
  static const int kAuditSameAsParentFieldNumber = 9;
  bool audit_same_as_parent() const;
  void set_audit_same_as_parent(bool value);

  // @@protoc_insertion_point(class_scope:zsearch.MozillaSalesForceStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr owner_name_;
  ::google::protobuf::internal::ArenaStringPtr parent_name_;
  ::google::protobuf::internal::ArenaStringPtr certificate_name_;
  ::google::protobuf::internal::ArenaStringPtr certificate_policy_;
  ::google::protobuf::internal::ArenaStringPtr certification_practice_statement_;
  ::google::protobuf::internal::ArenaStringPtr standard_audit_;
  ::google::protobuf::internal::ArenaStringPtr br_audit_;
  ::google::protobuf::internal::ArenaStringPtr auditor_;
  bool current_in_;
  bool was_in_;
  bool cp_same_as_parent_;
  bool audit_same_as_parent_;
  mutable int _cached_size_;
  friend struct  protobuf_certificate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CertificateRevocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zsearch.CertificateRevocation) */ {
 public:
  CertificateRevocation();
  virtual ~CertificateRevocation();

  CertificateRevocation(const CertificateRevocation& from);

  inline CertificateRevocation& operator=(const CertificateRevocation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CertificateRevocation& default_instance();

  static inline const CertificateRevocation* internal_default_instance() {
    return reinterpret_cast<const CertificateRevocation*>(
               &_CertificateRevocation_default_instance_);
  }

  void Swap(CertificateRevocation* other);

  // implements Message ----------------------------------------------

  inline CertificateRevocation* New() const PROTOBUF_FINAL { return New(NULL); }

  CertificateRevocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CertificateRevocation& from);
  void MergeFrom(const CertificateRevocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CertificateRevocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool revoked = 1;
  void clear_revoked();
  static const int kRevokedFieldNumber = 1;
  bool revoked() const;
  void set_revoked(bool value);

  // .zsearch.CertificateRevocationReason reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  ::zsearch::CertificateRevocationReason reason() const;
  void set_reason(::zsearch::CertificateRevocationReason value);

  // @@protoc_insertion_point(class_scope:zsearch.CertificateRevocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool revoked_;
  int reason_;
  mutable int _cached_size_;
  friend struct  protobuf_certificate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CertificateAudit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zsearch.CertificateAudit) */ {
 public:
  CertificateAudit();
  virtual ~CertificateAudit();

  CertificateAudit(const CertificateAudit& from);

  inline CertificateAudit& operator=(const CertificateAudit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CertificateAudit& default_instance();

  static inline const CertificateAudit* internal_default_instance() {
    return reinterpret_cast<const CertificateAudit*>(
               &_CertificateAudit_default_instance_);
  }

  void Swap(CertificateAudit* other);

  // implements Message ----------------------------------------------

  inline CertificateAudit* New() const PROTOBUF_FINAL { return New(NULL); }

  CertificateAudit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CertificateAudit& from);
  void MergeFrom(const CertificateAudit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CertificateAudit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .zsearch.MozillaSalesForceStatus mozilla = 1;
  bool has_mozilla() const;
  void clear_mozilla();
  static const int kMozillaFieldNumber = 1;
  const ::zsearch::MozillaSalesForceStatus& mozilla() const;
  ::zsearch::MozillaSalesForceStatus* mutable_mozilla();
  ::zsearch::MozillaSalesForceStatus* release_mozilla();
  void set_allocated_mozilla(::zsearch::MozillaSalesForceStatus* mozilla);

  // @@protoc_insertion_point(class_scope:zsearch.CertificateAudit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::zsearch::MozillaSalesForceStatus* mozilla_;
  mutable int _cached_size_;
  friend struct  protobuf_certificate_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Certificate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zsearch.Certificate) */ {
 public:
  Certificate();
  virtual ~Certificate();

  Certificate(const Certificate& from);

  inline Certificate& operator=(const Certificate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Certificate& default_instance();

  static inline const Certificate* internal_default_instance() {
    return reinterpret_cast<const Certificate*>(
               &_Certificate_default_instance_);
  }

  void Swap(Certificate* other);

  // implements Message ----------------------------------------------

  inline Certificate* New() const PROTOBUF_FINAL { return New(NULL); }

  Certificate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Certificate& from);
  void MergeFrom(const Certificate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Certificate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes parents = 5;
  int parents_size() const;
  void clear_parents();
  static const int kParentsFieldNumber = 5;
  const ::std::string& parents(int index) const;
  ::std::string* mutable_parents(int index);
  void set_parents(int index, const ::std::string& value);
  void set_parents(int index, const char* value);
  void set_parents(int index, const void* value, size_t size);
  ::std::string* add_parents();
  void add_parents(const ::std::string& value);
  void add_parents(const char* value);
  void add_parents(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& parents() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_parents();

  // repeated bytes presented_chain = 45;
  int presented_chain_size() const;
  void clear_presented_chain();
  static const int kPresentedChainFieldNumber = 45;
  const ::std::string& presented_chain(int index) const;
  ::std::string* mutable_presented_chain(int index);
  void set_presented_chain(int index, const ::std::string& value);
  void set_presented_chain(int index, const char* value);
  void set_presented_chain(int index, const void* value, size_t size);
  ::std::string* add_presented_chain();
  void add_presented_chain(const ::std::string& value);
  void add_presented_chain(const char* value);
  void add_presented_chain(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& presented_chain() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_presented_chain();

  // bytes sha1fp = 1;
  void clear_sha1fp();
  static const int kSha1FpFieldNumber = 1;
  const ::std::string& sha1fp() const;
  void set_sha1fp(const ::std::string& value);
  #if LANG_CXX11
  void set_sha1fp(::std::string&& value);
  #endif
  void set_sha1fp(const char* value);
  void set_sha1fp(const void* value, size_t size);
  ::std::string* mutable_sha1fp();
  ::std::string* release_sha1fp();
  void set_allocated_sha1fp(::std::string* sha1fp);

  // bytes sha256fp = 2;
  void clear_sha256fp();
  static const int kSha256FpFieldNumber = 2;
  const ::std::string& sha256fp() const;
  void set_sha256fp(const ::std::string& value);
  #if LANG_CXX11
  void set_sha256fp(::std::string&& value);
  #endif
  void set_sha256fp(const char* value);
  void set_sha256fp(const void* value, size_t size);
  ::std::string* mutable_sha256fp();
  ::std::string* release_sha256fp();
  void set_allocated_sha256fp(::std::string* sha256fp);

  // bytes raw = 3;
  void clear_raw();
  static const int kRawFieldNumber = 3;
  const ::std::string& raw() const;
  void set_raw(const ::std::string& value);
  #if LANG_CXX11
  void set_raw(::std::string&& value);
  #endif
  void set_raw(const char* value);
  void set_raw(const void* value, size_t size);
  ::std::string* mutable_raw();
  ::std::string* release_raw();
  void set_allocated_raw(::std::string* raw);

  // string parsed = 4;
  void clear_parsed();
  static const int kParsedFieldNumber = 4;
  const ::std::string& parsed() const;
  void set_parsed(const ::std::string& value);
  #if LANG_CXX11
  void set_parsed(::std::string&& value);
  #endif
  void set_parsed(const char* value);
  void set_parsed(const char* value, size_t size);
  ::std::string* mutable_parsed();
  ::std::string* release_parsed();
  void set_allocated_parsed(::std::string* parsed);

  // string parse_error = 47;
  void clear_parse_error();
  static const int kParseErrorFieldNumber = 47;
  const ::std::string& parse_error() const;
  void set_parse_error(const ::std::string& value);
  #if LANG_CXX11
  void set_parse_error(::std::string&& value);
  #endif
  void set_parse_error(const char* value);
  void set_parse_error(const char* value, size_t size);
  ::std::string* mutable_parse_error();
  ::std::string* release_parse_error();
  void set_allocated_parse_error(::std::string* parse_error);

  // .zsearch.CertificateValidation validation = 35;
  bool has_validation() const;
  void clear_validation();
  static const int kValidationFieldNumber = 35;
  const ::zsearch::CertificateValidation& validation() const;
  ::zsearch::CertificateValidation* mutable_validation();
  ::zsearch::CertificateValidation* release_validation();
  void set_allocated_validation(::zsearch::CertificateValidation* validation);

  // .zsearch.CTStatus ct = 30;
  bool has_ct() const;
  void clear_ct();
  static const int kCtFieldNumber = 30;
  const ::zsearch::CTStatus& ct() const;
  ::zsearch::CTStatus* mutable_ct();
  ::zsearch::CTStatus* release_ct();
  void set_allocated_ct(::zsearch::CTStatus* ct);

  // .zsearch.ZLint zlint = 38;
  bool has_zlint() const;
  void clear_zlint();
  static const int kZlintFieldNumber = 38;
  const ::zsearch::ZLint& zlint() const;
  ::zsearch::ZLint* mutable_zlint();
  ::zsearch::ZLint* release_zlint();
  void set_allocated_zlint(::zsearch::ZLint* zlint);

  // .zsearch.CertificateRevocation revocation = 43;
  bool has_revocation() const;
  void clear_revocation();
  static const int kRevocationFieldNumber = 43;
  const ::zsearch::CertificateRevocation& revocation() const;
  ::zsearch::CertificateRevocation* mutable_revocation();
  ::zsearch::CertificateRevocation* release_revocation();
  void set_allocated_revocation(::zsearch::CertificateRevocation* revocation);

  // .zsearch.CertificateAudit audit = 46;
  bool has_audit() const;
  void clear_audit();
  static const int kAuditFieldNumber = 46;
  const ::zsearch::CertificateAudit& audit() const;
  ::zsearch::CertificateAudit* mutable_audit();
  ::zsearch::CertificateAudit* release_audit();
  void set_allocated_audit(::zsearch::CertificateAudit* audit);

  // .zsearch.MozillaSalesForceStatus nss_audit = 31 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_nss_audit() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_nss_audit();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kNssAuditFieldNumber = 31;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::zsearch::MozillaSalesForceStatus& nss_audit() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::zsearch::MozillaSalesForceStatus* mutable_nss_audit();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::zsearch::MozillaSalesForceStatus* release_nss_audit();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_nss_audit(::zsearch::MozillaSalesForceStatus* nss_audit);

  // .zsearch.CertificateParseStatus parse_status = 44;
  void clear_parse_status();
  static const int kParseStatusFieldNumber = 44;
  ::zsearch::CertificateParseStatus parse_status() const;
  void set_parse_status(::zsearch::CertificateParseStatus value);

  // uint32 parse_version = 39;
  void clear_parse_version();
  static const int kParseVersionFieldNumber = 39;
  ::google::protobuf::uint32 parse_version() const;
  void set_parse_version(::google::protobuf::uint32 value);

  // .zsearch.CertificateSource source = 28;
  void clear_source();
  static const int kSourceFieldNumber = 28;
  ::zsearch::CertificateSource source() const;
  void set_source(::zsearch::CertificateSource value);

  // uint32 post_process_timestamp = 37;
  void clear_post_process_timestamp();
  static const int kPostProcessTimestampFieldNumber = 37;
  ::google::protobuf::uint32 post_process_timestamp() const;
  void set_post_process_timestamp(::google::protobuf::uint32 value);

  // bool seen_in_scan = 29;
  void clear_seen_in_scan();
  static const int kSeenInScanFieldNumber = 29;
  bool seen_in_scan() const;
  void set_seen_in_scan(bool value);

  // bool post_processed = 26;
  void clear_post_processed();
  static const int kPostProcessedFieldNumber = 26;
  bool post_processed() const;
  void set_post_processed(bool value);

  // bool is_precert = 32;
  void clear_is_precert();
  static const int kIsPrecertFieldNumber = 32;
  bool is_precert() const;
  void set_is_precert(bool value);

  // bool expired = 48;
  void clear_expired();
  static const int kExpiredFieldNumber = 48;
  bool expired() const;
  void set_expired(bool value);

  // uint32 not_valid_after = 41;
  void clear_not_valid_after();
  static const int kNotValidAfterFieldNumber = 41;
  ::google::protobuf::uint32 not_valid_after() const;
  void set_not_valid_after(::google::protobuf::uint32 value);

  // uint32 not_valid_before = 42;
  void clear_not_valid_before();
  static const int kNotValidBeforeFieldNumber = 42;
  ::google::protobuf::uint32 not_valid_before() const;
  void set_not_valid_before(::google::protobuf::uint32 value);

  // bool in_nss = 6;
  void clear_in_nss();
  static const int kInNssFieldNumber = 6;
  bool in_nss() const;
  void set_in_nss(bool value);

  // bool in_microsoft = 7 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_in_microsoft();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kInMicrosoftFieldNumber = 7;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool in_microsoft() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_in_microsoft(bool value);

  // bool in_apple = 8 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_in_apple();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kInAppleFieldNumber = 8;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool in_apple() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_in_apple(bool value);

  // bool valid_nss = 11 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_valid_nss();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kValidNssFieldNumber = 11;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool valid_nss() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_valid_nss(bool value);

  // uint32 validation_timestamp = 10;
  void clear_validation_timestamp();
  static const int kValidationTimestampFieldNumber = 10;
  ::google::protobuf::uint32 validation_timestamp() const;
  void set_validation_timestamp(::google::protobuf::uint32 value);

  // bool valid_microsoft = 12 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_valid_microsoft();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kValidMicrosoftFieldNumber = 12;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool valid_microsoft() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_valid_microsoft(bool value);

  // bool valid_apple = 13 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_valid_apple();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kValidAppleFieldNumber = 13;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool valid_apple() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_valid_apple(bool value);

  // bool was_valid_nss = 14;
  void clear_was_valid_nss();
  static const int kWasValidNssFieldNumber = 14;
  bool was_valid_nss() const;
  void set_was_valid_nss(bool value);

  // bool was_valid_microsoft = 15 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_was_valid_microsoft();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kWasValidMicrosoftFieldNumber = 15;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool was_valid_microsoft() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_was_valid_microsoft(bool value);

  // bool was_valid_apple = 16 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_was_valid_apple();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kWasValidAppleFieldNumber = 16;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool was_valid_apple() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_was_valid_apple(bool value);

  // bool was_in_nss = 17 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_was_in_nss();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kWasInNssFieldNumber = 17;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool was_in_nss() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_was_in_nss(bool value);

  // bool was_in_microsoft = 18 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_was_in_microsoft();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kWasInMicrosoftFieldNumber = 18;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool was_in_microsoft() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_was_in_microsoft(bool value);

  // bool was_in_apple = 19 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_was_in_apple();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kWasInAppleFieldNumber = 19;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool was_in_apple() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_was_in_apple(bool value);

  // bool current_valid_nss = 20;
  void clear_current_valid_nss();
  static const int kCurrentValidNssFieldNumber = 20;
  bool current_valid_nss() const;
  void set_current_valid_nss(bool value);

  // bool current_valid_microsoft = 21 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_current_valid_microsoft();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kCurrentValidMicrosoftFieldNumber = 21;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool current_valid_microsoft() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_current_valid_microsoft(bool value);

  // bool current_valid_apple = 22 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_current_valid_apple();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kCurrentValidAppleFieldNumber = 22;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool current_valid_apple() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_current_valid_apple(bool value);

  // bool current_in_nss = 23;
  void clear_current_in_nss();
  static const int kCurrentInNssFieldNumber = 23;
  bool current_in_nss() const;
  void set_current_in_nss(bool value);

  // bool current_in_microsoft = 24 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_current_in_microsoft();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kCurrentInMicrosoftFieldNumber = 24;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool current_in_microsoft() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_current_in_microsoft(bool value);

  // bool current_in_apple = 25 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_current_in_apple();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kCurrentInAppleFieldNumber = 25;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool current_in_apple() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_current_in_apple(bool value);

  // bool should_post_process = 27 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_should_post_process();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kShouldPostProcessFieldNumber = 27;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool should_post_process() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_should_post_process(bool value);

  // bool do_not_post_process = 36 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_do_not_post_process();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kDoNotPostProcessFieldNumber = 36;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool do_not_post_process() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_do_not_post_process(bool value);

  // @@protoc_insertion_point(class_scope:zsearch.Certificate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> parents_;
  ::google::protobuf::RepeatedPtrField< ::std::string> presented_chain_;
  ::google::protobuf::internal::ArenaStringPtr sha1fp_;
  ::google::protobuf::internal::ArenaStringPtr sha256fp_;
  ::google::protobuf::internal::ArenaStringPtr raw_;
  ::google::protobuf::internal::ArenaStringPtr parsed_;
  ::google::protobuf::internal::ArenaStringPtr parse_error_;
  ::zsearch::CertificateValidation* validation_;
  ::zsearch::CTStatus* ct_;
  ::zsearch::ZLint* zlint_;
  ::zsearch::CertificateRevocation* revocation_;
  ::zsearch::CertificateAudit* audit_;
  ::zsearch::MozillaSalesForceStatus* nss_audit_;
  int parse_status_;
  ::google::protobuf::uint32 parse_version_;
  int source_;
  ::google::protobuf::uint32 post_process_timestamp_;
  bool seen_in_scan_;
  bool post_processed_;
  bool is_precert_;
  bool expired_;
  ::google::protobuf::uint32 not_valid_after_;
  ::google::protobuf::uint32 not_valid_before_;
  bool in_nss_;
  bool in_microsoft_;
  bool in_apple_;
  bool valid_nss_;
  ::google::protobuf::uint32 validation_timestamp_;
  bool valid_microsoft_;
  bool valid_apple_;
  bool was_valid_nss_;
  bool was_valid_microsoft_;
  bool was_valid_apple_;
  bool was_in_nss_;
  bool was_in_microsoft_;
  bool was_in_apple_;
  bool current_valid_nss_;
  bool current_valid_microsoft_;
  bool current_valid_apple_;
  bool current_in_nss_;
  bool current_in_microsoft_;
  bool current_in_apple_;
  bool should_post_process_;
  bool do_not_post_process_;
  mutable int _cached_size_;
  friend struct  protobuf_certificate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Path

// repeated bytes sha256fp = 1;
inline int Path::sha256fp_size() const {
  return sha256fp_.size();
}
inline void Path::clear_sha256fp() {
  sha256fp_.Clear();
}
inline const ::std::string& Path::sha256fp(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.Path.sha256fp)
  return sha256fp_.Get(index);
}
inline ::std::string* Path::mutable_sha256fp(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.Path.sha256fp)
  return sha256fp_.Mutable(index);
}
inline void Path::set_sha256fp(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zsearch.Path.sha256fp)
  sha256fp_.Mutable(index)->assign(value);
}
inline void Path::set_sha256fp(int index, const char* value) {
  sha256fp_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zsearch.Path.sha256fp)
}
inline void Path::set_sha256fp(int index, const void* value, size_t size) {
  sha256fp_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zsearch.Path.sha256fp)
}
inline ::std::string* Path::add_sha256fp() {
  // @@protoc_insertion_point(field_add_mutable:zsearch.Path.sha256fp)
  return sha256fp_.Add();
}
inline void Path::add_sha256fp(const ::std::string& value) {
  sha256fp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zsearch.Path.sha256fp)
}
inline void Path::add_sha256fp(const char* value) {
  sha256fp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zsearch.Path.sha256fp)
}
inline void Path::add_sha256fp(const void* value, size_t size) {
  sha256fp_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zsearch.Path.sha256fp)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Path::sha256fp() const {
  // @@protoc_insertion_point(field_list:zsearch.Path.sha256fp)
  return sha256fp_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Path::mutable_sha256fp() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.Path.sha256fp)
  return &sha256fp_;
}

// -------------------------------------------------------------------

// RootStoreStatus

// bool valid = 1;
inline void RootStoreStatus::clear_valid() {
  valid_ = false;
}
inline bool RootStoreStatus::valid() const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.valid)
  return valid_;
}
inline void RootStoreStatus::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:zsearch.RootStoreStatus.valid)
}

// bool was_valid = 2;
inline void RootStoreStatus::clear_was_valid() {
  was_valid_ = false;
}
inline bool RootStoreStatus::was_valid() const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.was_valid)
  return was_valid_;
}
inline void RootStoreStatus::set_was_valid(bool value) {
  
  was_valid_ = value;
  // @@protoc_insertion_point(field_set:zsearch.RootStoreStatus.was_valid)
}

// bool has_trusted_path = 3;
inline void RootStoreStatus::clear_has_trusted_path() {
  has_trusted_path_ = false;
}
inline bool RootStoreStatus::has_trusted_path() const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.has_trusted_path)
  return has_trusted_path_;
}
inline void RootStoreStatus::set_has_trusted_path(bool value) {
  
  has_trusted_path_ = value;
  // @@protoc_insertion_point(field_set:zsearch.RootStoreStatus.has_trusted_path)
}

// bool had_trusted_path = 4;
inline void RootStoreStatus::clear_had_trusted_path() {
  had_trusted_path_ = false;
}
inline bool RootStoreStatus::had_trusted_path() const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.had_trusted_path)
  return had_trusted_path_;
}
inline void RootStoreStatus::set_had_trusted_path(bool value) {
  
  had_trusted_path_ = value;
  // @@protoc_insertion_point(field_set:zsearch.RootStoreStatus.had_trusted_path)
}

// bool blacklisted = 5;
inline void RootStoreStatus::clear_blacklisted() {
  blacklisted_ = false;
}
inline bool RootStoreStatus::blacklisted() const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.blacklisted)
  return blacklisted_;
}
inline void RootStoreStatus::set_blacklisted(bool value) {
  
  blacklisted_ = value;
  // @@protoc_insertion_point(field_set:zsearch.RootStoreStatus.blacklisted)
}

// bool whitelisted = 6;
inline void RootStoreStatus::clear_whitelisted() {
  whitelisted_ = false;
}
inline bool RootStoreStatus::whitelisted() const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.whitelisted)
  return whitelisted_;
}
inline void RootStoreStatus::set_whitelisted(bool value) {
  
  whitelisted_ = value;
  // @@protoc_insertion_point(field_set:zsearch.RootStoreStatus.whitelisted)
}

// .zsearch.CertificateType type = 7;
inline void RootStoreStatus::clear_type() {
  type_ = 0;
}
inline ::zsearch::CertificateType RootStoreStatus::type() const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.type)
  return static_cast< ::zsearch::CertificateType >(type_);
}
inline void RootStoreStatus::set_type(::zsearch::CertificateType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:zsearch.RootStoreStatus.type)
}

// repeated .zsearch.Path trusted_paths = 8;
inline int RootStoreStatus::trusted_paths_size() const {
  return trusted_paths_.size();
}
inline void RootStoreStatus::clear_trusted_paths() {
  trusted_paths_.Clear();
}
inline const ::zsearch::Path& RootStoreStatus::trusted_paths(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.trusted_paths)
  return trusted_paths_.Get(index);
}
inline ::zsearch::Path* RootStoreStatus::mutable_trusted_paths(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.RootStoreStatus.trusted_paths)
  return trusted_paths_.Mutable(index);
}
inline ::zsearch::Path* RootStoreStatus::add_trusted_paths() {
  // @@protoc_insertion_point(field_add:zsearch.RootStoreStatus.trusted_paths)
  return trusted_paths_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zsearch::Path >*
RootStoreStatus::mutable_trusted_paths() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.RootStoreStatus.trusted_paths)
  return &trusted_paths_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zsearch::Path >&
RootStoreStatus::trusted_paths() const {
  // @@protoc_insertion_point(field_list:zsearch.RootStoreStatus.trusted_paths)
  return trusted_paths_;
}

// bool in_revocation_set = 9;
inline void RootStoreStatus::clear_in_revocation_set() {
  in_revocation_set_ = false;
}
inline bool RootStoreStatus::in_revocation_set() const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.in_revocation_set)
  return in_revocation_set_;
}
inline void RootStoreStatus::set_in_revocation_set(bool value) {
  
  in_revocation_set_ = value;
  // @@protoc_insertion_point(field_set:zsearch.RootStoreStatus.in_revocation_set)
}

// -------------------------------------------------------------------

// CertificateValidation

// .zsearch.RootStoreStatus nss = 1;
inline bool CertificateValidation::has_nss() const {
  return this != internal_default_instance() && nss_ != NULL;
}
inline void CertificateValidation::clear_nss() {
  if (GetArenaNoVirtual() == NULL && nss_ != NULL) delete nss_;
  nss_ = NULL;
}
inline const ::zsearch::RootStoreStatus& CertificateValidation::nss() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateValidation.nss)
  return nss_ != NULL ? *nss_
                         : *::zsearch::RootStoreStatus::internal_default_instance();
}
inline ::zsearch::RootStoreStatus* CertificateValidation::mutable_nss() {
  
  if (nss_ == NULL) {
    nss_ = new ::zsearch::RootStoreStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CertificateValidation.nss)
  return nss_;
}
inline ::zsearch::RootStoreStatus* CertificateValidation::release_nss() {
  // @@protoc_insertion_point(field_release:zsearch.CertificateValidation.nss)
  
  ::zsearch::RootStoreStatus* temp = nss_;
  nss_ = NULL;
  return temp;
}
inline void CertificateValidation::set_allocated_nss(::zsearch::RootStoreStatus* nss) {
  delete nss_;
  nss_ = nss;
  if (nss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CertificateValidation.nss)
}

// .zsearch.RootStoreStatus microsoft = 2;
inline bool CertificateValidation::has_microsoft() const {
  return this != internal_default_instance() && microsoft_ != NULL;
}
inline void CertificateValidation::clear_microsoft() {
  if (GetArenaNoVirtual() == NULL && microsoft_ != NULL) delete microsoft_;
  microsoft_ = NULL;
}
inline const ::zsearch::RootStoreStatus& CertificateValidation::microsoft() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateValidation.microsoft)
  return microsoft_ != NULL ? *microsoft_
                         : *::zsearch::RootStoreStatus::internal_default_instance();
}
inline ::zsearch::RootStoreStatus* CertificateValidation::mutable_microsoft() {
  
  if (microsoft_ == NULL) {
    microsoft_ = new ::zsearch::RootStoreStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CertificateValidation.microsoft)
  return microsoft_;
}
inline ::zsearch::RootStoreStatus* CertificateValidation::release_microsoft() {
  // @@protoc_insertion_point(field_release:zsearch.CertificateValidation.microsoft)
  
  ::zsearch::RootStoreStatus* temp = microsoft_;
  microsoft_ = NULL;
  return temp;
}
inline void CertificateValidation::set_allocated_microsoft(::zsearch::RootStoreStatus* microsoft) {
  delete microsoft_;
  microsoft_ = microsoft;
  if (microsoft) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CertificateValidation.microsoft)
}

// .zsearch.RootStoreStatus apple = 3;
inline bool CertificateValidation::has_apple() const {
  return this != internal_default_instance() && apple_ != NULL;
}
inline void CertificateValidation::clear_apple() {
  if (GetArenaNoVirtual() == NULL && apple_ != NULL) delete apple_;
  apple_ = NULL;
}
inline const ::zsearch::RootStoreStatus& CertificateValidation::apple() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateValidation.apple)
  return apple_ != NULL ? *apple_
                         : *::zsearch::RootStoreStatus::internal_default_instance();
}
inline ::zsearch::RootStoreStatus* CertificateValidation::mutable_apple() {
  
  if (apple_ == NULL) {
    apple_ = new ::zsearch::RootStoreStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CertificateValidation.apple)
  return apple_;
}
inline ::zsearch::RootStoreStatus* CertificateValidation::release_apple() {
  // @@protoc_insertion_point(field_release:zsearch.CertificateValidation.apple)
  
  ::zsearch::RootStoreStatus* temp = apple_;
  apple_ = NULL;
  return temp;
}
inline void CertificateValidation::set_allocated_apple(::zsearch::RootStoreStatus* apple) {
  delete apple_;
  apple_ = apple;
  if (apple) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CertificateValidation.apple)
}

// .zsearch.RootStoreStatus java = 4;
inline bool CertificateValidation::has_java() const {
  return this != internal_default_instance() && java_ != NULL;
}
inline void CertificateValidation::clear_java() {
  if (GetArenaNoVirtual() == NULL && java_ != NULL) delete java_;
  java_ = NULL;
}
inline const ::zsearch::RootStoreStatus& CertificateValidation::java() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateValidation.java)
  return java_ != NULL ? *java_
                         : *::zsearch::RootStoreStatus::internal_default_instance();
}
inline ::zsearch::RootStoreStatus* CertificateValidation::mutable_java() {
  
  if (java_ == NULL) {
    java_ = new ::zsearch::RootStoreStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CertificateValidation.java)
  return java_;
}
inline ::zsearch::RootStoreStatus* CertificateValidation::release_java() {
  // @@protoc_insertion_point(field_release:zsearch.CertificateValidation.java)
  
  ::zsearch::RootStoreStatus* temp = java_;
  java_ = NULL;
  return temp;
}
inline void CertificateValidation::set_allocated_java(::zsearch::RootStoreStatus* java) {
  delete java_;
  java_ = java;
  if (java) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CertificateValidation.java)
}

// .zsearch.RootStoreStatus android = 5;
inline bool CertificateValidation::has_android() const {
  return this != internal_default_instance() && android_ != NULL;
}
inline void CertificateValidation::clear_android() {
  if (GetArenaNoVirtual() == NULL && android_ != NULL) delete android_;
  android_ = NULL;
}
inline const ::zsearch::RootStoreStatus& CertificateValidation::android() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateValidation.android)
  return android_ != NULL ? *android_
                         : *::zsearch::RootStoreStatus::internal_default_instance();
}
inline ::zsearch::RootStoreStatus* CertificateValidation::mutable_android() {
  
  if (android_ == NULL) {
    android_ = new ::zsearch::RootStoreStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CertificateValidation.android)
  return android_;
}
inline ::zsearch::RootStoreStatus* CertificateValidation::release_android() {
  // @@protoc_insertion_point(field_release:zsearch.CertificateValidation.android)
  
  ::zsearch::RootStoreStatus* temp = android_;
  android_ = NULL;
  return temp;
}
inline void CertificateValidation::set_allocated_android(::zsearch::RootStoreStatus* android) {
  delete android_;
  android_ = android;
  if (android) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CertificateValidation.android)
}

// .zsearch.RootStoreStatus google_ct_primary = 10;
inline bool CertificateValidation::has_google_ct_primary() const {
  return this != internal_default_instance() && google_ct_primary_ != NULL;
}
inline void CertificateValidation::clear_google_ct_primary() {
  if (GetArenaNoVirtual() == NULL && google_ct_primary_ != NULL) delete google_ct_primary_;
  google_ct_primary_ = NULL;
}
inline const ::zsearch::RootStoreStatus& CertificateValidation::google_ct_primary() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateValidation.google_ct_primary)
  return google_ct_primary_ != NULL ? *google_ct_primary_
                         : *::zsearch::RootStoreStatus::internal_default_instance();
}
inline ::zsearch::RootStoreStatus* CertificateValidation::mutable_google_ct_primary() {
  
  if (google_ct_primary_ == NULL) {
    google_ct_primary_ = new ::zsearch::RootStoreStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CertificateValidation.google_ct_primary)
  return google_ct_primary_;
}
inline ::zsearch::RootStoreStatus* CertificateValidation::release_google_ct_primary() {
  // @@protoc_insertion_point(field_release:zsearch.CertificateValidation.google_ct_primary)
  
  ::zsearch::RootStoreStatus* temp = google_ct_primary_;
  google_ct_primary_ = NULL;
  return temp;
}
inline void CertificateValidation::set_allocated_google_ct_primary(::zsearch::RootStoreStatus* google_ct_primary) {
  delete google_ct_primary_;
  google_ct_primary_ = google_ct_primary;
  if (google_ct_primary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CertificateValidation.google_ct_primary)
}

// -------------------------------------------------------------------

// MozillaSalesForceStatus

// bool current_in = 1;
inline void MozillaSalesForceStatus::clear_current_in() {
  current_in_ = false;
}
inline bool MozillaSalesForceStatus::current_in() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.current_in)
  return current_in_;
}
inline void MozillaSalesForceStatus::set_current_in(bool value) {
  
  current_in_ = value;
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.current_in)
}

// bool was_in = 2;
inline void MozillaSalesForceStatus::clear_was_in() {
  was_in_ = false;
}
inline bool MozillaSalesForceStatus::was_in() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.was_in)
  return was_in_;
}
inline void MozillaSalesForceStatus::set_was_in(bool value) {
  
  was_in_ = value;
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.was_in)
}

// string owner_name = 3;
inline void MozillaSalesForceStatus::clear_owner_name() {
  owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MozillaSalesForceStatus::owner_name() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.owner_name)
  return owner_name_.GetNoArena();
}
inline void MozillaSalesForceStatus::set_owner_name(const ::std::string& value) {
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.owner_name)
}
#if LANG_CXX11
inline void MozillaSalesForceStatus::set_owner_name(::std::string&& value) {
  
  owner_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.owner_name)
}
#endif
inline void MozillaSalesForceStatus::set_owner_name(const char* value) {
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.owner_name)
}
inline void MozillaSalesForceStatus::set_owner_name(const char* value, size_t size) {
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.owner_name)
}
inline ::std::string* MozillaSalesForceStatus::mutable_owner_name() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.owner_name)
  return owner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MozillaSalesForceStatus::release_owner_name() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.owner_name)
  
  return owner_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MozillaSalesForceStatus::set_allocated_owner_name(::std::string* owner_name) {
  if (owner_name != NULL) {
    
  } else {
    
  }
  owner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_name);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.owner_name)
}

// string parent_name = 4;
inline void MozillaSalesForceStatus::clear_parent_name() {
  parent_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MozillaSalesForceStatus::parent_name() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.parent_name)
  return parent_name_.GetNoArena();
}
inline void MozillaSalesForceStatus::set_parent_name(const ::std::string& value) {
  
  parent_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.parent_name)
}
#if LANG_CXX11
inline void MozillaSalesForceStatus::set_parent_name(::std::string&& value) {
  
  parent_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.parent_name)
}
#endif
inline void MozillaSalesForceStatus::set_parent_name(const char* value) {
  
  parent_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.parent_name)
}
inline void MozillaSalesForceStatus::set_parent_name(const char* value, size_t size) {
  
  parent_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.parent_name)
}
inline ::std::string* MozillaSalesForceStatus::mutable_parent_name() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.parent_name)
  return parent_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MozillaSalesForceStatus::release_parent_name() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.parent_name)
  
  return parent_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MozillaSalesForceStatus::set_allocated_parent_name(::std::string* parent_name) {
  if (parent_name != NULL) {
    
  } else {
    
  }
  parent_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_name);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.parent_name)
}

// string certificate_name = 5;
inline void MozillaSalesForceStatus::clear_certificate_name() {
  certificate_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MozillaSalesForceStatus::certificate_name() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.certificate_name)
  return certificate_name_.GetNoArena();
}
inline void MozillaSalesForceStatus::set_certificate_name(const ::std::string& value) {
  
  certificate_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.certificate_name)
}
#if LANG_CXX11
inline void MozillaSalesForceStatus::set_certificate_name(::std::string&& value) {
  
  certificate_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.certificate_name)
}
#endif
inline void MozillaSalesForceStatus::set_certificate_name(const char* value) {
  
  certificate_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.certificate_name)
}
inline void MozillaSalesForceStatus::set_certificate_name(const char* value, size_t size) {
  
  certificate_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.certificate_name)
}
inline ::std::string* MozillaSalesForceStatus::mutable_certificate_name() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.certificate_name)
  return certificate_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MozillaSalesForceStatus::release_certificate_name() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.certificate_name)
  
  return certificate_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MozillaSalesForceStatus::set_allocated_certificate_name(::std::string* certificate_name) {
  if (certificate_name != NULL) {
    
  } else {
    
  }
  certificate_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certificate_name);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.certificate_name)
}

// string certificate_policy = 6;
inline void MozillaSalesForceStatus::clear_certificate_policy() {
  certificate_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MozillaSalesForceStatus::certificate_policy() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.certificate_policy)
  return certificate_policy_.GetNoArena();
}
inline void MozillaSalesForceStatus::set_certificate_policy(const ::std::string& value) {
  
  certificate_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.certificate_policy)
}
#if LANG_CXX11
inline void MozillaSalesForceStatus::set_certificate_policy(::std::string&& value) {
  
  certificate_policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.certificate_policy)
}
#endif
inline void MozillaSalesForceStatus::set_certificate_policy(const char* value) {
  
  certificate_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.certificate_policy)
}
inline void MozillaSalesForceStatus::set_certificate_policy(const char* value, size_t size) {
  
  certificate_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.certificate_policy)
}
inline ::std::string* MozillaSalesForceStatus::mutable_certificate_policy() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.certificate_policy)
  return certificate_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MozillaSalesForceStatus::release_certificate_policy() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.certificate_policy)
  
  return certificate_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MozillaSalesForceStatus::set_allocated_certificate_policy(::std::string* certificate_policy) {
  if (certificate_policy != NULL) {
    
  } else {
    
  }
  certificate_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certificate_policy);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.certificate_policy)
}

// string certification_practice_statement = 7;
inline void MozillaSalesForceStatus::clear_certification_practice_statement() {
  certification_practice_statement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MozillaSalesForceStatus::certification_practice_statement() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.certification_practice_statement)
  return certification_practice_statement_.GetNoArena();
}
inline void MozillaSalesForceStatus::set_certification_practice_statement(const ::std::string& value) {
  
  certification_practice_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.certification_practice_statement)
}
#if LANG_CXX11
inline void MozillaSalesForceStatus::set_certification_practice_statement(::std::string&& value) {
  
  certification_practice_statement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.certification_practice_statement)
}
#endif
inline void MozillaSalesForceStatus::set_certification_practice_statement(const char* value) {
  
  certification_practice_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.certification_practice_statement)
}
inline void MozillaSalesForceStatus::set_certification_practice_statement(const char* value, size_t size) {
  
  certification_practice_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.certification_practice_statement)
}
inline ::std::string* MozillaSalesForceStatus::mutable_certification_practice_statement() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.certification_practice_statement)
  return certification_practice_statement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MozillaSalesForceStatus::release_certification_practice_statement() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.certification_practice_statement)
  
  return certification_practice_statement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MozillaSalesForceStatus::set_allocated_certification_practice_statement(::std::string* certification_practice_statement) {
  if (certification_practice_statement != NULL) {
    
  } else {
    
  }
  certification_practice_statement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certification_practice_statement);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.certification_practice_statement)
}

// bool cp_same_as_parent = 8;
inline void MozillaSalesForceStatus::clear_cp_same_as_parent() {
  cp_same_as_parent_ = false;
}
inline bool MozillaSalesForceStatus::cp_same_as_parent() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.cp_same_as_parent)
  return cp_same_as_parent_;
}
inline void MozillaSalesForceStatus::set_cp_same_as_parent(bool value) {
  
  cp_same_as_parent_ = value;
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.cp_same_as_parent)
}

// bool audit_same_as_parent = 9;
inline void MozillaSalesForceStatus::clear_audit_same_as_parent() {
  audit_same_as_parent_ = false;
}
inline bool MozillaSalesForceStatus::audit_same_as_parent() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.audit_same_as_parent)
  return audit_same_as_parent_;
}
inline void MozillaSalesForceStatus::set_audit_same_as_parent(bool value) {
  
  audit_same_as_parent_ = value;
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.audit_same_as_parent)
}

// string standard_audit = 10;
inline void MozillaSalesForceStatus::clear_standard_audit() {
  standard_audit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MozillaSalesForceStatus::standard_audit() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.standard_audit)
  return standard_audit_.GetNoArena();
}
inline void MozillaSalesForceStatus::set_standard_audit(const ::std::string& value) {
  
  standard_audit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.standard_audit)
}
#if LANG_CXX11
inline void MozillaSalesForceStatus::set_standard_audit(::std::string&& value) {
  
  standard_audit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.standard_audit)
}
#endif
inline void MozillaSalesForceStatus::set_standard_audit(const char* value) {
  
  standard_audit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.standard_audit)
}
inline void MozillaSalesForceStatus::set_standard_audit(const char* value, size_t size) {
  
  standard_audit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.standard_audit)
}
inline ::std::string* MozillaSalesForceStatus::mutable_standard_audit() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.standard_audit)
  return standard_audit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MozillaSalesForceStatus::release_standard_audit() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.standard_audit)
  
  return standard_audit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MozillaSalesForceStatus::set_allocated_standard_audit(::std::string* standard_audit) {
  if (standard_audit != NULL) {
    
  } else {
    
  }
  standard_audit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), standard_audit);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.standard_audit)
}

// string br_audit = 11;
inline void MozillaSalesForceStatus::clear_br_audit() {
  br_audit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MozillaSalesForceStatus::br_audit() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.br_audit)
  return br_audit_.GetNoArena();
}
inline void MozillaSalesForceStatus::set_br_audit(const ::std::string& value) {
  
  br_audit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.br_audit)
}
#if LANG_CXX11
inline void MozillaSalesForceStatus::set_br_audit(::std::string&& value) {
  
  br_audit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.br_audit)
}
#endif
inline void MozillaSalesForceStatus::set_br_audit(const char* value) {
  
  br_audit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.br_audit)
}
inline void MozillaSalesForceStatus::set_br_audit(const char* value, size_t size) {
  
  br_audit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.br_audit)
}
inline ::std::string* MozillaSalesForceStatus::mutable_br_audit() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.br_audit)
  return br_audit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MozillaSalesForceStatus::release_br_audit() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.br_audit)
  
  return br_audit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MozillaSalesForceStatus::set_allocated_br_audit(::std::string* br_audit) {
  if (br_audit != NULL) {
    
  } else {
    
  }
  br_audit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), br_audit);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.br_audit)
}

// string auditor = 12;
inline void MozillaSalesForceStatus::clear_auditor() {
  auditor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MozillaSalesForceStatus::auditor() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.auditor)
  return auditor_.GetNoArena();
}
inline void MozillaSalesForceStatus::set_auditor(const ::std::string& value) {
  
  auditor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.auditor)
}
#if LANG_CXX11
inline void MozillaSalesForceStatus::set_auditor(::std::string&& value) {
  
  auditor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.auditor)
}
#endif
inline void MozillaSalesForceStatus::set_auditor(const char* value) {
  
  auditor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.auditor)
}
inline void MozillaSalesForceStatus::set_auditor(const char* value, size_t size) {
  
  auditor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.auditor)
}
inline ::std::string* MozillaSalesForceStatus::mutable_auditor() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.auditor)
  return auditor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MozillaSalesForceStatus::release_auditor() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.auditor)
  
  return auditor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MozillaSalesForceStatus::set_allocated_auditor(::std::string* auditor) {
  if (auditor != NULL) {
    
  } else {
    
  }
  auditor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auditor);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.auditor)
}

// -------------------------------------------------------------------

// CertificateRevocation

// bool revoked = 1;
inline void CertificateRevocation::clear_revoked() {
  revoked_ = false;
}
inline bool CertificateRevocation::revoked() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateRevocation.revoked)
  return revoked_;
}
inline void CertificateRevocation::set_revoked(bool value) {
  
  revoked_ = value;
  // @@protoc_insertion_point(field_set:zsearch.CertificateRevocation.revoked)
}

// .zsearch.CertificateRevocationReason reason = 2;
inline void CertificateRevocation::clear_reason() {
  reason_ = 0;
}
inline ::zsearch::CertificateRevocationReason CertificateRevocation::reason() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateRevocation.reason)
  return static_cast< ::zsearch::CertificateRevocationReason >(reason_);
}
inline void CertificateRevocation::set_reason(::zsearch::CertificateRevocationReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:zsearch.CertificateRevocation.reason)
}

// -------------------------------------------------------------------

// CertificateAudit

// .zsearch.MozillaSalesForceStatus mozilla = 1;
inline bool CertificateAudit::has_mozilla() const {
  return this != internal_default_instance() && mozilla_ != NULL;
}
inline void CertificateAudit::clear_mozilla() {
  if (GetArenaNoVirtual() == NULL && mozilla_ != NULL) delete mozilla_;
  mozilla_ = NULL;
}
inline const ::zsearch::MozillaSalesForceStatus& CertificateAudit::mozilla() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateAudit.mozilla)
  return mozilla_ != NULL ? *mozilla_
                         : *::zsearch::MozillaSalesForceStatus::internal_default_instance();
}
inline ::zsearch::MozillaSalesForceStatus* CertificateAudit::mutable_mozilla() {
  
  if (mozilla_ == NULL) {
    mozilla_ = new ::zsearch::MozillaSalesForceStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CertificateAudit.mozilla)
  return mozilla_;
}
inline ::zsearch::MozillaSalesForceStatus* CertificateAudit::release_mozilla() {
  // @@protoc_insertion_point(field_release:zsearch.CertificateAudit.mozilla)
  
  ::zsearch::MozillaSalesForceStatus* temp = mozilla_;
  mozilla_ = NULL;
  return temp;
}
inline void CertificateAudit::set_allocated_mozilla(::zsearch::MozillaSalesForceStatus* mozilla) {
  delete mozilla_;
  mozilla_ = mozilla;
  if (mozilla) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CertificateAudit.mozilla)
}

// -------------------------------------------------------------------

// Certificate

// bytes sha1fp = 1;
inline void Certificate::clear_sha1fp() {
  sha1fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Certificate::sha1fp() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.sha1fp)
  return sha1fp_.GetNoArena();
}
inline void Certificate::set_sha1fp(const ::std::string& value) {
  
  sha1fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.Certificate.sha1fp)
}
#if LANG_CXX11
inline void Certificate::set_sha1fp(::std::string&& value) {
  
  sha1fp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.Certificate.sha1fp)
}
#endif
inline void Certificate::set_sha1fp(const char* value) {
  
  sha1fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.Certificate.sha1fp)
}
inline void Certificate::set_sha1fp(const void* value, size_t size) {
  
  sha1fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.Certificate.sha1fp)
}
inline ::std::string* Certificate::mutable_sha1fp() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.sha1fp)
  return sha1fp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Certificate::release_sha1fp() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.sha1fp)
  
  return sha1fp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Certificate::set_allocated_sha1fp(::std::string* sha1fp) {
  if (sha1fp != NULL) {
    
  } else {
    
  }
  sha1fp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha1fp);
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.sha1fp)
}

// bytes sha256fp = 2;
inline void Certificate::clear_sha256fp() {
  sha256fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Certificate::sha256fp() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.sha256fp)
  return sha256fp_.GetNoArena();
}
inline void Certificate::set_sha256fp(const ::std::string& value) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.Certificate.sha256fp)
}
#if LANG_CXX11
inline void Certificate::set_sha256fp(::std::string&& value) {
  
  sha256fp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.Certificate.sha256fp)
}
#endif
inline void Certificate::set_sha256fp(const char* value) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.Certificate.sha256fp)
}
inline void Certificate::set_sha256fp(const void* value, size_t size) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.Certificate.sha256fp)
}
inline ::std::string* Certificate::mutable_sha256fp() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.sha256fp)
  return sha256fp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Certificate::release_sha256fp() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.sha256fp)
  
  return sha256fp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Certificate::set_allocated_sha256fp(::std::string* sha256fp) {
  if (sha256fp != NULL) {
    
  } else {
    
  }
  sha256fp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha256fp);
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.sha256fp)
}

// bytes raw = 3;
inline void Certificate::clear_raw() {
  raw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Certificate::raw() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.raw)
  return raw_.GetNoArena();
}
inline void Certificate::set_raw(const ::std::string& value) {
  
  raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.Certificate.raw)
}
#if LANG_CXX11
inline void Certificate::set_raw(::std::string&& value) {
  
  raw_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.Certificate.raw)
}
#endif
inline void Certificate::set_raw(const char* value) {
  
  raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.Certificate.raw)
}
inline void Certificate::set_raw(const void* value, size_t size) {
  
  raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.Certificate.raw)
}
inline ::std::string* Certificate::mutable_raw() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.raw)
  return raw_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Certificate::release_raw() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.raw)
  
  return raw_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Certificate::set_allocated_raw(::std::string* raw) {
  if (raw != NULL) {
    
  } else {
    
  }
  raw_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw);
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.raw)
}

// string parsed = 4;
inline void Certificate::clear_parsed() {
  parsed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Certificate::parsed() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.parsed)
  return parsed_.GetNoArena();
}
inline void Certificate::set_parsed(const ::std::string& value) {
  
  parsed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.Certificate.parsed)
}
#if LANG_CXX11
inline void Certificate::set_parsed(::std::string&& value) {
  
  parsed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.Certificate.parsed)
}
#endif
inline void Certificate::set_parsed(const char* value) {
  
  parsed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.Certificate.parsed)
}
inline void Certificate::set_parsed(const char* value, size_t size) {
  
  parsed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.Certificate.parsed)
}
inline ::std::string* Certificate::mutable_parsed() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.parsed)
  return parsed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Certificate::release_parsed() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.parsed)
  
  return parsed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Certificate::set_allocated_parsed(::std::string* parsed) {
  if (parsed != NULL) {
    
  } else {
    
  }
  parsed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parsed);
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.parsed)
}

// .zsearch.CertificateParseStatus parse_status = 44;
inline void Certificate::clear_parse_status() {
  parse_status_ = 0;
}
inline ::zsearch::CertificateParseStatus Certificate::parse_status() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.parse_status)
  return static_cast< ::zsearch::CertificateParseStatus >(parse_status_);
}
inline void Certificate::set_parse_status(::zsearch::CertificateParseStatus value) {
  
  parse_status_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.parse_status)
}

// uint32 parse_version = 39;
inline void Certificate::clear_parse_version() {
  parse_version_ = 0u;
}
inline ::google::protobuf::uint32 Certificate::parse_version() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.parse_version)
  return parse_version_;
}
inline void Certificate::set_parse_version(::google::protobuf::uint32 value) {
  
  parse_version_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.parse_version)
}

// string parse_error = 47;
inline void Certificate::clear_parse_error() {
  parse_error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Certificate::parse_error() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.parse_error)
  return parse_error_.GetNoArena();
}
inline void Certificate::set_parse_error(const ::std::string& value) {
  
  parse_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.Certificate.parse_error)
}
#if LANG_CXX11
inline void Certificate::set_parse_error(::std::string&& value) {
  
  parse_error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.Certificate.parse_error)
}
#endif
inline void Certificate::set_parse_error(const char* value) {
  
  parse_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.Certificate.parse_error)
}
inline void Certificate::set_parse_error(const char* value, size_t size) {
  
  parse_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.Certificate.parse_error)
}
inline ::std::string* Certificate::mutable_parse_error() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.parse_error)
  return parse_error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Certificate::release_parse_error() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.parse_error)
  
  return parse_error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Certificate::set_allocated_parse_error(::std::string* parse_error) {
  if (parse_error != NULL) {
    
  } else {
    
  }
  parse_error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parse_error);
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.parse_error)
}

// repeated bytes parents = 5;
inline int Certificate::parents_size() const {
  return parents_.size();
}
inline void Certificate::clear_parents() {
  parents_.Clear();
}
inline const ::std::string& Certificate::parents(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.parents)
  return parents_.Get(index);
}
inline ::std::string* Certificate::mutable_parents(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.parents)
  return parents_.Mutable(index);
}
inline void Certificate::set_parents(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zsearch.Certificate.parents)
  parents_.Mutable(index)->assign(value);
}
inline void Certificate::set_parents(int index, const char* value) {
  parents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zsearch.Certificate.parents)
}
inline void Certificate::set_parents(int index, const void* value, size_t size) {
  parents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zsearch.Certificate.parents)
}
inline ::std::string* Certificate::add_parents() {
  // @@protoc_insertion_point(field_add_mutable:zsearch.Certificate.parents)
  return parents_.Add();
}
inline void Certificate::add_parents(const ::std::string& value) {
  parents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zsearch.Certificate.parents)
}
inline void Certificate::add_parents(const char* value) {
  parents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zsearch.Certificate.parents)
}
inline void Certificate::add_parents(const void* value, size_t size) {
  parents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zsearch.Certificate.parents)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Certificate::parents() const {
  // @@protoc_insertion_point(field_list:zsearch.Certificate.parents)
  return parents_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Certificate::mutable_parents() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.Certificate.parents)
  return &parents_;
}

// repeated bytes presented_chain = 45;
inline int Certificate::presented_chain_size() const {
  return presented_chain_.size();
}
inline void Certificate::clear_presented_chain() {
  presented_chain_.Clear();
}
inline const ::std::string& Certificate::presented_chain(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.presented_chain)
  return presented_chain_.Get(index);
}
inline ::std::string* Certificate::mutable_presented_chain(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.presented_chain)
  return presented_chain_.Mutable(index);
}
inline void Certificate::set_presented_chain(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zsearch.Certificate.presented_chain)
  presented_chain_.Mutable(index)->assign(value);
}
inline void Certificate::set_presented_chain(int index, const char* value) {
  presented_chain_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zsearch.Certificate.presented_chain)
}
inline void Certificate::set_presented_chain(int index, const void* value, size_t size) {
  presented_chain_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zsearch.Certificate.presented_chain)
}
inline ::std::string* Certificate::add_presented_chain() {
  // @@protoc_insertion_point(field_add_mutable:zsearch.Certificate.presented_chain)
  return presented_chain_.Add();
}
inline void Certificate::add_presented_chain(const ::std::string& value) {
  presented_chain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zsearch.Certificate.presented_chain)
}
inline void Certificate::add_presented_chain(const char* value) {
  presented_chain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zsearch.Certificate.presented_chain)
}
inline void Certificate::add_presented_chain(const void* value, size_t size) {
  presented_chain_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zsearch.Certificate.presented_chain)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Certificate::presented_chain() const {
  // @@protoc_insertion_point(field_list:zsearch.Certificate.presented_chain)
  return presented_chain_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Certificate::mutable_presented_chain() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.Certificate.presented_chain)
  return &presented_chain_;
}

// .zsearch.CertificateSource source = 28;
inline void Certificate::clear_source() {
  source_ = 0;
}
inline ::zsearch::CertificateSource Certificate::source() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.source)
  return static_cast< ::zsearch::CertificateSource >(source_);
}
inline void Certificate::set_source(::zsearch::CertificateSource value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.source)
}

// bool seen_in_scan = 29;
inline void Certificate::clear_seen_in_scan() {
  seen_in_scan_ = false;
}
inline bool Certificate::seen_in_scan() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.seen_in_scan)
  return seen_in_scan_;
}
inline void Certificate::set_seen_in_scan(bool value) {
  
  seen_in_scan_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.seen_in_scan)
}

// bool post_processed = 26;
inline void Certificate::clear_post_processed() {
  post_processed_ = false;
}
inline bool Certificate::post_processed() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.post_processed)
  return post_processed_;
}
inline void Certificate::set_post_processed(bool value) {
  
  post_processed_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.post_processed)
}

// uint32 post_process_timestamp = 37;
inline void Certificate::clear_post_process_timestamp() {
  post_process_timestamp_ = 0u;
}
inline ::google::protobuf::uint32 Certificate::post_process_timestamp() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.post_process_timestamp)
  return post_process_timestamp_;
}
inline void Certificate::set_post_process_timestamp(::google::protobuf::uint32 value) {
  
  post_process_timestamp_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.post_process_timestamp)
}

// .zsearch.CertificateValidation validation = 35;
inline bool Certificate::has_validation() const {
  return this != internal_default_instance() && validation_ != NULL;
}
inline void Certificate::clear_validation() {
  if (GetArenaNoVirtual() == NULL && validation_ != NULL) delete validation_;
  validation_ = NULL;
}
inline const ::zsearch::CertificateValidation& Certificate::validation() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.validation)
  return validation_ != NULL ? *validation_
                         : *::zsearch::CertificateValidation::internal_default_instance();
}
inline ::zsearch::CertificateValidation* Certificate::mutable_validation() {
  
  if (validation_ == NULL) {
    validation_ = new ::zsearch::CertificateValidation;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.validation)
  return validation_;
}
inline ::zsearch::CertificateValidation* Certificate::release_validation() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.validation)
  
  ::zsearch::CertificateValidation* temp = validation_;
  validation_ = NULL;
  return temp;
}
inline void Certificate::set_allocated_validation(::zsearch::CertificateValidation* validation) {
  delete validation_;
  validation_ = validation;
  if (validation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.validation)
}

// .zsearch.CTStatus ct = 30;
inline bool Certificate::has_ct() const {
  return this != internal_default_instance() && ct_ != NULL;
}
inline void Certificate::clear_ct() {
  if (GetArenaNoVirtual() == NULL && ct_ != NULL) delete ct_;
  ct_ = NULL;
}
inline const ::zsearch::CTStatus& Certificate::ct() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.ct)
  return ct_ != NULL ? *ct_
                         : *::zsearch::CTStatus::internal_default_instance();
}
inline ::zsearch::CTStatus* Certificate::mutable_ct() {
  
  if (ct_ == NULL) {
    ct_ = new ::zsearch::CTStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.ct)
  return ct_;
}
inline ::zsearch::CTStatus* Certificate::release_ct() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.ct)
  
  ::zsearch::CTStatus* temp = ct_;
  ct_ = NULL;
  return temp;
}
inline void Certificate::set_allocated_ct(::zsearch::CTStatus* ct) {
  delete ct_;
  ct_ = ct;
  if (ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.ct)
}

// .zsearch.ZLint zlint = 38;
inline bool Certificate::has_zlint() const {
  return this != internal_default_instance() && zlint_ != NULL;
}
inline void Certificate::clear_zlint() {
  if (GetArenaNoVirtual() == NULL && zlint_ != NULL) delete zlint_;
  zlint_ = NULL;
}
inline const ::zsearch::ZLint& Certificate::zlint() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.zlint)
  return zlint_ != NULL ? *zlint_
                         : *::zsearch::ZLint::internal_default_instance();
}
inline ::zsearch::ZLint* Certificate::mutable_zlint() {
  
  if (zlint_ == NULL) {
    zlint_ = new ::zsearch::ZLint;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.zlint)
  return zlint_;
}
inline ::zsearch::ZLint* Certificate::release_zlint() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.zlint)
  
  ::zsearch::ZLint* temp = zlint_;
  zlint_ = NULL;
  return temp;
}
inline void Certificate::set_allocated_zlint(::zsearch::ZLint* zlint) {
  delete zlint_;
  zlint_ = zlint;
  if (zlint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.zlint)
}

// .zsearch.CertificateRevocation revocation = 43;
inline bool Certificate::has_revocation() const {
  return this != internal_default_instance() && revocation_ != NULL;
}
inline void Certificate::clear_revocation() {
  if (GetArenaNoVirtual() == NULL && revocation_ != NULL) delete revocation_;
  revocation_ = NULL;
}
inline const ::zsearch::CertificateRevocation& Certificate::revocation() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.revocation)
  return revocation_ != NULL ? *revocation_
                         : *::zsearch::CertificateRevocation::internal_default_instance();
}
inline ::zsearch::CertificateRevocation* Certificate::mutable_revocation() {
  
  if (revocation_ == NULL) {
    revocation_ = new ::zsearch::CertificateRevocation;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.revocation)
  return revocation_;
}
inline ::zsearch::CertificateRevocation* Certificate::release_revocation() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.revocation)
  
  ::zsearch::CertificateRevocation* temp = revocation_;
  revocation_ = NULL;
  return temp;
}
inline void Certificate::set_allocated_revocation(::zsearch::CertificateRevocation* revocation) {
  delete revocation_;
  revocation_ = revocation;
  if (revocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.revocation)
}

// .zsearch.CertificateAudit audit = 46;
inline bool Certificate::has_audit() const {
  return this != internal_default_instance() && audit_ != NULL;
}
inline void Certificate::clear_audit() {
  if (GetArenaNoVirtual() == NULL && audit_ != NULL) delete audit_;
  audit_ = NULL;
}
inline const ::zsearch::CertificateAudit& Certificate::audit() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.audit)
  return audit_ != NULL ? *audit_
                         : *::zsearch::CertificateAudit::internal_default_instance();
}
inline ::zsearch::CertificateAudit* Certificate::mutable_audit() {
  
  if (audit_ == NULL) {
    audit_ = new ::zsearch::CertificateAudit;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.audit)
  return audit_;
}
inline ::zsearch::CertificateAudit* Certificate::release_audit() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.audit)
  
  ::zsearch::CertificateAudit* temp = audit_;
  audit_ = NULL;
  return temp;
}
inline void Certificate::set_allocated_audit(::zsearch::CertificateAudit* audit) {
  delete audit_;
  audit_ = audit;
  if (audit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.audit)
}

// bool is_precert = 32;
inline void Certificate::clear_is_precert() {
  is_precert_ = false;
}
inline bool Certificate::is_precert() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.is_precert)
  return is_precert_;
}
inline void Certificate::set_is_precert(bool value) {
  
  is_precert_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.is_precert)
}

// uint32 not_valid_after = 41;
inline void Certificate::clear_not_valid_after() {
  not_valid_after_ = 0u;
}
inline ::google::protobuf::uint32 Certificate::not_valid_after() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.not_valid_after)
  return not_valid_after_;
}
inline void Certificate::set_not_valid_after(::google::protobuf::uint32 value) {
  
  not_valid_after_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.not_valid_after)
}

// uint32 not_valid_before = 42;
inline void Certificate::clear_not_valid_before() {
  not_valid_before_ = 0u;
}
inline ::google::protobuf::uint32 Certificate::not_valid_before() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.not_valid_before)
  return not_valid_before_;
}
inline void Certificate::set_not_valid_before(::google::protobuf::uint32 value) {
  
  not_valid_before_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.not_valid_before)
}

// bool expired = 48;
inline void Certificate::clear_expired() {
  expired_ = false;
}
inline bool Certificate::expired() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.expired)
  return expired_;
}
inline void Certificate::set_expired(bool value) {
  
  expired_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.expired)
}

// bool in_nss = 6;
inline void Certificate::clear_in_nss() {
  in_nss_ = false;
}
inline bool Certificate::in_nss() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.in_nss)
  return in_nss_;
}
inline void Certificate::set_in_nss(bool value) {
  
  in_nss_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.in_nss)
}

// bool in_microsoft = 7 [deprecated = true];
inline void Certificate::clear_in_microsoft() {
  in_microsoft_ = false;
}
inline bool Certificate::in_microsoft() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.in_microsoft)
  return in_microsoft_;
}
inline void Certificate::set_in_microsoft(bool value) {
  
  in_microsoft_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.in_microsoft)
}

// bool in_apple = 8 [deprecated = true];
inline void Certificate::clear_in_apple() {
  in_apple_ = false;
}
inline bool Certificate::in_apple() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.in_apple)
  return in_apple_;
}
inline void Certificate::set_in_apple(bool value) {
  
  in_apple_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.in_apple)
}

// uint32 validation_timestamp = 10;
inline void Certificate::clear_validation_timestamp() {
  validation_timestamp_ = 0u;
}
inline ::google::protobuf::uint32 Certificate::validation_timestamp() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.validation_timestamp)
  return validation_timestamp_;
}
inline void Certificate::set_validation_timestamp(::google::protobuf::uint32 value) {
  
  validation_timestamp_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.validation_timestamp)
}

// bool valid_nss = 11 [deprecated = true];
inline void Certificate::clear_valid_nss() {
  valid_nss_ = false;
}
inline bool Certificate::valid_nss() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.valid_nss)
  return valid_nss_;
}
inline void Certificate::set_valid_nss(bool value) {
  
  valid_nss_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.valid_nss)
}

// bool valid_microsoft = 12 [deprecated = true];
inline void Certificate::clear_valid_microsoft() {
  valid_microsoft_ = false;
}
inline bool Certificate::valid_microsoft() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.valid_microsoft)
  return valid_microsoft_;
}
inline void Certificate::set_valid_microsoft(bool value) {
  
  valid_microsoft_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.valid_microsoft)
}

// bool valid_apple = 13 [deprecated = true];
inline void Certificate::clear_valid_apple() {
  valid_apple_ = false;
}
inline bool Certificate::valid_apple() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.valid_apple)
  return valid_apple_;
}
inline void Certificate::set_valid_apple(bool value) {
  
  valid_apple_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.valid_apple)
}

// bool was_valid_nss = 14;
inline void Certificate::clear_was_valid_nss() {
  was_valid_nss_ = false;
}
inline bool Certificate::was_valid_nss() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.was_valid_nss)
  return was_valid_nss_;
}
inline void Certificate::set_was_valid_nss(bool value) {
  
  was_valid_nss_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.was_valid_nss)
}

// bool was_valid_microsoft = 15 [deprecated = true];
inline void Certificate::clear_was_valid_microsoft() {
  was_valid_microsoft_ = false;
}
inline bool Certificate::was_valid_microsoft() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.was_valid_microsoft)
  return was_valid_microsoft_;
}
inline void Certificate::set_was_valid_microsoft(bool value) {
  
  was_valid_microsoft_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.was_valid_microsoft)
}

// bool was_valid_apple = 16 [deprecated = true];
inline void Certificate::clear_was_valid_apple() {
  was_valid_apple_ = false;
}
inline bool Certificate::was_valid_apple() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.was_valid_apple)
  return was_valid_apple_;
}
inline void Certificate::set_was_valid_apple(bool value) {
  
  was_valid_apple_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.was_valid_apple)
}

// bool was_in_nss = 17 [deprecated = true];
inline void Certificate::clear_was_in_nss() {
  was_in_nss_ = false;
}
inline bool Certificate::was_in_nss() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.was_in_nss)
  return was_in_nss_;
}
inline void Certificate::set_was_in_nss(bool value) {
  
  was_in_nss_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.was_in_nss)
}

// bool was_in_microsoft = 18 [deprecated = true];
inline void Certificate::clear_was_in_microsoft() {
  was_in_microsoft_ = false;
}
inline bool Certificate::was_in_microsoft() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.was_in_microsoft)
  return was_in_microsoft_;
}
inline void Certificate::set_was_in_microsoft(bool value) {
  
  was_in_microsoft_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.was_in_microsoft)
}

// bool was_in_apple = 19 [deprecated = true];
inline void Certificate::clear_was_in_apple() {
  was_in_apple_ = false;
}
inline bool Certificate::was_in_apple() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.was_in_apple)
  return was_in_apple_;
}
inline void Certificate::set_was_in_apple(bool value) {
  
  was_in_apple_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.was_in_apple)
}

// bool current_valid_nss = 20;
inline void Certificate::clear_current_valid_nss() {
  current_valid_nss_ = false;
}
inline bool Certificate::current_valid_nss() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.current_valid_nss)
  return current_valid_nss_;
}
inline void Certificate::set_current_valid_nss(bool value) {
  
  current_valid_nss_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.current_valid_nss)
}

// bool current_valid_microsoft = 21 [deprecated = true];
inline void Certificate::clear_current_valid_microsoft() {
  current_valid_microsoft_ = false;
}
inline bool Certificate::current_valid_microsoft() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.current_valid_microsoft)
  return current_valid_microsoft_;
}
inline void Certificate::set_current_valid_microsoft(bool value) {
  
  current_valid_microsoft_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.current_valid_microsoft)
}

// bool current_valid_apple = 22 [deprecated = true];
inline void Certificate::clear_current_valid_apple() {
  current_valid_apple_ = false;
}
inline bool Certificate::current_valid_apple() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.current_valid_apple)
  return current_valid_apple_;
}
inline void Certificate::set_current_valid_apple(bool value) {
  
  current_valid_apple_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.current_valid_apple)
}

// bool current_in_nss = 23;
inline void Certificate::clear_current_in_nss() {
  current_in_nss_ = false;
}
inline bool Certificate::current_in_nss() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.current_in_nss)
  return current_in_nss_;
}
inline void Certificate::set_current_in_nss(bool value) {
  
  current_in_nss_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.current_in_nss)
}

// bool current_in_microsoft = 24 [deprecated = true];
inline void Certificate::clear_current_in_microsoft() {
  current_in_microsoft_ = false;
}
inline bool Certificate::current_in_microsoft() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.current_in_microsoft)
  return current_in_microsoft_;
}
inline void Certificate::set_current_in_microsoft(bool value) {
  
  current_in_microsoft_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.current_in_microsoft)
}

// bool current_in_apple = 25 [deprecated = true];
inline void Certificate::clear_current_in_apple() {
  current_in_apple_ = false;
}
inline bool Certificate::current_in_apple() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.current_in_apple)
  return current_in_apple_;
}
inline void Certificate::set_current_in_apple(bool value) {
  
  current_in_apple_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.current_in_apple)
}

// .zsearch.MozillaSalesForceStatus nss_audit = 31 [deprecated = true];
inline bool Certificate::has_nss_audit() const {
  return this != internal_default_instance() && nss_audit_ != NULL;
}
inline void Certificate::clear_nss_audit() {
  if (GetArenaNoVirtual() == NULL && nss_audit_ != NULL) delete nss_audit_;
  nss_audit_ = NULL;
}
inline const ::zsearch::MozillaSalesForceStatus& Certificate::nss_audit() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.nss_audit)
  return nss_audit_ != NULL ? *nss_audit_
                         : *::zsearch::MozillaSalesForceStatus::internal_default_instance();
}
inline ::zsearch::MozillaSalesForceStatus* Certificate::mutable_nss_audit() {
  
  if (nss_audit_ == NULL) {
    nss_audit_ = new ::zsearch::MozillaSalesForceStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.nss_audit)
  return nss_audit_;
}
inline ::zsearch::MozillaSalesForceStatus* Certificate::release_nss_audit() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.nss_audit)
  
  ::zsearch::MozillaSalesForceStatus* temp = nss_audit_;
  nss_audit_ = NULL;
  return temp;
}
inline void Certificate::set_allocated_nss_audit(::zsearch::MozillaSalesForceStatus* nss_audit) {
  delete nss_audit_;
  nss_audit_ = nss_audit;
  if (nss_audit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.nss_audit)
}

// bool should_post_process = 27 [deprecated = true];
inline void Certificate::clear_should_post_process() {
  should_post_process_ = false;
}
inline bool Certificate::should_post_process() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.should_post_process)
  return should_post_process_;
}
inline void Certificate::set_should_post_process(bool value) {
  
  should_post_process_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.should_post_process)
}

// bool do_not_post_process = 36 [deprecated = true];
inline void Certificate::clear_do_not_post_process() {
  do_not_post_process_ = false;
}
inline bool Certificate::do_not_post_process() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.do_not_post_process)
  return do_not_post_process_;
}
inline void Certificate::set_do_not_post_process(bool value) {
  
  do_not_post_process_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.do_not_post_process)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace zsearch

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zsearch::CertificateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zsearch::CertificateType>() {
  return ::zsearch::CertificateType_descriptor();
}
template <> struct is_proto_enum< ::zsearch::CertificateSource> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zsearch::CertificateSource>() {
  return ::zsearch::CertificateSource_descriptor();
}
template <> struct is_proto_enum< ::zsearch::CertificateParseStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zsearch::CertificateParseStatus>() {
  return ::zsearch::CertificateParseStatus_descriptor();
}
template <> struct is_proto_enum< ::zsearch::CertificateRevocationReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zsearch::CertificateRevocationReason>() {
  return ::zsearch::CertificateRevocationReason_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_certificate_2eproto__INCLUDED
