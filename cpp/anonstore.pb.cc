// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anonstore.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "anonstore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zsearch {
class AnonymousRecordDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnonymousRecord> {
  public:
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr raw_data_;
  const ::zsearch::Certificate* certificate_;
  const ::zsearch::CryptographicKey* key_;
  const ::zsearch::ASAtom* as_;
} _AnonymousRecord_default_instance_;
class AnonymousDeltaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnonymousDelta> {
} _AnonymousDelta_default_instance_;
class ExternalCertificateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExternalCertificate> {
} _ExternalCertificate_default_instance_;

namespace protobuf_anonstore_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousRecord, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousRecord, sha256fp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousRecord, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousRecord, scan_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousRecord, exported_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousRecord, userdata_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AnonymousRecord_default_instance_), data_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AnonymousRecord_default_instance_), raw_data_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AnonymousRecord_default_instance_), certificate_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AnonymousRecord_default_instance_), key_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_AnonymousRecord_default_instance_), as_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousRecord, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousRecord, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousRecord, updated_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousRecord, added_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousRecord, oneof_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousDelta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousDelta, delta_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousDelta, delta_scope_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousDelta, record_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalCertificate, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalCertificate, anonymous_record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalCertificate, ct_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalCertificate, ct_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalCertificate, nss_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalCertificate, tbshash_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(AnonymousRecord)},
  { 19, -1, sizeof(AnonymousDelta)},
  { 26, -1, sizeof(ExternalCertificate)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnonymousRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnonymousDelta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExternalCertificate_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "anonstore.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _AnonymousRecord_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _AnonymousDelta_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ExternalCertificate_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::zsearch::protobuf_common_2eproto::InitDefaults();
  ::zsearch::protobuf_pubkey_2eproto::InitDefaults();
  ::zsearch::protobuf_ct_2eproto::InitDefaults();
  ::zsearch::protobuf_certificate_2eproto::InitDefaults();
  _AnonymousRecord_default_instance_.DefaultConstruct();
  _AnonymousDelta_default_instance_.DefaultConstruct();
  _ExternalCertificate_default_instance_.DefaultConstruct();
  _AnonymousRecord_default_instance_.get_mutable()->userdata_ = const_cast< ::zsearch::UserdataAtom*>(
      ::zsearch::UserdataAtom::internal_default_instance());
  _AnonymousRecord_default_instance_.data_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _AnonymousRecord_default_instance_.raw_data_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _AnonymousRecord_default_instance_.certificate_ = const_cast< ::zsearch::Certificate*>(
      ::zsearch::Certificate::internal_default_instance());
  _AnonymousRecord_default_instance_.key_ = const_cast< ::zsearch::CryptographicKey*>(
      ::zsearch::CryptographicKey::internal_default_instance());
  _AnonymousRecord_default_instance_.as_ = const_cast< ::zsearch::ASAtom*>(
      ::zsearch::ASAtom::internal_default_instance());
  _AnonymousDelta_default_instance_.get_mutable()->record_ = const_cast< ::zsearch::AnonymousRecord*>(
      ::zsearch::AnonymousRecord::internal_default_instance());
  _ExternalCertificate_default_instance_.get_mutable()->anonymous_record_ = const_cast< ::zsearch::AnonymousRecord*>(
      ::zsearch::AnonymousRecord::internal_default_instance());
  _ExternalCertificate_default_instance_.get_mutable()->ct_status_ = const_cast< ::zsearch::CTServerStatus*>(
      ::zsearch::CTServerStatus::internal_default_instance());
  _ExternalCertificate_default_instance_.get_mutable()->nss_status_ = const_cast< ::zsearch::MozillaSalesForceStatus*>(
      ::zsearch::MozillaSalesForceStatus::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017anonstore.proto\022\007zsearch\032\014common.proto"
      "\032\014pubkey.proto\032\010ct.proto\032\021certificate.pr"
      "oto\"\210\003\n\017AnonymousRecord\022\020\n\010sha256fp\030\001 \001("
      "\014\022\021\n\ttimestamp\030\002 \001(\020\022\017\n\007scan_id\030\003 \001(\r\022\024\n"
      "\010exported\030\004 \001(\010B\002\030\001\022\'\n\010userdata\030\005 \001(\0132\025."
      "zsearch.UserdataAtom\022\016\n\004data\030\006 \001(\tH\000\022\022\n\010"
      "raw_data\030\007 \001(\014H\000\022+\n\013certificate\030\010 \001(\0132\024."
      "zsearch.CertificateH\000\022(\n\003key\030\t \001(\0132\031.zse"
      "arch.CryptographicKeyH\000\022\035\n\002as\030\n \001(\0132\017.zs"
      "earch.ASAtomH\000\022$\n\010metadata\030\016 \003(\0132\022.zsear"
      "ch.Metadatum\022\014\n\004tags\030\017 \003(\t\022\022\n\nupdated_at"
      "\030\020 \001(\007\022\020\n\010added_at\030\021 \001(\007B\014\n\noneof_data\"\276"
      "\002\n\016AnonymousDelta\0225\n\ndelta_type\030\001 \001(\0162!."
      "zsearch.AnonymousDelta.DeltaType\0227\n\013delt"
      "a_scope\030\002 \001(\0162\".zsearch.AnonymousDelta.D"
      "eltaScope\022(\n\006record\030\003 \001(\0132\030.zsearch.Anon"
      "ymousRecord\":\n\tDeltaType\022\017\n\013DT_RESERVED\020"
      "\000\022\r\n\tDT_UPDATE\020\001\022\r\n\tDT_DELETE\020\002\"V\n\nDelta"
      "Scope\022\022\n\016SCOPE_RESERVED\020\000\022\023\n\017SCOPE_NO_CH"
      "ANGE\020\001\022\r\n\tSCOPE_NEW\020\002\022\020\n\014SCOPE_UPDATE\020\003\""
      "\216\002\n\023ExternalCertificate\022*\n\006source\030\001 \001(\0162"
      "\032.zsearch.CertificateSource\0222\n\020anonymous"
      "_record\030\002 \001(\0132\030.zsearch.AnonymousRecord\022"
      "$\n\tct_server\030\003 \001(\0162\021.zsearch.CTServer\022*\n"
      "\tct_status\030\004 \001(\0132\027.zsearch.CTServerStatu"
      "s\0224\n\nnss_status\030\005 \001(\0132 .zsearch.MozillaS"
      "alesForceStatus\022\017\n\007tbsHash\030\006 \001(\014b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1080);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "anonstore.proto", &protobuf_RegisterTypes);
  ::zsearch::protobuf_common_2eproto::AddDescriptors();
  ::zsearch::protobuf_pubkey_2eproto::AddDescriptors();
  ::zsearch::protobuf_ct_2eproto::AddDescriptors();
  ::zsearch::protobuf_certificate_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_anonstore_2eproto

const ::google::protobuf::EnumDescriptor* AnonymousDelta_DeltaType_descriptor() {
  protobuf_anonstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_anonstore_2eproto::file_level_enum_descriptors[0];
}
bool AnonymousDelta_DeltaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AnonymousDelta_DeltaType AnonymousDelta::DT_RESERVED;
const AnonymousDelta_DeltaType AnonymousDelta::DT_UPDATE;
const AnonymousDelta_DeltaType AnonymousDelta::DT_DELETE;
const AnonymousDelta_DeltaType AnonymousDelta::DeltaType_MIN;
const AnonymousDelta_DeltaType AnonymousDelta::DeltaType_MAX;
const int AnonymousDelta::DeltaType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AnonymousDelta_DeltaScope_descriptor() {
  protobuf_anonstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_anonstore_2eproto::file_level_enum_descriptors[1];
}
bool AnonymousDelta_DeltaScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AnonymousDelta_DeltaScope AnonymousDelta::SCOPE_RESERVED;
const AnonymousDelta_DeltaScope AnonymousDelta::SCOPE_NO_CHANGE;
const AnonymousDelta_DeltaScope AnonymousDelta::SCOPE_NEW;
const AnonymousDelta_DeltaScope AnonymousDelta::SCOPE_UPDATE;
const AnonymousDelta_DeltaScope AnonymousDelta::DeltaScope_MIN;
const AnonymousDelta_DeltaScope AnonymousDelta::DeltaScope_MAX;
const int AnonymousDelta::DeltaScope_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnonymousRecord::kSha256FpFieldNumber;
const int AnonymousRecord::kTimestampFieldNumber;
const int AnonymousRecord::kScanIdFieldNumber;
const int AnonymousRecord::kExportedFieldNumber;
const int AnonymousRecord::kUserdataFieldNumber;
const int AnonymousRecord::kDataFieldNumber;
const int AnonymousRecord::kRawDataFieldNumber;
const int AnonymousRecord::kCertificateFieldNumber;
const int AnonymousRecord::kKeyFieldNumber;
const int AnonymousRecord::kAsFieldNumber;
const int AnonymousRecord::kMetadataFieldNumber;
const int AnonymousRecord::kTagsFieldNumber;
const int AnonymousRecord::kUpdatedAtFieldNumber;
const int AnonymousRecord::kAddedAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnonymousRecord::AnonymousRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_anonstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.AnonymousRecord)
}
AnonymousRecord::AnonymousRecord(const AnonymousRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      metadata_(from.metadata_),
      tags_(from.tags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha256fp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sha256fp().size() > 0) {
    sha256fp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256fp_);
  }
  if (from.has_userdata()) {
    userdata_ = new ::zsearch::UserdataAtom(*from.userdata_);
  } else {
    userdata_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&added_at_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(added_at_));
  clear_has_oneof_data();
  switch (from.oneof_data_case()) {
    case kData: {
      set_data(from.data());
      break;
    }
    case kRawData: {
      set_raw_data(from.raw_data());
      break;
    }
    case kCertificate: {
      mutable_certificate()->::zsearch::Certificate::MergeFrom(from.certificate());
      break;
    }
    case kKey: {
      mutable_key()->::zsearch::CryptographicKey::MergeFrom(from.key());
      break;
    }
    case kAs: {
      mutable_as()->::zsearch::ASAtom::MergeFrom(from.as());
      break;
    }
    case ONEOF_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:zsearch.AnonymousRecord)
}

void AnonymousRecord::SharedCtor() {
  sha256fp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&userdata_, 0, reinterpret_cast<char*>(&added_at_) -
    reinterpret_cast<char*>(&userdata_) + sizeof(added_at_));
  clear_has_oneof_data();
  _cached_size_ = 0;
}

AnonymousRecord::~AnonymousRecord() {
  // @@protoc_insertion_point(destructor:zsearch.AnonymousRecord)
  SharedDtor();
}

void AnonymousRecord::SharedDtor() {
  sha256fp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete userdata_;
  }
  if (has_oneof_data()) {
    clear_oneof_data();
  }
}

void AnonymousRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnonymousRecord::descriptor() {
  protobuf_anonstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_anonstore_2eproto::file_level_metadata[0].descriptor;
}

const AnonymousRecord& AnonymousRecord::default_instance() {
  protobuf_anonstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnonymousRecord* AnonymousRecord::New(::google::protobuf::Arena* arena) const {
  AnonymousRecord* n = new AnonymousRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnonymousRecord::clear_oneof_data() {
// @@protoc_insertion_point(one_of_clear_start:zsearch.AnonymousRecord)
  switch (oneof_data_case()) {
    case kData: {
      oneof_data_.data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRawData: {
      oneof_data_.raw_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kCertificate: {
      delete oneof_data_.certificate_;
      break;
    }
    case kKey: {
      delete oneof_data_.key_;
      break;
    }
    case kAs: {
      delete oneof_data_.as_;
      break;
    }
    case ONEOF_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_DATA_NOT_SET;
}


void AnonymousRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.AnonymousRecord)
  metadata_.Clear();
  tags_.Clear();
  sha256fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && userdata_ != NULL) {
    delete userdata_;
  }
  userdata_ = NULL;
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&added_at_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(added_at_));
  clear_oneof_data();
}

bool AnonymousRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.AnonymousRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes sha256fp = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha256fp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 timestamp = 2;
      case 2: {
        if (tag == 17u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scan_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scan_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool exported = 4 [deprecated = true];
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exported_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.UserdataAtom userdata = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.AnonymousRecord.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes raw_data = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.Certificate certificate = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_certificate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CryptographicKey key = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.ASAtom as = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_as()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zsearch.Metadatum metadata = 14;
      case 14: {
        if (tag == 114u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated string tags = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.AnonymousRecord.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 updated_at = 16;
      case 16: {
        if (tag == 133u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &updated_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 added_at = 17;
      case 17: {
        if (tag == 141u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &added_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.AnonymousRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.AnonymousRecord)
  return false;
#undef DO_
}

void AnonymousRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.AnonymousRecord)
  // bytes sha256fp = 1;
  if (this->sha256fp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sha256fp(), output);
  }

  // sfixed64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->timestamp(), output);
  }

  // uint32 scan_id = 3;
  if (this->scan_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scan_id(), output);
  }

  // bool exported = 4 [deprecated = true];
  if (this->exported() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->exported(), output);
  }

  // .zsearch.UserdataAtom userdata = 5;
  if (this->has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->userdata_, output);
  }

  // string data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.AnonymousRecord.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->data(), output);
  }

  // bytes raw_data = 7;
  if (has_raw_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->raw_data(), output);
  }

  // .zsearch.Certificate certificate = 8;
  if (has_certificate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *oneof_data_.certificate_, output);
  }

  // .zsearch.CryptographicKey key = 9;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *oneof_data_.key_, output);
  }

  // .zsearch.ASAtom as = 10;
  if (has_as()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *oneof_data_.as_, output);
  }

  // repeated .zsearch.Metadatum metadata = 14;
  for (unsigned int i = 0, n = this->metadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->metadata(i), output);
  }

  // repeated string tags = 15;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.AnonymousRecord.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->tags(i), output);
  }

  // fixed32 updated_at = 16;
  if (this->updated_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(16, this->updated_at(), output);
  }

  // fixed32 added_at = 17;
  if (this->added_at() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(17, this->added_at(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.AnonymousRecord)
}

::google::protobuf::uint8* AnonymousRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.AnonymousRecord)
  // bytes sha256fp = 1;
  if (this->sha256fp().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sha256fp(), target);
  }

  // sfixed64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->timestamp(), target);
  }

  // uint32 scan_id = 3;
  if (this->scan_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scan_id(), target);
  }

  // bool exported = 4 [deprecated = true];
  if (this->exported() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->exported(), target);
  }

  // .zsearch.UserdataAtom userdata = 5;
  if (this->has_userdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->userdata_, false, target);
  }

  // string data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.AnonymousRecord.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->data(), target);
  }

  // bytes raw_data = 7;
  if (has_raw_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->raw_data(), target);
  }

  // .zsearch.Certificate certificate = 8;
  if (has_certificate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *oneof_data_.certificate_, false, target);
  }

  // .zsearch.CryptographicKey key = 9;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *oneof_data_.key_, false, target);
  }

  // .zsearch.ASAtom as = 10;
  if (has_as()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *oneof_data_.as_, false, target);
  }

  // repeated .zsearch.Metadatum metadata = 14;
  for (unsigned int i = 0, n = this->metadata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->metadata(i), false, target);
  }

  // repeated string tags = 15;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.AnonymousRecord.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->tags(i), target);
  }

  // fixed32 updated_at = 16;
  if (this->updated_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(16, this->updated_at(), target);
  }

  // fixed32 added_at = 17;
  if (this->added_at() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(17, this->added_at(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.AnonymousRecord)
  return target;
}

size_t AnonymousRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.AnonymousRecord)
  size_t total_size = 0;

  // repeated .zsearch.Metadatum metadata = 14;
  {
    unsigned int count = this->metadata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata(i));
    }
  }

  // repeated string tags = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // bytes sha256fp = 1;
  if (this->sha256fp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sha256fp());
  }

  // .zsearch.UserdataAtom userdata = 5;
  if (this->has_userdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->userdata_);
  }

  // sfixed64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  // uint32 scan_id = 3;
  if (this->scan_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scan_id());
  }

  // bool exported = 4 [deprecated = true];
  if (this->exported() != 0) {
    total_size += 1 + 1;
  }

  // fixed32 updated_at = 16;
  if (this->updated_at() != 0) {
    total_size += 2 + 4;
  }

  // fixed32 added_at = 17;
  if (this->added_at() != 0) {
    total_size += 2 + 4;
  }

  switch (oneof_data_case()) {
    // string data = 6;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
      break;
    }
    // bytes raw_data = 7;
    case kRawData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw_data());
      break;
    }
    // .zsearch.Certificate certificate = 8;
    case kCertificate: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *oneof_data_.certificate_);
      break;
    }
    // .zsearch.CryptographicKey key = 9;
    case kKey: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *oneof_data_.key_);
      break;
    }
    // .zsearch.ASAtom as = 10;
    case kAs: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *oneof_data_.as_);
      break;
    }
    case ONEOF_DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnonymousRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.AnonymousRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const AnonymousRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnonymousRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.AnonymousRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.AnonymousRecord)
    MergeFrom(*source);
  }
}

void AnonymousRecord::MergeFrom(const AnonymousRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.AnonymousRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  tags_.MergeFrom(from.tags_);
  if (from.sha256fp().size() > 0) {

    sha256fp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256fp_);
  }
  if (from.has_userdata()) {
    mutable_userdata()->::zsearch::UserdataAtom::MergeFrom(from.userdata());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.scan_id() != 0) {
    set_scan_id(from.scan_id());
  }
  if (from.exported() != 0) {
    set_exported(from.exported());
  }
  if (from.updated_at() != 0) {
    set_updated_at(from.updated_at());
  }
  if (from.added_at() != 0) {
    set_added_at(from.added_at());
  }
  switch (from.oneof_data_case()) {
    case kData: {
      set_data(from.data());
      break;
    }
    case kRawData: {
      set_raw_data(from.raw_data());
      break;
    }
    case kCertificate: {
      mutable_certificate()->::zsearch::Certificate::MergeFrom(from.certificate());
      break;
    }
    case kKey: {
      mutable_key()->::zsearch::CryptographicKey::MergeFrom(from.key());
      break;
    }
    case kAs: {
      mutable_as()->::zsearch::ASAtom::MergeFrom(from.as());
      break;
    }
    case ONEOF_DATA_NOT_SET: {
      break;
    }
  }
}

void AnonymousRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.AnonymousRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnonymousRecord::CopyFrom(const AnonymousRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.AnonymousRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnonymousRecord::IsInitialized() const {
  return true;
}

void AnonymousRecord::Swap(AnonymousRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnonymousRecord::InternalSwap(AnonymousRecord* other) {
  metadata_.UnsafeArenaSwap(&other->metadata_);
  tags_.UnsafeArenaSwap(&other->tags_);
  sha256fp_.Swap(&other->sha256fp_);
  std::swap(userdata_, other->userdata_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(scan_id_, other->scan_id_);
  std::swap(exported_, other->exported_);
  std::swap(updated_at_, other->updated_at_);
  std::swap(added_at_, other->added_at_);
  std::swap(oneof_data_, other->oneof_data_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnonymousRecord::GetMetadata() const {
  protobuf_anonstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_anonstore_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnonymousRecord

// bytes sha256fp = 1;
void AnonymousRecord::clear_sha256fp() {
  sha256fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnonymousRecord::sha256fp() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousRecord.sha256fp)
  return sha256fp_.GetNoArena();
}
void AnonymousRecord::set_sha256fp(const ::std::string& value) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.AnonymousRecord.sha256fp)
}
#if LANG_CXX11
void AnonymousRecord::set_sha256fp(::std::string&& value) {
  
  sha256fp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.AnonymousRecord.sha256fp)
}
#endif
void AnonymousRecord::set_sha256fp(const char* value) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.AnonymousRecord.sha256fp)
}
void AnonymousRecord::set_sha256fp(const void* value, size_t size) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.AnonymousRecord.sha256fp)
}
::std::string* AnonymousRecord::mutable_sha256fp() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.AnonymousRecord.sha256fp)
  return sha256fp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnonymousRecord::release_sha256fp() {
  // @@protoc_insertion_point(field_release:zsearch.AnonymousRecord.sha256fp)
  
  return sha256fp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnonymousRecord::set_allocated_sha256fp(::std::string* sha256fp) {
  if (sha256fp != NULL) {
    
  } else {
    
  }
  sha256fp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha256fp);
  // @@protoc_insertion_point(field_set_allocated:zsearch.AnonymousRecord.sha256fp)
}

// sfixed64 timestamp = 2;
void AnonymousRecord::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 AnonymousRecord::timestamp() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousRecord.timestamp)
  return timestamp_;
}
void AnonymousRecord::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:zsearch.AnonymousRecord.timestamp)
}

// uint32 scan_id = 3;
void AnonymousRecord::clear_scan_id() {
  scan_id_ = 0u;
}
::google::protobuf::uint32 AnonymousRecord::scan_id() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousRecord.scan_id)
  return scan_id_;
}
void AnonymousRecord::set_scan_id(::google::protobuf::uint32 value) {
  
  scan_id_ = value;
  // @@protoc_insertion_point(field_set:zsearch.AnonymousRecord.scan_id)
}

// bool exported = 4 [deprecated = true];
void AnonymousRecord::clear_exported() {
  exported_ = false;
}
bool AnonymousRecord::exported() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousRecord.exported)
  return exported_;
}
void AnonymousRecord::set_exported(bool value) {
  
  exported_ = value;
  // @@protoc_insertion_point(field_set:zsearch.AnonymousRecord.exported)
}

// .zsearch.UserdataAtom userdata = 5;
bool AnonymousRecord::has_userdata() const {
  return this != internal_default_instance() && userdata_ != NULL;
}
void AnonymousRecord::clear_userdata() {
  if (GetArenaNoVirtual() == NULL && userdata_ != NULL) delete userdata_;
  userdata_ = NULL;
}
const ::zsearch::UserdataAtom& AnonymousRecord::userdata() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousRecord.userdata)
  return userdata_ != NULL ? *userdata_
                         : *::zsearch::UserdataAtom::internal_default_instance();
}
::zsearch::UserdataAtom* AnonymousRecord::mutable_userdata() {
  
  if (userdata_ == NULL) {
    userdata_ = new ::zsearch::UserdataAtom;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.AnonymousRecord.userdata)
  return userdata_;
}
::zsearch::UserdataAtom* AnonymousRecord::release_userdata() {
  // @@protoc_insertion_point(field_release:zsearch.AnonymousRecord.userdata)
  
  ::zsearch::UserdataAtom* temp = userdata_;
  userdata_ = NULL;
  return temp;
}
void AnonymousRecord::set_allocated_userdata(::zsearch::UserdataAtom* userdata) {
  delete userdata_;
  userdata_ = userdata;
  if (userdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.AnonymousRecord.userdata)
}

// string data = 6;
bool AnonymousRecord::has_data() const {
  return oneof_data_case() == kData;
}
void AnonymousRecord::set_has_data() {
  _oneof_case_[0] = kData;
}
void AnonymousRecord::clear_data() {
  if (has_data()) {
    oneof_data_.data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_oneof_data();
  }
}
const ::std::string& AnonymousRecord::data() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousRecord.data)
  if (has_data()) {
    return oneof_data_.data_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AnonymousRecord::set_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zsearch.AnonymousRecord.data)
  if (!has_data()) {
    clear_oneof_data();
    set_has_data();
    oneof_data_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_data_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.AnonymousRecord.data)
}
#if LANG_CXX11
void AnonymousRecord::set_data(::std::string&& value) {
  // @@protoc_insertion_point(field_set:zsearch.AnonymousRecord.data)
  if (!has_data()) {
    clear_oneof_data();
    set_has_data();
    oneof_data_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_data_.data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.AnonymousRecord.data)
}
#endif
void AnonymousRecord::set_data(const char* value) {
  if (!has_data()) {
    clear_oneof_data();
    set_has_data();
    oneof_data_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_data_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.AnonymousRecord.data)
}
void AnonymousRecord::set_data(const char* value, size_t size) {
  if (!has_data()) {
    clear_oneof_data();
    set_has_data();
    oneof_data_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_data_.data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.AnonymousRecord.data)
}
::std::string* AnonymousRecord::mutable_data() {
  if (!has_data()) {
    clear_oneof_data();
    set_has_data();
    oneof_data_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:zsearch.AnonymousRecord.data)
  return oneof_data_.data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnonymousRecord::release_data() {
  // @@protoc_insertion_point(field_release:zsearch.AnonymousRecord.data)
  if (has_data()) {
    clear_has_oneof_data();
    return oneof_data_.data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AnonymousRecord::set_allocated_data(::std::string* data) {
  if (!has_data()) {
    oneof_data_.data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_oneof_data();
  if (data != NULL) {
    set_has_data();
    oneof_data_.data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        data);
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.AnonymousRecord.data)
}

// bytes raw_data = 7;
bool AnonymousRecord::has_raw_data() const {
  return oneof_data_case() == kRawData;
}
void AnonymousRecord::set_has_raw_data() {
  _oneof_case_[0] = kRawData;
}
void AnonymousRecord::clear_raw_data() {
  if (has_raw_data()) {
    oneof_data_.raw_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_oneof_data();
  }
}
const ::std::string& AnonymousRecord::raw_data() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousRecord.raw_data)
  if (has_raw_data()) {
    return oneof_data_.raw_data_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void AnonymousRecord::set_raw_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zsearch.AnonymousRecord.raw_data)
  if (!has_raw_data()) {
    clear_oneof_data();
    set_has_raw_data();
    oneof_data_.raw_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_data_.raw_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.AnonymousRecord.raw_data)
}
#if LANG_CXX11
void AnonymousRecord::set_raw_data(::std::string&& value) {
  // @@protoc_insertion_point(field_set:zsearch.AnonymousRecord.raw_data)
  if (!has_raw_data()) {
    clear_oneof_data();
    set_has_raw_data();
    oneof_data_.raw_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_data_.raw_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.AnonymousRecord.raw_data)
}
#endif
void AnonymousRecord::set_raw_data(const char* value) {
  if (!has_raw_data()) {
    clear_oneof_data();
    set_has_raw_data();
    oneof_data_.raw_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_data_.raw_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.AnonymousRecord.raw_data)
}
void AnonymousRecord::set_raw_data(const void* value, size_t size) {
  if (!has_raw_data()) {
    clear_oneof_data();
    set_has_raw_data();
    oneof_data_.raw_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  oneof_data_.raw_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.AnonymousRecord.raw_data)
}
::std::string* AnonymousRecord::mutable_raw_data() {
  if (!has_raw_data()) {
    clear_oneof_data();
    set_has_raw_data();
    oneof_data_.raw_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:zsearch.AnonymousRecord.raw_data)
  return oneof_data_.raw_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnonymousRecord::release_raw_data() {
  // @@protoc_insertion_point(field_release:zsearch.AnonymousRecord.raw_data)
  if (has_raw_data()) {
    clear_has_oneof_data();
    return oneof_data_.raw_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void AnonymousRecord::set_allocated_raw_data(::std::string* raw_data) {
  if (!has_raw_data()) {
    oneof_data_.raw_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_oneof_data();
  if (raw_data != NULL) {
    set_has_raw_data();
    oneof_data_.raw_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        raw_data);
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.AnonymousRecord.raw_data)
}

// .zsearch.Certificate certificate = 8;
bool AnonymousRecord::has_certificate() const {
  return oneof_data_case() == kCertificate;
}
void AnonymousRecord::set_has_certificate() {
  _oneof_case_[0] = kCertificate;
}
void AnonymousRecord::clear_certificate() {
  if (has_certificate()) {
    delete oneof_data_.certificate_;
    clear_has_oneof_data();
  }
}
 const ::zsearch::Certificate& AnonymousRecord::certificate() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousRecord.certificate)
  return has_certificate()
      ? *oneof_data_.certificate_
      : ::zsearch::Certificate::default_instance();
}
::zsearch::Certificate* AnonymousRecord::mutable_certificate() {
  if (!has_certificate()) {
    clear_oneof_data();
    set_has_certificate();
    oneof_data_.certificate_ = new ::zsearch::Certificate;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.AnonymousRecord.certificate)
  return oneof_data_.certificate_;
}
::zsearch::Certificate* AnonymousRecord::release_certificate() {
  // @@protoc_insertion_point(field_release:zsearch.AnonymousRecord.certificate)
  if (has_certificate()) {
    clear_has_oneof_data();
    ::zsearch::Certificate* temp = oneof_data_.certificate_;
    oneof_data_.certificate_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AnonymousRecord::set_allocated_certificate(::zsearch::Certificate* certificate) {
  clear_oneof_data();
  if (certificate) {
    set_has_certificate();
    oneof_data_.certificate_ = certificate;
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.AnonymousRecord.certificate)
}

// .zsearch.CryptographicKey key = 9;
bool AnonymousRecord::has_key() const {
  return oneof_data_case() == kKey;
}
void AnonymousRecord::set_has_key() {
  _oneof_case_[0] = kKey;
}
void AnonymousRecord::clear_key() {
  if (has_key()) {
    delete oneof_data_.key_;
    clear_has_oneof_data();
  }
}
 const ::zsearch::CryptographicKey& AnonymousRecord::key() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousRecord.key)
  return has_key()
      ? *oneof_data_.key_
      : ::zsearch::CryptographicKey::default_instance();
}
::zsearch::CryptographicKey* AnonymousRecord::mutable_key() {
  if (!has_key()) {
    clear_oneof_data();
    set_has_key();
    oneof_data_.key_ = new ::zsearch::CryptographicKey;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.AnonymousRecord.key)
  return oneof_data_.key_;
}
::zsearch::CryptographicKey* AnonymousRecord::release_key() {
  // @@protoc_insertion_point(field_release:zsearch.AnonymousRecord.key)
  if (has_key()) {
    clear_has_oneof_data();
    ::zsearch::CryptographicKey* temp = oneof_data_.key_;
    oneof_data_.key_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AnonymousRecord::set_allocated_key(::zsearch::CryptographicKey* key) {
  clear_oneof_data();
  if (key) {
    set_has_key();
    oneof_data_.key_ = key;
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.AnonymousRecord.key)
}

// .zsearch.ASAtom as = 10;
bool AnonymousRecord::has_as() const {
  return oneof_data_case() == kAs;
}
void AnonymousRecord::set_has_as() {
  _oneof_case_[0] = kAs;
}
void AnonymousRecord::clear_as() {
  if (has_as()) {
    delete oneof_data_.as_;
    clear_has_oneof_data();
  }
}
 const ::zsearch::ASAtom& AnonymousRecord::as() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousRecord.as)
  return has_as()
      ? *oneof_data_.as_
      : ::zsearch::ASAtom::default_instance();
}
::zsearch::ASAtom* AnonymousRecord::mutable_as() {
  if (!has_as()) {
    clear_oneof_data();
    set_has_as();
    oneof_data_.as_ = new ::zsearch::ASAtom;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.AnonymousRecord.as)
  return oneof_data_.as_;
}
::zsearch::ASAtom* AnonymousRecord::release_as() {
  // @@protoc_insertion_point(field_release:zsearch.AnonymousRecord.as)
  if (has_as()) {
    clear_has_oneof_data();
    ::zsearch::ASAtom* temp = oneof_data_.as_;
    oneof_data_.as_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void AnonymousRecord::set_allocated_as(::zsearch::ASAtom* as) {
  clear_oneof_data();
  if (as) {
    set_has_as();
    oneof_data_.as_ = as;
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.AnonymousRecord.as)
}

// repeated .zsearch.Metadatum metadata = 14;
int AnonymousRecord::metadata_size() const {
  return metadata_.size();
}
void AnonymousRecord::clear_metadata() {
  metadata_.Clear();
}
const ::zsearch::Metadatum& AnonymousRecord::metadata(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousRecord.metadata)
  return metadata_.Get(index);
}
::zsearch::Metadatum* AnonymousRecord::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.AnonymousRecord.metadata)
  return metadata_.Mutable(index);
}
::zsearch::Metadatum* AnonymousRecord::add_metadata() {
  // @@protoc_insertion_point(field_add:zsearch.AnonymousRecord.metadata)
  return metadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::zsearch::Metadatum >*
AnonymousRecord::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.AnonymousRecord.metadata)
  return &metadata_;
}
const ::google::protobuf::RepeatedPtrField< ::zsearch::Metadatum >&
AnonymousRecord::metadata() const {
  // @@protoc_insertion_point(field_list:zsearch.AnonymousRecord.metadata)
  return metadata_;
}

// repeated string tags = 15;
int AnonymousRecord::tags_size() const {
  return tags_.size();
}
void AnonymousRecord::clear_tags() {
  tags_.Clear();
}
const ::std::string& AnonymousRecord::tags(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousRecord.tags)
  return tags_.Get(index);
}
::std::string* AnonymousRecord::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.AnonymousRecord.tags)
  return tags_.Mutable(index);
}
void AnonymousRecord::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zsearch.AnonymousRecord.tags)
  tags_.Mutable(index)->assign(value);
}
void AnonymousRecord::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zsearch.AnonymousRecord.tags)
}
void AnonymousRecord::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zsearch.AnonymousRecord.tags)
}
::std::string* AnonymousRecord::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:zsearch.AnonymousRecord.tags)
  return tags_.Add();
}
void AnonymousRecord::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zsearch.AnonymousRecord.tags)
}
void AnonymousRecord::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zsearch.AnonymousRecord.tags)
}
void AnonymousRecord::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zsearch.AnonymousRecord.tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
AnonymousRecord::tags() const {
  // @@protoc_insertion_point(field_list:zsearch.AnonymousRecord.tags)
  return tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
AnonymousRecord::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.AnonymousRecord.tags)
  return &tags_;
}

// fixed32 updated_at = 16;
void AnonymousRecord::clear_updated_at() {
  updated_at_ = 0u;
}
::google::protobuf::uint32 AnonymousRecord::updated_at() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousRecord.updated_at)
  return updated_at_;
}
void AnonymousRecord::set_updated_at(::google::protobuf::uint32 value) {
  
  updated_at_ = value;
  // @@protoc_insertion_point(field_set:zsearch.AnonymousRecord.updated_at)
}

// fixed32 added_at = 17;
void AnonymousRecord::clear_added_at() {
  added_at_ = 0u;
}
::google::protobuf::uint32 AnonymousRecord::added_at() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousRecord.added_at)
  return added_at_;
}
void AnonymousRecord::set_added_at(::google::protobuf::uint32 value) {
  
  added_at_ = value;
  // @@protoc_insertion_point(field_set:zsearch.AnonymousRecord.added_at)
}

bool AnonymousRecord::has_oneof_data() const {
  return oneof_data_case() != ONEOF_DATA_NOT_SET;
}
void AnonymousRecord::clear_has_oneof_data() {
  _oneof_case_[0] = ONEOF_DATA_NOT_SET;
}
AnonymousRecord::OneofDataCase AnonymousRecord::oneof_data_case() const {
  return AnonymousRecord::OneofDataCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnonymousDelta::kDeltaTypeFieldNumber;
const int AnonymousDelta::kDeltaScopeFieldNumber;
const int AnonymousDelta::kRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnonymousDelta::AnonymousDelta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_anonstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.AnonymousDelta)
}
AnonymousDelta::AnonymousDelta(const AnonymousDelta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_record()) {
    record_ = new ::zsearch::AnonymousRecord(*from.record_);
  } else {
    record_ = NULL;
  }
  ::memcpy(&delta_type_, &from.delta_type_,
    reinterpret_cast<char*>(&delta_scope_) -
    reinterpret_cast<char*>(&delta_type_) + sizeof(delta_scope_));
  // @@protoc_insertion_point(copy_constructor:zsearch.AnonymousDelta)
}

void AnonymousDelta::SharedCtor() {
  ::memset(&record_, 0, reinterpret_cast<char*>(&delta_scope_) -
    reinterpret_cast<char*>(&record_) + sizeof(delta_scope_));
  _cached_size_ = 0;
}

AnonymousDelta::~AnonymousDelta() {
  // @@protoc_insertion_point(destructor:zsearch.AnonymousDelta)
  SharedDtor();
}

void AnonymousDelta::SharedDtor() {
  if (this != internal_default_instance()) {
    delete record_;
  }
}

void AnonymousDelta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnonymousDelta::descriptor() {
  protobuf_anonstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_anonstore_2eproto::file_level_metadata[1].descriptor;
}

const AnonymousDelta& AnonymousDelta::default_instance() {
  protobuf_anonstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnonymousDelta* AnonymousDelta::New(::google::protobuf::Arena* arena) const {
  AnonymousDelta* n = new AnonymousDelta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnonymousDelta::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.AnonymousDelta)
  if (GetArenaNoVirtual() == NULL && record_ != NULL) {
    delete record_;
  }
  record_ = NULL;
  ::memset(&delta_type_, 0, reinterpret_cast<char*>(&delta_scope_) -
    reinterpret_cast<char*>(&delta_type_) + sizeof(delta_scope_));
}

bool AnonymousDelta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.AnonymousDelta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .zsearch.AnonymousDelta.DeltaType delta_type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_delta_type(static_cast< ::zsearch::AnonymousDelta_DeltaType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.AnonymousDelta.DeltaScope delta_scope = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_delta_scope(static_cast< ::zsearch::AnonymousDelta_DeltaScope >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.AnonymousRecord record = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.AnonymousDelta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.AnonymousDelta)
  return false;
#undef DO_
}

void AnonymousDelta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.AnonymousDelta)
  // .zsearch.AnonymousDelta.DeltaType delta_type = 1;
  if (this->delta_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->delta_type(), output);
  }

  // .zsearch.AnonymousDelta.DeltaScope delta_scope = 2;
  if (this->delta_scope() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->delta_scope(), output);
  }

  // .zsearch.AnonymousRecord record = 3;
  if (this->has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->record_, output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.AnonymousDelta)
}

::google::protobuf::uint8* AnonymousDelta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.AnonymousDelta)
  // .zsearch.AnonymousDelta.DeltaType delta_type = 1;
  if (this->delta_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->delta_type(), target);
  }

  // .zsearch.AnonymousDelta.DeltaScope delta_scope = 2;
  if (this->delta_scope() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->delta_scope(), target);
  }

  // .zsearch.AnonymousRecord record = 3;
  if (this->has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->record_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.AnonymousDelta)
  return target;
}

size_t AnonymousDelta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.AnonymousDelta)
  size_t total_size = 0;

  // .zsearch.AnonymousRecord record = 3;
  if (this->has_record()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->record_);
  }

  // .zsearch.AnonymousDelta.DeltaType delta_type = 1;
  if (this->delta_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->delta_type());
  }

  // .zsearch.AnonymousDelta.DeltaScope delta_scope = 2;
  if (this->delta_scope() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->delta_scope());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnonymousDelta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.AnonymousDelta)
  GOOGLE_DCHECK_NE(&from, this);
  const AnonymousDelta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnonymousDelta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.AnonymousDelta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.AnonymousDelta)
    MergeFrom(*source);
  }
}

void AnonymousDelta::MergeFrom(const AnonymousDelta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.AnonymousDelta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_record()) {
    mutable_record()->::zsearch::AnonymousRecord::MergeFrom(from.record());
  }
  if (from.delta_type() != 0) {
    set_delta_type(from.delta_type());
  }
  if (from.delta_scope() != 0) {
    set_delta_scope(from.delta_scope());
  }
}

void AnonymousDelta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.AnonymousDelta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnonymousDelta::CopyFrom(const AnonymousDelta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.AnonymousDelta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnonymousDelta::IsInitialized() const {
  return true;
}

void AnonymousDelta::Swap(AnonymousDelta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnonymousDelta::InternalSwap(AnonymousDelta* other) {
  std::swap(record_, other->record_);
  std::swap(delta_type_, other->delta_type_);
  std::swap(delta_scope_, other->delta_scope_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnonymousDelta::GetMetadata() const {
  protobuf_anonstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_anonstore_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnonymousDelta

// .zsearch.AnonymousDelta.DeltaType delta_type = 1;
void AnonymousDelta::clear_delta_type() {
  delta_type_ = 0;
}
::zsearch::AnonymousDelta_DeltaType AnonymousDelta::delta_type() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousDelta.delta_type)
  return static_cast< ::zsearch::AnonymousDelta_DeltaType >(delta_type_);
}
void AnonymousDelta::set_delta_type(::zsearch::AnonymousDelta_DeltaType value) {
  
  delta_type_ = value;
  // @@protoc_insertion_point(field_set:zsearch.AnonymousDelta.delta_type)
}

// .zsearch.AnonymousDelta.DeltaScope delta_scope = 2;
void AnonymousDelta::clear_delta_scope() {
  delta_scope_ = 0;
}
::zsearch::AnonymousDelta_DeltaScope AnonymousDelta::delta_scope() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousDelta.delta_scope)
  return static_cast< ::zsearch::AnonymousDelta_DeltaScope >(delta_scope_);
}
void AnonymousDelta::set_delta_scope(::zsearch::AnonymousDelta_DeltaScope value) {
  
  delta_scope_ = value;
  // @@protoc_insertion_point(field_set:zsearch.AnonymousDelta.delta_scope)
}

// .zsearch.AnonymousRecord record = 3;
bool AnonymousDelta::has_record() const {
  return this != internal_default_instance() && record_ != NULL;
}
void AnonymousDelta::clear_record() {
  if (GetArenaNoVirtual() == NULL && record_ != NULL) delete record_;
  record_ = NULL;
}
const ::zsearch::AnonymousRecord& AnonymousDelta::record() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousDelta.record)
  return record_ != NULL ? *record_
                         : *::zsearch::AnonymousRecord::internal_default_instance();
}
::zsearch::AnonymousRecord* AnonymousDelta::mutable_record() {
  
  if (record_ == NULL) {
    record_ = new ::zsearch::AnonymousRecord;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.AnonymousDelta.record)
  return record_;
}
::zsearch::AnonymousRecord* AnonymousDelta::release_record() {
  // @@protoc_insertion_point(field_release:zsearch.AnonymousDelta.record)
  
  ::zsearch::AnonymousRecord* temp = record_;
  record_ = NULL;
  return temp;
}
void AnonymousDelta::set_allocated_record(::zsearch::AnonymousRecord* record) {
  delete record_;
  record_ = record;
  if (record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.AnonymousDelta.record)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExternalCertificate::kSourceFieldNumber;
const int ExternalCertificate::kAnonymousRecordFieldNumber;
const int ExternalCertificate::kCtServerFieldNumber;
const int ExternalCertificate::kCtStatusFieldNumber;
const int ExternalCertificate::kNssStatusFieldNumber;
const int ExternalCertificate::kTbsHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExternalCertificate::ExternalCertificate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_anonstore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.ExternalCertificate)
}
ExternalCertificate::ExternalCertificate(const ExternalCertificate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tbshash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tbshash().size() > 0) {
    tbshash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tbshash_);
  }
  if (from.has_anonymous_record()) {
    anonymous_record_ = new ::zsearch::AnonymousRecord(*from.anonymous_record_);
  } else {
    anonymous_record_ = NULL;
  }
  if (from.has_ct_status()) {
    ct_status_ = new ::zsearch::CTServerStatus(*from.ct_status_);
  } else {
    ct_status_ = NULL;
  }
  if (from.has_nss_status()) {
    nss_status_ = new ::zsearch::MozillaSalesForceStatus(*from.nss_status_);
  } else {
    nss_status_ = NULL;
  }
  ::memcpy(&source_, &from.source_,
    reinterpret_cast<char*>(&ct_server_) -
    reinterpret_cast<char*>(&source_) + sizeof(ct_server_));
  // @@protoc_insertion_point(copy_constructor:zsearch.ExternalCertificate)
}

void ExternalCertificate::SharedCtor() {
  tbshash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&anonymous_record_, 0, reinterpret_cast<char*>(&ct_server_) -
    reinterpret_cast<char*>(&anonymous_record_) + sizeof(ct_server_));
  _cached_size_ = 0;
}

ExternalCertificate::~ExternalCertificate() {
  // @@protoc_insertion_point(destructor:zsearch.ExternalCertificate)
  SharedDtor();
}

void ExternalCertificate::SharedDtor() {
  tbshash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete anonymous_record_;
  }
  if (this != internal_default_instance()) {
    delete ct_status_;
  }
  if (this != internal_default_instance()) {
    delete nss_status_;
  }
}

void ExternalCertificate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalCertificate::descriptor() {
  protobuf_anonstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_anonstore_2eproto::file_level_metadata[2].descriptor;
}

const ExternalCertificate& ExternalCertificate::default_instance() {
  protobuf_anonstore_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExternalCertificate* ExternalCertificate::New(::google::protobuf::Arena* arena) const {
  ExternalCertificate* n = new ExternalCertificate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExternalCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.ExternalCertificate)
  tbshash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && anonymous_record_ != NULL) {
    delete anonymous_record_;
  }
  anonymous_record_ = NULL;
  if (GetArenaNoVirtual() == NULL && ct_status_ != NULL) {
    delete ct_status_;
  }
  ct_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && nss_status_ != NULL) {
    delete nss_status_;
  }
  nss_status_ = NULL;
  ::memset(&source_, 0, reinterpret_cast<char*>(&ct_server_) -
    reinterpret_cast<char*>(&source_) + sizeof(ct_server_));
}

bool ExternalCertificate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.ExternalCertificate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .zsearch.CertificateSource source = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_source(static_cast< ::zsearch::CertificateSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.AnonymousRecord anonymous_record = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anonymous_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServer ct_server = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ct_server(static_cast< ::zsearch::CTServer >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTServerStatus ct_status = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ct_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.MozillaSalesForceStatus nss_status = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nss_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes tbsHash = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tbshash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.ExternalCertificate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.ExternalCertificate)
  return false;
#undef DO_
}

void ExternalCertificate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.ExternalCertificate)
  // .zsearch.CertificateSource source = 1;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->source(), output);
  }

  // .zsearch.AnonymousRecord anonymous_record = 2;
  if (this->has_anonymous_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->anonymous_record_, output);
  }

  // .zsearch.CTServer ct_server = 3;
  if (this->ct_server() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ct_server(), output);
  }

  // .zsearch.CTServerStatus ct_status = 4;
  if (this->has_ct_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ct_status_, output);
  }

  // .zsearch.MozillaSalesForceStatus nss_status = 5;
  if (this->has_nss_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->nss_status_, output);
  }

  // bytes tbsHash = 6;
  if (this->tbshash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->tbshash(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.ExternalCertificate)
}

::google::protobuf::uint8* ExternalCertificate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.ExternalCertificate)
  // .zsearch.CertificateSource source = 1;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->source(), target);
  }

  // .zsearch.AnonymousRecord anonymous_record = 2;
  if (this->has_anonymous_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->anonymous_record_, false, target);
  }

  // .zsearch.CTServer ct_server = 3;
  if (this->ct_server() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ct_server(), target);
  }

  // .zsearch.CTServerStatus ct_status = 4;
  if (this->has_ct_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->ct_status_, false, target);
  }

  // .zsearch.MozillaSalesForceStatus nss_status = 5;
  if (this->has_nss_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->nss_status_, false, target);
  }

  // bytes tbsHash = 6;
  if (this->tbshash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->tbshash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.ExternalCertificate)
  return target;
}

size_t ExternalCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.ExternalCertificate)
  size_t total_size = 0;

  // bytes tbsHash = 6;
  if (this->tbshash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tbshash());
  }

  // .zsearch.AnonymousRecord anonymous_record = 2;
  if (this->has_anonymous_record()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->anonymous_record_);
  }

  // .zsearch.CTServerStatus ct_status = 4;
  if (this->has_ct_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ct_status_);
  }

  // .zsearch.MozillaSalesForceStatus nss_status = 5;
  if (this->has_nss_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nss_status_);
  }

  // .zsearch.CertificateSource source = 1;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
  }

  // .zsearch.CTServer ct_server = 3;
  if (this->ct_server() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ct_server());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalCertificate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.ExternalCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  const ExternalCertificate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExternalCertificate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.ExternalCertificate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.ExternalCertificate)
    MergeFrom(*source);
  }
}

void ExternalCertificate::MergeFrom(const ExternalCertificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.ExternalCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.tbshash().size() > 0) {

    tbshash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tbshash_);
  }
  if (from.has_anonymous_record()) {
    mutable_anonymous_record()->::zsearch::AnonymousRecord::MergeFrom(from.anonymous_record());
  }
  if (from.has_ct_status()) {
    mutable_ct_status()->::zsearch::CTServerStatus::MergeFrom(from.ct_status());
  }
  if (from.has_nss_status()) {
    mutable_nss_status()->::zsearch::MozillaSalesForceStatus::MergeFrom(from.nss_status());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.ct_server() != 0) {
    set_ct_server(from.ct_server());
  }
}

void ExternalCertificate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.ExternalCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalCertificate::CopyFrom(const ExternalCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.ExternalCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalCertificate::IsInitialized() const {
  return true;
}

void ExternalCertificate::Swap(ExternalCertificate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternalCertificate::InternalSwap(ExternalCertificate* other) {
  tbshash_.Swap(&other->tbshash_);
  std::swap(anonymous_record_, other->anonymous_record_);
  std::swap(ct_status_, other->ct_status_);
  std::swap(nss_status_, other->nss_status_);
  std::swap(source_, other->source_);
  std::swap(ct_server_, other->ct_server_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExternalCertificate::GetMetadata() const {
  protobuf_anonstore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_anonstore_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExternalCertificate

// .zsearch.CertificateSource source = 1;
void ExternalCertificate::clear_source() {
  source_ = 0;
}
::zsearch::CertificateSource ExternalCertificate::source() const {
  // @@protoc_insertion_point(field_get:zsearch.ExternalCertificate.source)
  return static_cast< ::zsearch::CertificateSource >(source_);
}
void ExternalCertificate::set_source(::zsearch::CertificateSource value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:zsearch.ExternalCertificate.source)
}

// .zsearch.AnonymousRecord anonymous_record = 2;
bool ExternalCertificate::has_anonymous_record() const {
  return this != internal_default_instance() && anonymous_record_ != NULL;
}
void ExternalCertificate::clear_anonymous_record() {
  if (GetArenaNoVirtual() == NULL && anonymous_record_ != NULL) delete anonymous_record_;
  anonymous_record_ = NULL;
}
const ::zsearch::AnonymousRecord& ExternalCertificate::anonymous_record() const {
  // @@protoc_insertion_point(field_get:zsearch.ExternalCertificate.anonymous_record)
  return anonymous_record_ != NULL ? *anonymous_record_
                         : *::zsearch::AnonymousRecord::internal_default_instance();
}
::zsearch::AnonymousRecord* ExternalCertificate::mutable_anonymous_record() {
  
  if (anonymous_record_ == NULL) {
    anonymous_record_ = new ::zsearch::AnonymousRecord;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.ExternalCertificate.anonymous_record)
  return anonymous_record_;
}
::zsearch::AnonymousRecord* ExternalCertificate::release_anonymous_record() {
  // @@protoc_insertion_point(field_release:zsearch.ExternalCertificate.anonymous_record)
  
  ::zsearch::AnonymousRecord* temp = anonymous_record_;
  anonymous_record_ = NULL;
  return temp;
}
void ExternalCertificate::set_allocated_anonymous_record(::zsearch::AnonymousRecord* anonymous_record) {
  delete anonymous_record_;
  anonymous_record_ = anonymous_record;
  if (anonymous_record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.ExternalCertificate.anonymous_record)
}

// .zsearch.CTServer ct_server = 3;
void ExternalCertificate::clear_ct_server() {
  ct_server_ = 0;
}
::zsearch::CTServer ExternalCertificate::ct_server() const {
  // @@protoc_insertion_point(field_get:zsearch.ExternalCertificate.ct_server)
  return static_cast< ::zsearch::CTServer >(ct_server_);
}
void ExternalCertificate::set_ct_server(::zsearch::CTServer value) {
  
  ct_server_ = value;
  // @@protoc_insertion_point(field_set:zsearch.ExternalCertificate.ct_server)
}

// .zsearch.CTServerStatus ct_status = 4;
bool ExternalCertificate::has_ct_status() const {
  return this != internal_default_instance() && ct_status_ != NULL;
}
void ExternalCertificate::clear_ct_status() {
  if (GetArenaNoVirtual() == NULL && ct_status_ != NULL) delete ct_status_;
  ct_status_ = NULL;
}
const ::zsearch::CTServerStatus& ExternalCertificate::ct_status() const {
  // @@protoc_insertion_point(field_get:zsearch.ExternalCertificate.ct_status)
  return ct_status_ != NULL ? *ct_status_
                         : *::zsearch::CTServerStatus::internal_default_instance();
}
::zsearch::CTServerStatus* ExternalCertificate::mutable_ct_status() {
  
  if (ct_status_ == NULL) {
    ct_status_ = new ::zsearch::CTServerStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.ExternalCertificate.ct_status)
  return ct_status_;
}
::zsearch::CTServerStatus* ExternalCertificate::release_ct_status() {
  // @@protoc_insertion_point(field_release:zsearch.ExternalCertificate.ct_status)
  
  ::zsearch::CTServerStatus* temp = ct_status_;
  ct_status_ = NULL;
  return temp;
}
void ExternalCertificate::set_allocated_ct_status(::zsearch::CTServerStatus* ct_status) {
  delete ct_status_;
  ct_status_ = ct_status;
  if (ct_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.ExternalCertificate.ct_status)
}

// .zsearch.MozillaSalesForceStatus nss_status = 5;
bool ExternalCertificate::has_nss_status() const {
  return this != internal_default_instance() && nss_status_ != NULL;
}
void ExternalCertificate::clear_nss_status() {
  if (GetArenaNoVirtual() == NULL && nss_status_ != NULL) delete nss_status_;
  nss_status_ = NULL;
}
const ::zsearch::MozillaSalesForceStatus& ExternalCertificate::nss_status() const {
  // @@protoc_insertion_point(field_get:zsearch.ExternalCertificate.nss_status)
  return nss_status_ != NULL ? *nss_status_
                         : *::zsearch::MozillaSalesForceStatus::internal_default_instance();
}
::zsearch::MozillaSalesForceStatus* ExternalCertificate::mutable_nss_status() {
  
  if (nss_status_ == NULL) {
    nss_status_ = new ::zsearch::MozillaSalesForceStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.ExternalCertificate.nss_status)
  return nss_status_;
}
::zsearch::MozillaSalesForceStatus* ExternalCertificate::release_nss_status() {
  // @@protoc_insertion_point(field_release:zsearch.ExternalCertificate.nss_status)
  
  ::zsearch::MozillaSalesForceStatus* temp = nss_status_;
  nss_status_ = NULL;
  return temp;
}
void ExternalCertificate::set_allocated_nss_status(::zsearch::MozillaSalesForceStatus* nss_status) {
  delete nss_status_;
  nss_status_ = nss_status;
  if (nss_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.ExternalCertificate.nss_status)
}

// bytes tbsHash = 6;
void ExternalCertificate::clear_tbshash() {
  tbshash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ExternalCertificate::tbshash() const {
  // @@protoc_insertion_point(field_get:zsearch.ExternalCertificate.tbsHash)
  return tbshash_.GetNoArena();
}
void ExternalCertificate::set_tbshash(const ::std::string& value) {
  
  tbshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.ExternalCertificate.tbsHash)
}
#if LANG_CXX11
void ExternalCertificate::set_tbshash(::std::string&& value) {
  
  tbshash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.ExternalCertificate.tbsHash)
}
#endif
void ExternalCertificate::set_tbshash(const char* value) {
  
  tbshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.ExternalCertificate.tbsHash)
}
void ExternalCertificate::set_tbshash(const void* value, size_t size) {
  
  tbshash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.ExternalCertificate.tbsHash)
}
::std::string* ExternalCertificate::mutable_tbshash() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.ExternalCertificate.tbsHash)
  return tbshash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExternalCertificate::release_tbshash() {
  // @@protoc_insertion_point(field_release:zsearch.ExternalCertificate.tbsHash)
  
  return tbshash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExternalCertificate::set_allocated_tbshash(::std::string* tbshash) {
  if (tbshash != NULL) {
    
  } else {
    
  }
  tbshash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tbshash);
  // @@protoc_insertion_point(field_set_allocated:zsearch.ExternalCertificate.tbsHash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace zsearch

// @@protoc_insertion_point(global_scope)
