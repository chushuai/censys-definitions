// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zsearch {
class MinScanIdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MinScanId> {
} _MinScanId_default_instance_;
class MozillaOneCRLEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MozillaOneCRLEntry> {
} _MozillaOneCRLEntry_default_instance_;
class CommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Command> {
} _Command_default_instance_;
class AnonymousStoreStatisticsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnonymousStoreStatistics> {
} _AnonymousStoreStatistics_default_instance_;
class StatisticsPairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StatisticsPair> {
} _StatisticsPair_default_instance_;
class StoreStatisticsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StoreStatistics> {
} _StoreStatistics_default_instance_;
class ServerStatistics_StoreStatisticsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServerStatistics::ServerStatistics_StoreStatisticsEntry> {
} _ServerStatistics_StoreStatisticsEntry_default_instance_;
class ServerStatistics_AnonymousStoreStatisticsEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServerStatistics::ServerStatistics_AnonymousStoreStatisticsEntry> {
} _ServerStatistics_AnonymousStoreStatisticsEntry_default_instance_;
class ServerStatisticsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServerStatistics> {
} _ServerStatistics_default_instance_;
class PruneStatisticsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PruneStatistics> {
} _PruneStatistics_default_instance_;
class CommandReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommandReply> {
} _CommandReply_default_instance_;
class HostQueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HostQuery> {
} _HostQuery_default_instance_;
class HostQueryResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HostQueryResponse> {
} _HostQueryResponse_default_instance_;
class AnonymousQueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnonymousQuery> {
} _AnonymousQuery_default_instance_;
class AnonymousQueryResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnonymousQueryResponse> {
} _AnonymousQueryResponse_default_instance_;
class UserDataRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserDataRequest> {
} _UserDataRequest_default_instance_;
class RootStoreQueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RootStoreQuery> {
} _RootStoreQuery_default_instance_;
class RootStoreReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RootStoreReply> {
} _RootStoreReply_default_instance_;

namespace protobuf_rpc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[18];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinScanId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinScanId, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MinScanId, min_scan_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaOneCRLEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaOneCRLEntry, issuer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaOneCRLEntry, serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaOneCRLEntry, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaOneCRLEntry, last_modified_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, incremental_dump_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, min_scan_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, filepath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, max_records_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, start_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, stop_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, one_crl_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, threads_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousStoreStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousStoreStatistics, total_records_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousStoreStatistics, records_added_last_reset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousStoreStatistics, records_updated_last_reset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousStoreStatistics, records_unchanged_last_reset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousStoreStatistics, records_received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousStoreStatistics, records_in_redis_queue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousStoreStatistics, redis_queue_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousStoreStatistics, queue_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousStoreStatistics, worker_threads_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsPair, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsPair, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsPair, subprotocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticsPair, statistics_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStatistics, global_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreStatistics, protocols_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatistics, store_statistics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerStatistics, anonymous_store_statistics_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PruneStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PruneStatistics, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PruneStatistics, records_pruned_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReply, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReply, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReply, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandReply, prune_statistics_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostQuery, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostQuery, domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostQuery, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostQuery, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostQuery, subprotocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostQuery, max_records_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostQueryResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostQueryResponse, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostQueryResponse, domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostQueryResponse, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostQueryResponse, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostQueryResponse, subprotocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostQueryResponse, record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostQueryResponse, records_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostQueryResponse, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousQuery, sha256fp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousQueryResponse, sha256fp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousQueryResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousQueryResponse, record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousQueryResponse, records_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousQueryResponse, error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataRequest, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataRequest, domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDataRequest, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootStoreQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootStoreQuery, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootStoreReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootStoreReply, certificates_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(MinScanId)},
  { 7, -1, sizeof(MozillaOneCRLEntry)},
  { 16, -1, sizeof(Command)},
  { 29, -1, sizeof(AnonymousStoreStatistics)},
  { 43, -1, sizeof(StatisticsPair)},
  { 52, -1, sizeof(StoreStatistics)},
  { 59, -1, sizeof(ServerStatistics)},
  { 66, -1, sizeof(PruneStatistics)},
  { 73, -1, sizeof(CommandReply)},
  { 82, -1, sizeof(HostQuery)},
  { 93, -1, sizeof(HostQueryResponse)},
  { 107, -1, sizeof(AnonymousQuery)},
  { 113, -1, sizeof(AnonymousQueryResponse)},
  { 123, -1, sizeof(UserDataRequest)},
  { 131, -1, sizeof(RootStoreQuery)},
  { 137, -1, sizeof(RootStoreReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MinScanId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MozillaOneCRLEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnonymousStoreStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StatisticsPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StoreStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerStatistics_StoreStatisticsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerStatistics_AnonymousStoreStatisticsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServerStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PruneStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommandReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HostQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HostQueryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnonymousQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnonymousQueryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RootStoreQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RootStoreReply_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "rpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[6].reflection = ServerStatistics::ServerStatistics_StoreStatisticsEntry::CreateReflection(file_level_metadata[6].descriptor, _ServerStatistics_StoreStatisticsEntry_default_instance_.get_mutable());
file_level_metadata[7].reflection = ServerStatistics::ServerStatistics_AnonymousStoreStatisticsEntry::CreateReflection(file_level_metadata[7].descriptor, _ServerStatistics_AnonymousStoreStatisticsEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

}  // namespace

void TableStruct::Shutdown() {
  _MinScanId_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MozillaOneCRLEntry_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Command_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _AnonymousStoreStatistics_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _StatisticsPair_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _StoreStatistics_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _ServerStatistics_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _PruneStatistics_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CommandReply_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _HostQuery_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _HostQueryResponse_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _AnonymousQuery_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _AnonymousQueryResponse_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _UserDataRequest_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _RootStoreQuery_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _RootStoreReply_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  delete file_level_metadata[6].reflection;
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::zsearch::protobuf_common_2eproto::InitDefaults();
  ::zsearch::protobuf_certificate_2eproto::InitDefaults();
  ::zsearch::protobuf_anonstore_2eproto::InitDefaults();
  ::zsearch::protobuf_hoststore_2eproto::InitDefaults();
  _MinScanId_default_instance_.DefaultConstruct();
  _MozillaOneCRLEntry_default_instance_.DefaultConstruct();
  _Command_default_instance_.DefaultConstruct();
  _AnonymousStoreStatistics_default_instance_.DefaultConstruct();
  _StatisticsPair_default_instance_.DefaultConstruct();
  _StoreStatistics_default_instance_.DefaultConstruct();
  _ServerStatistics_StoreStatisticsEntry_default_instance_.DefaultConstruct();
  _ServerStatistics_AnonymousStoreStatisticsEntry_default_instance_.DefaultConstruct();
  _ServerStatistics_default_instance_.DefaultConstruct();
  _PruneStatistics_default_instance_.DefaultConstruct();
  _CommandReply_default_instance_.DefaultConstruct();
  _HostQuery_default_instance_.DefaultConstruct();
  _HostQueryResponse_default_instance_.DefaultConstruct();
  _AnonymousQuery_default_instance_.DefaultConstruct();
  _AnonymousQueryResponse_default_instance_.DefaultConstruct();
  _UserDataRequest_default_instance_.DefaultConstruct();
  _RootStoreQuery_default_instance_.DefaultConstruct();
  _RootStoreReply_default_instance_.DefaultConstruct();
  _MinScanId_default_instance_.get_mutable()->key_ = const_cast< ::zsearch::AnonymousKey*>(
      ::zsearch::AnonymousKey::internal_default_instance());
  _StatisticsPair_default_instance_.get_mutable()->statistics_ = const_cast< ::zsearch::AnonymousStoreStatistics*>(
      ::zsearch::AnonymousStoreStatistics::internal_default_instance());
  _StoreStatistics_default_instance_.get_mutable()->global_ = const_cast< ::zsearch::AnonymousStoreStatistics*>(
      ::zsearch::AnonymousStoreStatistics::internal_default_instance());
  _ServerStatistics_StoreStatisticsEntry_default_instance_.get_mutable()->set_default_instance(_ServerStatistics_StoreStatisticsEntry_default_instance_.get_mutable());
  _ServerStatistics_StoreStatisticsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _ServerStatistics_AnonymousStoreStatisticsEntry_default_instance_.get_mutable()->set_default_instance(_ServerStatistics_AnonymousStoreStatisticsEntry_default_instance_.get_mutable());
  _ServerStatistics_AnonymousStoreStatisticsEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _PruneStatistics_default_instance_.get_mutable()->key_ = const_cast< ::zsearch::AnonymousKey*>(
      ::zsearch::AnonymousKey::internal_default_instance());
  _CommandReply_default_instance_.get_mutable()->stats_ = const_cast< ::zsearch::ServerStatistics*>(
      ::zsearch::ServerStatistics::internal_default_instance());
  _HostQueryResponse_default_instance_.get_mutable()->record_ = const_cast< ::zsearch::Record*>(
      ::zsearch::Record::internal_default_instance());
  _AnonymousQueryResponse_default_instance_.get_mutable()->record_ = const_cast< ::zsearch::AnonymousRecord*>(
      ::zsearch::AnonymousRecord::internal_default_instance());
  _UserDataRequest_default_instance_.get_mutable()->data_ = const_cast< ::zsearch::UserdataAtom*>(
      ::zsearch::UserdataAtom::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\trpc.proto\022\007zsearch\032\014common.proto\032\021cert"
      "ificate.proto\032\017anonstore.proto\032\017hoststor"
      "e.proto\"D\n\tMinScanId\022\"\n\003key\030\001 \001(\0132\025.zsea"
      "rch.AnonymousKey\022\023\n\013min_scan_id\030\002 \001(\r\"W\n"
      "\022MozillaOneCRLEntry\022\016\n\006issuer\030\001 \001(\014\022\016\n\006s"
      "erial\030\002 \001(\014\022\n\n\002id\030\003 \001(\t\022\025\n\rlast_modified"
      "\030\004 \001(\r\"\336\001\n\007Command\022\030\n\020incremental_dump\030\001"
      " \001(\010\022(\n\014min_scan_ids\030\002 \003(\0132\022.zsearch.Min"
      "ScanId\022\020\n\010filepath\030\003 \001(\t\022\023\n\013max_records\030"
      "\004 \001(\r\022\020\n\010start_ip\030\005 \001(\r\022\017\n\007stop_ip\030\006 \001(\r"
      "\0224\n\017one_crl_entries\030\007 \003(\0132\033.zsearch.Mozi"
      "llaOneCRLEntry\022\017\n\007threads\030\010 \001(\r\"\235\002\n\030Anon"
      "ymousStoreStatistics\022\025\n\rtotal_records\030\001 "
      "\001(\004\022 \n\030records_added_last_reset\030\002 \001(\004\022\"\n"
      "\032records_updated_last_reset\030\003 \001(\004\022$\n\034rec"
      "ords_unchanged_last_reset\030\004 \001(\004\022\030\n\020recor"
      "ds_received\030\005 \001(\004\022\036\n\026records_in_redis_qu"
      "eue\030\006 \001(\r\022\030\n\020redis_queue_name\030\007 \001(\t\022\022\n\nq"
      "ueue_type\030\010 \001(\t\022\026\n\016worker_threads\030\t \001(\r\""
      "|\n\016StatisticsPair\022\014\n\004port\030\001 \001(\r\022\020\n\010proto"
      "col\030\002 \001(\r\022\023\n\013subprotocol\030\003 \001(\r\0225\n\nstatis"
      "tics\030\004 \001(\0132!.zsearch.AnonymousStoreStati"
      "stics\"p\n\017StoreStatistics\0221\n\006global\030\001 \001(\013"
      "2!.zsearch.AnonymousStoreStatistics\022*\n\tp"
      "rotocols\030\002 \003(\0132\027.zsearch.StatisticsPair\""
      "\357\002\n\020ServerStatistics\022H\n\020store_statistics"
      "\030\001 \003(\0132..zsearch.ServerStatistics.StoreS"
      "tatisticsEntry\022[\n\032anonymous_store_statis"
      "tics\030\002 \003(\01327.zsearch.ServerStatistics.An"
      "onymousStoreStatisticsEntry\032P\n\024StoreStat"
      "isticsEntry\022\013\n\003key\030\001 \001(\t\022\'\n\005value\030\002 \001(\0132"
      "\030.zsearch.StoreStatistics:\0028\001\032b\n\035Anonymo"
      "usStoreStatisticsEntry\022\013\n\003key\030\001 \001(\t\0220\n\005v"
      "alue\030\002 \001(\0132!.zsearch.AnonymousStoreStati"
      "stics:\0028\001\"M\n\017PruneStatistics\022\"\n\003key\030\001 \001("
      "\0132\025.zsearch.AnonymousKey\022\026\n\016records_prun"
      "ed\030\002 \001(\004\"\363\001\n\014CommandReply\0223\n\006status\030\001 \001("
      "\0162#.zsearch.CommandReply.CommandStatus\022\r"
      "\n\005error\030\002 \001(\t\022(\n\005stats\030\003 \001(\0132\031.zsearch.S"
      "erverStatistics\0222\n\020prune_statistics\030\004 \003("
      "\0132\030.zsearch.PruneStatistics\"A\n\rCommandSt"
      "atus\022\t\n\005FATAL\020\000\022\013\n\007SUCCESS\020\001\022\t\n\005ERROR\020\002\022"
      "\r\n\tNO_RECORD\020\003\"q\n\tHostQuery\022\n\n\002ip\030\001 \001(\007\022"
      "\016\n\006domain\030\002 \001(\t\022\014\n\004port\030\003 \001(\r\022\020\n\010protoco"
      "l\030\004 \001(\r\022\023\n\013subprotocol\030\005 \001(\r\022\023\n\013max_reco"
      "rds\030\006 \001(\r\"\270\002\n\021HostQueryResponse\0229\n\006statu"
      "s\030\001 \001(\0162).zsearch.HostQueryResponse.Resp"
      "onseStatus\022\n\n\002ip\030\002 \001(\007\022\016\n\006domain\030\003 \001(\t\022\014"
      "\n\004port\030\004 \001(\r\022\020\n\010protocol\030\005 \001(\r\022\023\n\013subpro"
      "tocol\030\006 \001(\r\022\037\n\006record\030\007 \001(\0132\017.zsearch.Re"
      "cord\022 \n\007records\030\010 \003(\0132\017.zsearch.Record\022\r"
      "\n\005error\030\t \001(\t\"E\n\016ResponseStatus\022\014\n\010RESER"
      "VED\020\000\022\013\n\007SUCCESS\020\001\022\r\n\tNO_RECORD\020\002\022\t\n\005ERR"
      "OR\020\003\"\"\n\016AnonymousQuery\022\020\n\010sha256fp\030\001 \001(\014"
      "\"\225\002\n\026AnonymousQueryResponse\022\020\n\010sha256fp\030"
      "\001 \001(\014\022>\n\006status\030\002 \001(\0162..zsearch.Anonymou"
      "sQueryResponse.ResponseStatus\022(\n\006record\030"
      "\003 \001(\0132\030.zsearch.AnonymousRecord\022)\n\007recor"
      "ds\030\004 \003(\0132\030.zsearch.AnonymousRecord\022\r\n\005er"
      "ror\030; \001(\t\"E\n\016ResponseStatus\022\014\n\010RESERVED\020"
      "\000\022\013\n\007SUCCESS\020\001\022\r\n\tNO_RECORD\020\002\022\t\n\005ERROR\020\003"
      "\"R\n\017UserDataRequest\022\n\n\002ip\030\001 \001(\007\022\016\n\006domai"
      "n\030\002 \001(\t\022#\n\004data\030\003 \001(\0132\025.zsearch.Userdata"
      "Atom\"\236\001\n\016RootStoreQuery\0228\n\004type\030\001 \001(\0162*."
      "zsearch.RootStoreQuery.RootStoreQueryTyp"
      "e\"R\n\022RootStoreQueryType\022\014\n\010RESERVED\020\000\022\013\n"
      "\007MOZILLA\020\001\022\r\n\tMICROSOFT\020\002\022\t\n\005APPLE\020\003\022\007\n\003"
      "ALL\020\004\"<\n\016RootStoreReply\022*\n\014certificates\030"
      "\001 \003(\0132\024.zsearch.Certificateb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2755);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rpc.proto", &protobuf_RegisterTypes);
  ::zsearch::protobuf_common_2eproto::AddDescriptors();
  ::zsearch::protobuf_certificate_2eproto::AddDescriptors();
  ::zsearch::protobuf_anonstore_2eproto::AddDescriptors();
  ::zsearch::protobuf_hoststore_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_rpc_2eproto

const ::google::protobuf::EnumDescriptor* CommandReply_CommandStatus_descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_enum_descriptors[0];
}
bool CommandReply_CommandStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CommandReply_CommandStatus CommandReply::FATAL;
const CommandReply_CommandStatus CommandReply::SUCCESS;
const CommandReply_CommandStatus CommandReply::ERROR;
const CommandReply_CommandStatus CommandReply::NO_RECORD;
const CommandReply_CommandStatus CommandReply::CommandStatus_MIN;
const CommandReply_CommandStatus CommandReply::CommandStatus_MAX;
const int CommandReply::CommandStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* HostQueryResponse_ResponseStatus_descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_enum_descriptors[1];
}
bool HostQueryResponse_ResponseStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HostQueryResponse_ResponseStatus HostQueryResponse::RESERVED;
const HostQueryResponse_ResponseStatus HostQueryResponse::SUCCESS;
const HostQueryResponse_ResponseStatus HostQueryResponse::NO_RECORD;
const HostQueryResponse_ResponseStatus HostQueryResponse::ERROR;
const HostQueryResponse_ResponseStatus HostQueryResponse::ResponseStatus_MIN;
const HostQueryResponse_ResponseStatus HostQueryResponse::ResponseStatus_MAX;
const int HostQueryResponse::ResponseStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* AnonymousQueryResponse_ResponseStatus_descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_enum_descriptors[2];
}
bool AnonymousQueryResponse_ResponseStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AnonymousQueryResponse_ResponseStatus AnonymousQueryResponse::RESERVED;
const AnonymousQueryResponse_ResponseStatus AnonymousQueryResponse::SUCCESS;
const AnonymousQueryResponse_ResponseStatus AnonymousQueryResponse::NO_RECORD;
const AnonymousQueryResponse_ResponseStatus AnonymousQueryResponse::ERROR;
const AnonymousQueryResponse_ResponseStatus AnonymousQueryResponse::ResponseStatus_MIN;
const AnonymousQueryResponse_ResponseStatus AnonymousQueryResponse::ResponseStatus_MAX;
const int AnonymousQueryResponse::ResponseStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RootStoreQuery_RootStoreQueryType_descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_enum_descriptors[3];
}
bool RootStoreQuery_RootStoreQueryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RootStoreQuery_RootStoreQueryType RootStoreQuery::RESERVED;
const RootStoreQuery_RootStoreQueryType RootStoreQuery::MOZILLA;
const RootStoreQuery_RootStoreQueryType RootStoreQuery::MICROSOFT;
const RootStoreQuery_RootStoreQueryType RootStoreQuery::APPLE;
const RootStoreQuery_RootStoreQueryType RootStoreQuery::ALL;
const RootStoreQuery_RootStoreQueryType RootStoreQuery::RootStoreQueryType_MIN;
const RootStoreQuery_RootStoreQueryType RootStoreQuery::RootStoreQueryType_MAX;
const int RootStoreQuery::RootStoreQueryType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MinScanId::kKeyFieldNumber;
const int MinScanId::kMinScanIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MinScanId::MinScanId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.MinScanId)
}
MinScanId::MinScanId(const MinScanId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::zsearch::AnonymousKey(*from.key_);
  } else {
    key_ = NULL;
  }
  min_scan_id_ = from.min_scan_id_;
  // @@protoc_insertion_point(copy_constructor:zsearch.MinScanId)
}

void MinScanId::SharedCtor() {
  ::memset(&key_, 0, reinterpret_cast<char*>(&min_scan_id_) -
    reinterpret_cast<char*>(&key_) + sizeof(min_scan_id_));
  _cached_size_ = 0;
}

MinScanId::~MinScanId() {
  // @@protoc_insertion_point(destructor:zsearch.MinScanId)
  SharedDtor();
}

void MinScanId::SharedDtor() {
  if (this != internal_default_instance()) {
    delete key_;
  }
}

void MinScanId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MinScanId::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MinScanId& MinScanId::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MinScanId* MinScanId::New(::google::protobuf::Arena* arena) const {
  MinScanId* n = new MinScanId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MinScanId::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.MinScanId)
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  min_scan_id_ = 0u;
}

bool MinScanId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.MinScanId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .zsearch.AnonymousKey key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 min_scan_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_scan_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.MinScanId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.MinScanId)
  return false;
#undef DO_
}

void MinScanId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.MinScanId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zsearch.AnonymousKey key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // uint32 min_scan_id = 2;
  if (this->min_scan_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min_scan_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.MinScanId)
}

::google::protobuf::uint8* MinScanId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.MinScanId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zsearch.AnonymousKey key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->key_, deterministic, target);
  }

  // uint32 min_scan_id = 2;
  if (this->min_scan_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min_scan_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.MinScanId)
  return target;
}

size_t MinScanId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.MinScanId)
  size_t total_size = 0;

  // .zsearch.AnonymousKey key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // uint32 min_scan_id = 2;
  if (this->min_scan_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min_scan_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MinScanId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.MinScanId)
  GOOGLE_DCHECK_NE(&from, this);
  const MinScanId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MinScanId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.MinScanId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.MinScanId)
    MergeFrom(*source);
  }
}

void MinScanId::MergeFrom(const MinScanId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.MinScanId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    mutable_key()->::zsearch::AnonymousKey::MergeFrom(from.key());
  }
  if (from.min_scan_id() != 0) {
    set_min_scan_id(from.min_scan_id());
  }
}

void MinScanId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.MinScanId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MinScanId::CopyFrom(const MinScanId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.MinScanId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinScanId::IsInitialized() const {
  return true;
}

void MinScanId::Swap(MinScanId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MinScanId::InternalSwap(MinScanId* other) {
  std::swap(key_, other->key_);
  std::swap(min_scan_id_, other->min_scan_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MinScanId::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MinScanId

// .zsearch.AnonymousKey key = 1;
bool MinScanId::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void MinScanId::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::zsearch::AnonymousKey& MinScanId::key() const {
  // @@protoc_insertion_point(field_get:zsearch.MinScanId.key)
  return key_ != NULL ? *key_
                         : *::zsearch::AnonymousKey::internal_default_instance();
}
::zsearch::AnonymousKey* MinScanId::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::zsearch::AnonymousKey;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.MinScanId.key)
  return key_;
}
::zsearch::AnonymousKey* MinScanId::release_key() {
  // @@protoc_insertion_point(field_release:zsearch.MinScanId.key)
  
  ::zsearch::AnonymousKey* temp = key_;
  key_ = NULL;
  return temp;
}
void MinScanId::set_allocated_key(::zsearch::AnonymousKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.MinScanId.key)
}

// uint32 min_scan_id = 2;
void MinScanId::clear_min_scan_id() {
  min_scan_id_ = 0u;
}
::google::protobuf::uint32 MinScanId::min_scan_id() const {
  // @@protoc_insertion_point(field_get:zsearch.MinScanId.min_scan_id)
  return min_scan_id_;
}
void MinScanId::set_min_scan_id(::google::protobuf::uint32 value) {
  
  min_scan_id_ = value;
  // @@protoc_insertion_point(field_set:zsearch.MinScanId.min_scan_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MozillaOneCRLEntry::kIssuerFieldNumber;
const int MozillaOneCRLEntry::kSerialFieldNumber;
const int MozillaOneCRLEntry::kIdFieldNumber;
const int MozillaOneCRLEntry::kLastModifiedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MozillaOneCRLEntry::MozillaOneCRLEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.MozillaOneCRLEntry)
}
MozillaOneCRLEntry::MozillaOneCRLEntry(const MozillaOneCRLEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  issuer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.issuer().size() > 0) {
    issuer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_);
  }
  serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial().size() > 0) {
    serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  last_modified_ = from.last_modified_;
  // @@protoc_insertion_point(copy_constructor:zsearch.MozillaOneCRLEntry)
}

void MozillaOneCRLEntry::SharedCtor() {
  issuer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_modified_ = 0u;
  _cached_size_ = 0;
}

MozillaOneCRLEntry::~MozillaOneCRLEntry() {
  // @@protoc_insertion_point(destructor:zsearch.MozillaOneCRLEntry)
  SharedDtor();
}

void MozillaOneCRLEntry::SharedDtor() {
  issuer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MozillaOneCRLEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MozillaOneCRLEntry::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MozillaOneCRLEntry& MozillaOneCRLEntry::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

MozillaOneCRLEntry* MozillaOneCRLEntry::New(::google::protobuf::Arena* arena) const {
  MozillaOneCRLEntry* n = new MozillaOneCRLEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MozillaOneCRLEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.MozillaOneCRLEntry)
  issuer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_modified_ = 0u;
}

bool MozillaOneCRLEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.MozillaOneCRLEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes issuer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_issuer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes serial = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.MozillaOneCRLEntry.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 last_modified = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_modified_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.MozillaOneCRLEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.MozillaOneCRLEntry)
  return false;
#undef DO_
}

void MozillaOneCRLEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.MozillaOneCRLEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes issuer = 1;
  if (this->issuer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->issuer(), output);
  }

  // bytes serial = 2;
  if (this->serial().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->serial(), output);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaOneCRLEntry.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->id(), output);
  }

  // uint32 last_modified = 4;
  if (this->last_modified() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_modified(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.MozillaOneCRLEntry)
}

::google::protobuf::uint8* MozillaOneCRLEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.MozillaOneCRLEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes issuer = 1;
  if (this->issuer().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->issuer(), target);
  }

  // bytes serial = 2;
  if (this->serial().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->serial(), target);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaOneCRLEntry.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }

  // uint32 last_modified = 4;
  if (this->last_modified() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_modified(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.MozillaOneCRLEntry)
  return target;
}

size_t MozillaOneCRLEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.MozillaOneCRLEntry)
  size_t total_size = 0;

  // bytes issuer = 1;
  if (this->issuer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->issuer());
  }

  // bytes serial = 2;
  if (this->serial().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->serial());
  }

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // uint32 last_modified = 4;
  if (this->last_modified() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_modified());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MozillaOneCRLEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.MozillaOneCRLEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const MozillaOneCRLEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MozillaOneCRLEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.MozillaOneCRLEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.MozillaOneCRLEntry)
    MergeFrom(*source);
  }
}

void MozillaOneCRLEntry::MergeFrom(const MozillaOneCRLEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.MozillaOneCRLEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.issuer().size() > 0) {

    issuer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_);
  }
  if (from.serial().size() > 0) {

    serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.last_modified() != 0) {
    set_last_modified(from.last_modified());
  }
}

void MozillaOneCRLEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.MozillaOneCRLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MozillaOneCRLEntry::CopyFrom(const MozillaOneCRLEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.MozillaOneCRLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MozillaOneCRLEntry::IsInitialized() const {
  return true;
}

void MozillaOneCRLEntry::Swap(MozillaOneCRLEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MozillaOneCRLEntry::InternalSwap(MozillaOneCRLEntry* other) {
  issuer_.Swap(&other->issuer_);
  serial_.Swap(&other->serial_);
  id_.Swap(&other->id_);
  std::swap(last_modified_, other->last_modified_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MozillaOneCRLEntry::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MozillaOneCRLEntry

// bytes issuer = 1;
void MozillaOneCRLEntry::clear_issuer() {
  issuer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MozillaOneCRLEntry::issuer() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaOneCRLEntry.issuer)
  return issuer_.GetNoArena();
}
void MozillaOneCRLEntry::set_issuer(const ::std::string& value) {
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaOneCRLEntry.issuer)
}
#if LANG_CXX11
void MozillaOneCRLEntry::set_issuer(::std::string&& value) {
  
  issuer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaOneCRLEntry.issuer)
}
#endif
void MozillaOneCRLEntry::set_issuer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaOneCRLEntry.issuer)
}
void MozillaOneCRLEntry::set_issuer(const void* value, size_t size) {
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaOneCRLEntry.issuer)
}
::std::string* MozillaOneCRLEntry::mutable_issuer() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaOneCRLEntry.issuer)
  return issuer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MozillaOneCRLEntry::release_issuer() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaOneCRLEntry.issuer)
  
  return issuer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MozillaOneCRLEntry::set_allocated_issuer(::std::string* issuer) {
  if (issuer != NULL) {
    
  } else {
    
  }
  issuer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaOneCRLEntry.issuer)
}

// bytes serial = 2;
void MozillaOneCRLEntry::clear_serial() {
  serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MozillaOneCRLEntry::serial() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaOneCRLEntry.serial)
  return serial_.GetNoArena();
}
void MozillaOneCRLEntry::set_serial(const ::std::string& value) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaOneCRLEntry.serial)
}
#if LANG_CXX11
void MozillaOneCRLEntry::set_serial(::std::string&& value) {
  
  serial_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaOneCRLEntry.serial)
}
#endif
void MozillaOneCRLEntry::set_serial(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaOneCRLEntry.serial)
}
void MozillaOneCRLEntry::set_serial(const void* value, size_t size) {
  
  serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaOneCRLEntry.serial)
}
::std::string* MozillaOneCRLEntry::mutable_serial() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaOneCRLEntry.serial)
  return serial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MozillaOneCRLEntry::release_serial() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaOneCRLEntry.serial)
  
  return serial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MozillaOneCRLEntry::set_allocated_serial(::std::string* serial) {
  if (serial != NULL) {
    
  } else {
    
  }
  serial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaOneCRLEntry.serial)
}

// string id = 3;
void MozillaOneCRLEntry::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MozillaOneCRLEntry::id() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaOneCRLEntry.id)
  return id_.GetNoArena();
}
void MozillaOneCRLEntry::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaOneCRLEntry.id)
}
#if LANG_CXX11
void MozillaOneCRLEntry::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaOneCRLEntry.id)
}
#endif
void MozillaOneCRLEntry::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaOneCRLEntry.id)
}
void MozillaOneCRLEntry::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaOneCRLEntry.id)
}
::std::string* MozillaOneCRLEntry::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaOneCRLEntry.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MozillaOneCRLEntry::release_id() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaOneCRLEntry.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MozillaOneCRLEntry::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaOneCRLEntry.id)
}

// uint32 last_modified = 4;
void MozillaOneCRLEntry::clear_last_modified() {
  last_modified_ = 0u;
}
::google::protobuf::uint32 MozillaOneCRLEntry::last_modified() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaOneCRLEntry.last_modified)
  return last_modified_;
}
void MozillaOneCRLEntry::set_last_modified(::google::protobuf::uint32 value) {
  
  last_modified_ = value;
  // @@protoc_insertion_point(field_set:zsearch.MozillaOneCRLEntry.last_modified)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kIncrementalDumpFieldNumber;
const int Command::kMinScanIdsFieldNumber;
const int Command::kFilepathFieldNumber;
const int Command::kMaxRecordsFieldNumber;
const int Command::kStartIpFieldNumber;
const int Command::kStopIpFieldNumber;
const int Command::kOneCrlEntriesFieldNumber;
const int Command::kThreadsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      min_scan_ids_(from.min_scan_ids_),
      one_crl_entries_(from.one_crl_entries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filepath().size() > 0) {
    filepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  ::memcpy(&incremental_dump_, &from.incremental_dump_,
    reinterpret_cast<char*>(&threads_) -
    reinterpret_cast<char*>(&incremental_dump_) + sizeof(threads_));
  // @@protoc_insertion_point(copy_constructor:zsearch.Command)
}

void Command::SharedCtor() {
  filepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&incremental_dump_, 0, reinterpret_cast<char*>(&threads_) -
    reinterpret_cast<char*>(&incremental_dump_) + sizeof(threads_));
  _cached_size_ = 0;
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:zsearch.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  filepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Command& Command::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.Command)
  min_scan_ids_.Clear();
  one_crl_entries_.Clear();
  filepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&incremental_dump_, 0, reinterpret_cast<char*>(&threads_) -
    reinterpret_cast<char*>(&incremental_dump_) + sizeof(threads_));
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool incremental_dump = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incremental_dump_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zsearch.MinScanId min_scan_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_min_scan_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filepath = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.Command.filepath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_records = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_records_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start_ip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stop_ip = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zsearch.MozillaOneCRLEntry one_crl_entries = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_one_crl_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 threads = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool incremental_dump = 1;
  if (this->incremental_dump() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->incremental_dump(), output);
  }

  // repeated .zsearch.MinScanId min_scan_ids = 2;
  for (unsigned int i = 0, n = this->min_scan_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->min_scan_ids(i), output);
  }

  // string filepath = 3;
  if (this->filepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.Command.filepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filepath(), output);
  }

  // uint32 max_records = 4;
  if (this->max_records() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_records(), output);
  }

  // uint32 start_ip = 5;
  if (this->start_ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->start_ip(), output);
  }

  // uint32 stop_ip = 6;
  if (this->stop_ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stop_ip(), output);
  }

  // repeated .zsearch.MozillaOneCRLEntry one_crl_entries = 7;
  for (unsigned int i = 0, n = this->one_crl_entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->one_crl_entries(i), output);
  }

  // uint32 threads = 8;
  if (this->threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->threads(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool incremental_dump = 1;
  if (this->incremental_dump() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->incremental_dump(), target);
  }

  // repeated .zsearch.MinScanId min_scan_ids = 2;
  for (unsigned int i = 0, n = this->min_scan_ids_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->min_scan_ids(i), deterministic, target);
  }

  // string filepath = 3;
  if (this->filepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.Command.filepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filepath(), target);
  }

  // uint32 max_records = 4;
  if (this->max_records() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_records(), target);
  }

  // uint32 start_ip = 5;
  if (this->start_ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->start_ip(), target);
  }

  // uint32 stop_ip = 6;
  if (this->stop_ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stop_ip(), target);
  }

  // repeated .zsearch.MozillaOneCRLEntry one_crl_entries = 7;
  for (unsigned int i = 0, n = this->one_crl_entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->one_crl_entries(i), deterministic, target);
  }

  // uint32 threads = 8;
  if (this->threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->threads(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.Command)
  size_t total_size = 0;

  // repeated .zsearch.MinScanId min_scan_ids = 2;
  {
    unsigned int count = this->min_scan_ids_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->min_scan_ids(i));
    }
  }

  // repeated .zsearch.MozillaOneCRLEntry one_crl_entries = 7;
  {
    unsigned int count = this->one_crl_entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->one_crl_entries(i));
    }
  }

  // string filepath = 3;
  if (this->filepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filepath());
  }

  // bool incremental_dump = 1;
  if (this->incremental_dump() != 0) {
    total_size += 1 + 1;
  }

  // uint32 max_records = 4;
  if (this->max_records() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_records());
  }

  // uint32 start_ip = 5;
  if (this->start_ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_ip());
  }

  // uint32 stop_ip = 6;
  if (this->stop_ip() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stop_ip());
  }

  // uint32 threads = 8;
  if (this->threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->threads());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  min_scan_ids_.MergeFrom(from.min_scan_ids_);
  one_crl_entries_.MergeFrom(from.one_crl_entries_);
  if (from.filepath().size() > 0) {

    filepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  if (from.incremental_dump() != 0) {
    set_incremental_dump(from.incremental_dump());
  }
  if (from.max_records() != 0) {
    set_max_records(from.max_records());
  }
  if (from.start_ip() != 0) {
    set_start_ip(from.start_ip());
  }
  if (from.stop_ip() != 0) {
    set_stop_ip(from.stop_ip());
  }
  if (from.threads() != 0) {
    set_threads(from.threads());
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  min_scan_ids_.InternalSwap(&other->min_scan_ids_);
  one_crl_entries_.InternalSwap(&other->one_crl_entries_);
  filepath_.Swap(&other->filepath_);
  std::swap(incremental_dump_, other->incremental_dump_);
  std::swap(max_records_, other->max_records_);
  std::swap(start_ip_, other->start_ip_);
  std::swap(stop_ip_, other->stop_ip_);
  std::swap(threads_, other->threads_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// bool incremental_dump = 1;
void Command::clear_incremental_dump() {
  incremental_dump_ = false;
}
bool Command::incremental_dump() const {
  // @@protoc_insertion_point(field_get:zsearch.Command.incremental_dump)
  return incremental_dump_;
}
void Command::set_incremental_dump(bool value) {
  
  incremental_dump_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Command.incremental_dump)
}

// repeated .zsearch.MinScanId min_scan_ids = 2;
int Command::min_scan_ids_size() const {
  return min_scan_ids_.size();
}
void Command::clear_min_scan_ids() {
  min_scan_ids_.Clear();
}
const ::zsearch::MinScanId& Command::min_scan_ids(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.Command.min_scan_ids)
  return min_scan_ids_.Get(index);
}
::zsearch::MinScanId* Command::mutable_min_scan_ids(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.Command.min_scan_ids)
  return min_scan_ids_.Mutable(index);
}
::zsearch::MinScanId* Command::add_min_scan_ids() {
  // @@protoc_insertion_point(field_add:zsearch.Command.min_scan_ids)
  return min_scan_ids_.Add();
}
::google::protobuf::RepeatedPtrField< ::zsearch::MinScanId >*
Command::mutable_min_scan_ids() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.Command.min_scan_ids)
  return &min_scan_ids_;
}
const ::google::protobuf::RepeatedPtrField< ::zsearch::MinScanId >&
Command::min_scan_ids() const {
  // @@protoc_insertion_point(field_list:zsearch.Command.min_scan_ids)
  return min_scan_ids_;
}

// string filepath = 3;
void Command::clear_filepath() {
  filepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Command::filepath() const {
  // @@protoc_insertion_point(field_get:zsearch.Command.filepath)
  return filepath_.GetNoArena();
}
void Command::set_filepath(const ::std::string& value) {
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.Command.filepath)
}
#if LANG_CXX11
void Command::set_filepath(::std::string&& value) {
  
  filepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.Command.filepath)
}
#endif
void Command::set_filepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.Command.filepath)
}
void Command::set_filepath(const char* value, size_t size) {
  
  filepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.Command.filepath)
}
::std::string* Command::mutable_filepath() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.Command.filepath)
  return filepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Command::release_filepath() {
  // @@protoc_insertion_point(field_release:zsearch.Command.filepath)
  
  return filepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Command::set_allocated_filepath(::std::string* filepath) {
  if (filepath != NULL) {
    
  } else {
    
  }
  filepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filepath);
  // @@protoc_insertion_point(field_set_allocated:zsearch.Command.filepath)
}

// uint32 max_records = 4;
void Command::clear_max_records() {
  max_records_ = 0u;
}
::google::protobuf::uint32 Command::max_records() const {
  // @@protoc_insertion_point(field_get:zsearch.Command.max_records)
  return max_records_;
}
void Command::set_max_records(::google::protobuf::uint32 value) {
  
  max_records_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Command.max_records)
}

// uint32 start_ip = 5;
void Command::clear_start_ip() {
  start_ip_ = 0u;
}
::google::protobuf::uint32 Command::start_ip() const {
  // @@protoc_insertion_point(field_get:zsearch.Command.start_ip)
  return start_ip_;
}
void Command::set_start_ip(::google::protobuf::uint32 value) {
  
  start_ip_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Command.start_ip)
}

// uint32 stop_ip = 6;
void Command::clear_stop_ip() {
  stop_ip_ = 0u;
}
::google::protobuf::uint32 Command::stop_ip() const {
  // @@protoc_insertion_point(field_get:zsearch.Command.stop_ip)
  return stop_ip_;
}
void Command::set_stop_ip(::google::protobuf::uint32 value) {
  
  stop_ip_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Command.stop_ip)
}

// repeated .zsearch.MozillaOneCRLEntry one_crl_entries = 7;
int Command::one_crl_entries_size() const {
  return one_crl_entries_.size();
}
void Command::clear_one_crl_entries() {
  one_crl_entries_.Clear();
}
const ::zsearch::MozillaOneCRLEntry& Command::one_crl_entries(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.Command.one_crl_entries)
  return one_crl_entries_.Get(index);
}
::zsearch::MozillaOneCRLEntry* Command::mutable_one_crl_entries(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.Command.one_crl_entries)
  return one_crl_entries_.Mutable(index);
}
::zsearch::MozillaOneCRLEntry* Command::add_one_crl_entries() {
  // @@protoc_insertion_point(field_add:zsearch.Command.one_crl_entries)
  return one_crl_entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::zsearch::MozillaOneCRLEntry >*
Command::mutable_one_crl_entries() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.Command.one_crl_entries)
  return &one_crl_entries_;
}
const ::google::protobuf::RepeatedPtrField< ::zsearch::MozillaOneCRLEntry >&
Command::one_crl_entries() const {
  // @@protoc_insertion_point(field_list:zsearch.Command.one_crl_entries)
  return one_crl_entries_;
}

// uint32 threads = 8;
void Command::clear_threads() {
  threads_ = 0u;
}
::google::protobuf::uint32 Command::threads() const {
  // @@protoc_insertion_point(field_get:zsearch.Command.threads)
  return threads_;
}
void Command::set_threads(::google::protobuf::uint32 value) {
  
  threads_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Command.threads)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnonymousStoreStatistics::kTotalRecordsFieldNumber;
const int AnonymousStoreStatistics::kRecordsAddedLastResetFieldNumber;
const int AnonymousStoreStatistics::kRecordsUpdatedLastResetFieldNumber;
const int AnonymousStoreStatistics::kRecordsUnchangedLastResetFieldNumber;
const int AnonymousStoreStatistics::kRecordsReceivedFieldNumber;
const int AnonymousStoreStatistics::kRecordsInRedisQueueFieldNumber;
const int AnonymousStoreStatistics::kRedisQueueNameFieldNumber;
const int AnonymousStoreStatistics::kQueueTypeFieldNumber;
const int AnonymousStoreStatistics::kWorkerThreadsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnonymousStoreStatistics::AnonymousStoreStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.AnonymousStoreStatistics)
}
AnonymousStoreStatistics::AnonymousStoreStatistics(const AnonymousStoreStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  redis_queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.redis_queue_name().size() > 0) {
    redis_queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redis_queue_name_);
  }
  queue_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.queue_type().size() > 0) {
    queue_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_type_);
  }
  ::memcpy(&total_records_, &from.total_records_,
    reinterpret_cast<char*>(&worker_threads_) -
    reinterpret_cast<char*>(&total_records_) + sizeof(worker_threads_));
  // @@protoc_insertion_point(copy_constructor:zsearch.AnonymousStoreStatistics)
}

void AnonymousStoreStatistics::SharedCtor() {
  redis_queue_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_records_, 0, reinterpret_cast<char*>(&worker_threads_) -
    reinterpret_cast<char*>(&total_records_) + sizeof(worker_threads_));
  _cached_size_ = 0;
}

AnonymousStoreStatistics::~AnonymousStoreStatistics() {
  // @@protoc_insertion_point(destructor:zsearch.AnonymousStoreStatistics)
  SharedDtor();
}

void AnonymousStoreStatistics::SharedDtor() {
  redis_queue_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AnonymousStoreStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnonymousStoreStatistics::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnonymousStoreStatistics& AnonymousStoreStatistics::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnonymousStoreStatistics* AnonymousStoreStatistics::New(::google::protobuf::Arena* arena) const {
  AnonymousStoreStatistics* n = new AnonymousStoreStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnonymousStoreStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.AnonymousStoreStatistics)
  redis_queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queue_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_records_, 0, reinterpret_cast<char*>(&worker_threads_) -
    reinterpret_cast<char*>(&total_records_) + sizeof(worker_threads_));
}

bool AnonymousStoreStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.AnonymousStoreStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 total_records = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_records_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 records_added_last_reset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &records_added_last_reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 records_updated_last_reset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &records_updated_last_reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 records_unchanged_last_reset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &records_unchanged_last_reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 records_received = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &records_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 records_in_redis_queue = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &records_in_redis_queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string redis_queue_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redis_queue_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->redis_queue_name().data(), this->redis_queue_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.AnonymousStoreStatistics.redis_queue_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string queue_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->queue_type().data(), this->queue_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.AnonymousStoreStatistics.queue_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 worker_threads = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worker_threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.AnonymousStoreStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.AnonymousStoreStatistics)
  return false;
#undef DO_
}

void AnonymousStoreStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.AnonymousStoreStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 total_records = 1;
  if (this->total_records() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->total_records(), output);
  }

  // uint64 records_added_last_reset = 2;
  if (this->records_added_last_reset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->records_added_last_reset(), output);
  }

  // uint64 records_updated_last_reset = 3;
  if (this->records_updated_last_reset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->records_updated_last_reset(), output);
  }

  // uint64 records_unchanged_last_reset = 4;
  if (this->records_unchanged_last_reset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->records_unchanged_last_reset(), output);
  }

  // uint64 records_received = 5;
  if (this->records_received() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->records_received(), output);
  }

  // uint32 records_in_redis_queue = 6;
  if (this->records_in_redis_queue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->records_in_redis_queue(), output);
  }

  // string redis_queue_name = 7;
  if (this->redis_queue_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->redis_queue_name().data(), this->redis_queue_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.AnonymousStoreStatistics.redis_queue_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->redis_queue_name(), output);
  }

  // string queue_type = 8;
  if (this->queue_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_type().data(), this->queue_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.AnonymousStoreStatistics.queue_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->queue_type(), output);
  }

  // uint32 worker_threads = 9;
  if (this->worker_threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->worker_threads(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.AnonymousStoreStatistics)
}

::google::protobuf::uint8* AnonymousStoreStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.AnonymousStoreStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 total_records = 1;
  if (this->total_records() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->total_records(), target);
  }

  // uint64 records_added_last_reset = 2;
  if (this->records_added_last_reset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->records_added_last_reset(), target);
  }

  // uint64 records_updated_last_reset = 3;
  if (this->records_updated_last_reset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->records_updated_last_reset(), target);
  }

  // uint64 records_unchanged_last_reset = 4;
  if (this->records_unchanged_last_reset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->records_unchanged_last_reset(), target);
  }

  // uint64 records_received = 5;
  if (this->records_received() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->records_received(), target);
  }

  // uint32 records_in_redis_queue = 6;
  if (this->records_in_redis_queue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->records_in_redis_queue(), target);
  }

  // string redis_queue_name = 7;
  if (this->redis_queue_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->redis_queue_name().data(), this->redis_queue_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.AnonymousStoreStatistics.redis_queue_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->redis_queue_name(), target);
  }

  // string queue_type = 8;
  if (this->queue_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->queue_type().data(), this->queue_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.AnonymousStoreStatistics.queue_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->queue_type(), target);
  }

  // uint32 worker_threads = 9;
  if (this->worker_threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->worker_threads(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.AnonymousStoreStatistics)
  return target;
}

size_t AnonymousStoreStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.AnonymousStoreStatistics)
  size_t total_size = 0;

  // string redis_queue_name = 7;
  if (this->redis_queue_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->redis_queue_name());
  }

  // string queue_type = 8;
  if (this->queue_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->queue_type());
  }

  // uint64 total_records = 1;
  if (this->total_records() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_records());
  }

  // uint64 records_added_last_reset = 2;
  if (this->records_added_last_reset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->records_added_last_reset());
  }

  // uint64 records_updated_last_reset = 3;
  if (this->records_updated_last_reset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->records_updated_last_reset());
  }

  // uint64 records_unchanged_last_reset = 4;
  if (this->records_unchanged_last_reset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->records_unchanged_last_reset());
  }

  // uint64 records_received = 5;
  if (this->records_received() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->records_received());
  }

  // uint32 records_in_redis_queue = 6;
  if (this->records_in_redis_queue() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->records_in_redis_queue());
  }

  // uint32 worker_threads = 9;
  if (this->worker_threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worker_threads());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnonymousStoreStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.AnonymousStoreStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const AnonymousStoreStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnonymousStoreStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.AnonymousStoreStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.AnonymousStoreStatistics)
    MergeFrom(*source);
  }
}

void AnonymousStoreStatistics::MergeFrom(const AnonymousStoreStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.AnonymousStoreStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.redis_queue_name().size() > 0) {

    redis_queue_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redis_queue_name_);
  }
  if (from.queue_type().size() > 0) {

    queue_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.queue_type_);
  }
  if (from.total_records() != 0) {
    set_total_records(from.total_records());
  }
  if (from.records_added_last_reset() != 0) {
    set_records_added_last_reset(from.records_added_last_reset());
  }
  if (from.records_updated_last_reset() != 0) {
    set_records_updated_last_reset(from.records_updated_last_reset());
  }
  if (from.records_unchanged_last_reset() != 0) {
    set_records_unchanged_last_reset(from.records_unchanged_last_reset());
  }
  if (from.records_received() != 0) {
    set_records_received(from.records_received());
  }
  if (from.records_in_redis_queue() != 0) {
    set_records_in_redis_queue(from.records_in_redis_queue());
  }
  if (from.worker_threads() != 0) {
    set_worker_threads(from.worker_threads());
  }
}

void AnonymousStoreStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.AnonymousStoreStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnonymousStoreStatistics::CopyFrom(const AnonymousStoreStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.AnonymousStoreStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnonymousStoreStatistics::IsInitialized() const {
  return true;
}

void AnonymousStoreStatistics::Swap(AnonymousStoreStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnonymousStoreStatistics::InternalSwap(AnonymousStoreStatistics* other) {
  redis_queue_name_.Swap(&other->redis_queue_name_);
  queue_type_.Swap(&other->queue_type_);
  std::swap(total_records_, other->total_records_);
  std::swap(records_added_last_reset_, other->records_added_last_reset_);
  std::swap(records_updated_last_reset_, other->records_updated_last_reset_);
  std::swap(records_unchanged_last_reset_, other->records_unchanged_last_reset_);
  std::swap(records_received_, other->records_received_);
  std::swap(records_in_redis_queue_, other->records_in_redis_queue_);
  std::swap(worker_threads_, other->worker_threads_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnonymousStoreStatistics::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnonymousStoreStatistics

// uint64 total_records = 1;
void AnonymousStoreStatistics::clear_total_records() {
  total_records_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AnonymousStoreStatistics::total_records() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousStoreStatistics.total_records)
  return total_records_;
}
void AnonymousStoreStatistics::set_total_records(::google::protobuf::uint64 value) {
  
  total_records_ = value;
  // @@protoc_insertion_point(field_set:zsearch.AnonymousStoreStatistics.total_records)
}

// uint64 records_added_last_reset = 2;
void AnonymousStoreStatistics::clear_records_added_last_reset() {
  records_added_last_reset_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AnonymousStoreStatistics::records_added_last_reset() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousStoreStatistics.records_added_last_reset)
  return records_added_last_reset_;
}
void AnonymousStoreStatistics::set_records_added_last_reset(::google::protobuf::uint64 value) {
  
  records_added_last_reset_ = value;
  // @@protoc_insertion_point(field_set:zsearch.AnonymousStoreStatistics.records_added_last_reset)
}

// uint64 records_updated_last_reset = 3;
void AnonymousStoreStatistics::clear_records_updated_last_reset() {
  records_updated_last_reset_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AnonymousStoreStatistics::records_updated_last_reset() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousStoreStatistics.records_updated_last_reset)
  return records_updated_last_reset_;
}
void AnonymousStoreStatistics::set_records_updated_last_reset(::google::protobuf::uint64 value) {
  
  records_updated_last_reset_ = value;
  // @@protoc_insertion_point(field_set:zsearch.AnonymousStoreStatistics.records_updated_last_reset)
}

// uint64 records_unchanged_last_reset = 4;
void AnonymousStoreStatistics::clear_records_unchanged_last_reset() {
  records_unchanged_last_reset_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AnonymousStoreStatistics::records_unchanged_last_reset() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousStoreStatistics.records_unchanged_last_reset)
  return records_unchanged_last_reset_;
}
void AnonymousStoreStatistics::set_records_unchanged_last_reset(::google::protobuf::uint64 value) {
  
  records_unchanged_last_reset_ = value;
  // @@protoc_insertion_point(field_set:zsearch.AnonymousStoreStatistics.records_unchanged_last_reset)
}

// uint64 records_received = 5;
void AnonymousStoreStatistics::clear_records_received() {
  records_received_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 AnonymousStoreStatistics::records_received() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousStoreStatistics.records_received)
  return records_received_;
}
void AnonymousStoreStatistics::set_records_received(::google::protobuf::uint64 value) {
  
  records_received_ = value;
  // @@protoc_insertion_point(field_set:zsearch.AnonymousStoreStatistics.records_received)
}

// uint32 records_in_redis_queue = 6;
void AnonymousStoreStatistics::clear_records_in_redis_queue() {
  records_in_redis_queue_ = 0u;
}
::google::protobuf::uint32 AnonymousStoreStatistics::records_in_redis_queue() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousStoreStatistics.records_in_redis_queue)
  return records_in_redis_queue_;
}
void AnonymousStoreStatistics::set_records_in_redis_queue(::google::protobuf::uint32 value) {
  
  records_in_redis_queue_ = value;
  // @@protoc_insertion_point(field_set:zsearch.AnonymousStoreStatistics.records_in_redis_queue)
}

// string redis_queue_name = 7;
void AnonymousStoreStatistics::clear_redis_queue_name() {
  redis_queue_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnonymousStoreStatistics::redis_queue_name() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousStoreStatistics.redis_queue_name)
  return redis_queue_name_.GetNoArena();
}
void AnonymousStoreStatistics::set_redis_queue_name(const ::std::string& value) {
  
  redis_queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.AnonymousStoreStatistics.redis_queue_name)
}
#if LANG_CXX11
void AnonymousStoreStatistics::set_redis_queue_name(::std::string&& value) {
  
  redis_queue_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.AnonymousStoreStatistics.redis_queue_name)
}
#endif
void AnonymousStoreStatistics::set_redis_queue_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  redis_queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.AnonymousStoreStatistics.redis_queue_name)
}
void AnonymousStoreStatistics::set_redis_queue_name(const char* value, size_t size) {
  
  redis_queue_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.AnonymousStoreStatistics.redis_queue_name)
}
::std::string* AnonymousStoreStatistics::mutable_redis_queue_name() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.AnonymousStoreStatistics.redis_queue_name)
  return redis_queue_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnonymousStoreStatistics::release_redis_queue_name() {
  // @@protoc_insertion_point(field_release:zsearch.AnonymousStoreStatistics.redis_queue_name)
  
  return redis_queue_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnonymousStoreStatistics::set_allocated_redis_queue_name(::std::string* redis_queue_name) {
  if (redis_queue_name != NULL) {
    
  } else {
    
  }
  redis_queue_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redis_queue_name);
  // @@protoc_insertion_point(field_set_allocated:zsearch.AnonymousStoreStatistics.redis_queue_name)
}

// string queue_type = 8;
void AnonymousStoreStatistics::clear_queue_type() {
  queue_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnonymousStoreStatistics::queue_type() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousStoreStatistics.queue_type)
  return queue_type_.GetNoArena();
}
void AnonymousStoreStatistics::set_queue_type(const ::std::string& value) {
  
  queue_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.AnonymousStoreStatistics.queue_type)
}
#if LANG_CXX11
void AnonymousStoreStatistics::set_queue_type(::std::string&& value) {
  
  queue_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.AnonymousStoreStatistics.queue_type)
}
#endif
void AnonymousStoreStatistics::set_queue_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  queue_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.AnonymousStoreStatistics.queue_type)
}
void AnonymousStoreStatistics::set_queue_type(const char* value, size_t size) {
  
  queue_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.AnonymousStoreStatistics.queue_type)
}
::std::string* AnonymousStoreStatistics::mutable_queue_type() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.AnonymousStoreStatistics.queue_type)
  return queue_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnonymousStoreStatistics::release_queue_type() {
  // @@protoc_insertion_point(field_release:zsearch.AnonymousStoreStatistics.queue_type)
  
  return queue_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnonymousStoreStatistics::set_allocated_queue_type(::std::string* queue_type) {
  if (queue_type != NULL) {
    
  } else {
    
  }
  queue_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), queue_type);
  // @@protoc_insertion_point(field_set_allocated:zsearch.AnonymousStoreStatistics.queue_type)
}

// uint32 worker_threads = 9;
void AnonymousStoreStatistics::clear_worker_threads() {
  worker_threads_ = 0u;
}
::google::protobuf::uint32 AnonymousStoreStatistics::worker_threads() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousStoreStatistics.worker_threads)
  return worker_threads_;
}
void AnonymousStoreStatistics::set_worker_threads(::google::protobuf::uint32 value) {
  
  worker_threads_ = value;
  // @@protoc_insertion_point(field_set:zsearch.AnonymousStoreStatistics.worker_threads)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StatisticsPair::kPortFieldNumber;
const int StatisticsPair::kProtocolFieldNumber;
const int StatisticsPair::kSubprotocolFieldNumber;
const int StatisticsPair::kStatisticsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StatisticsPair::StatisticsPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.StatisticsPair)
}
StatisticsPair::StatisticsPair(const StatisticsPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_statistics()) {
    statistics_ = new ::zsearch::AnonymousStoreStatistics(*from.statistics_);
  } else {
    statistics_ = NULL;
  }
  ::memcpy(&port_, &from.port_,
    reinterpret_cast<char*>(&subprotocol_) -
    reinterpret_cast<char*>(&port_) + sizeof(subprotocol_));
  // @@protoc_insertion_point(copy_constructor:zsearch.StatisticsPair)
}

void StatisticsPair::SharedCtor() {
  ::memset(&statistics_, 0, reinterpret_cast<char*>(&subprotocol_) -
    reinterpret_cast<char*>(&statistics_) + sizeof(subprotocol_));
  _cached_size_ = 0;
}

StatisticsPair::~StatisticsPair() {
  // @@protoc_insertion_point(destructor:zsearch.StatisticsPair)
  SharedDtor();
}

void StatisticsPair::SharedDtor() {
  if (this != internal_default_instance()) {
    delete statistics_;
  }
}

void StatisticsPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatisticsPair::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StatisticsPair& StatisticsPair::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

StatisticsPair* StatisticsPair::New(::google::protobuf::Arena* arena) const {
  StatisticsPair* n = new StatisticsPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatisticsPair::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.StatisticsPair)
  if (GetArenaNoVirtual() == NULL && statistics_ != NULL) {
    delete statistics_;
  }
  statistics_ = NULL;
  ::memset(&port_, 0, reinterpret_cast<char*>(&subprotocol_) -
    reinterpret_cast<char*>(&port_) + sizeof(subprotocol_));
}

bool StatisticsPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.StatisticsPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 protocol = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 subprotocol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subprotocol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.AnonymousStoreStatistics statistics = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statistics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.StatisticsPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.StatisticsPair)
  return false;
#undef DO_
}

void StatisticsPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.StatisticsPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  // uint32 protocol = 2;
  if (this->protocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->protocol(), output);
  }

  // uint32 subprotocol = 3;
  if (this->subprotocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->subprotocol(), output);
  }

  // .zsearch.AnonymousStoreStatistics statistics = 4;
  if (this->has_statistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->statistics_, output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.StatisticsPair)
}

::google::protobuf::uint8* StatisticsPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.StatisticsPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port(), target);
  }

  // uint32 protocol = 2;
  if (this->protocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->protocol(), target);
  }

  // uint32 subprotocol = 3;
  if (this->subprotocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->subprotocol(), target);
  }

  // .zsearch.AnonymousStoreStatistics statistics = 4;
  if (this->has_statistics()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->statistics_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.StatisticsPair)
  return target;
}

size_t StatisticsPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.StatisticsPair)
  size_t total_size = 0;

  // .zsearch.AnonymousStoreStatistics statistics = 4;
  if (this->has_statistics()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->statistics_);
  }

  // uint32 port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 protocol = 2;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->protocol());
  }

  // uint32 subprotocol = 3;
  if (this->subprotocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->subprotocol());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticsPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.StatisticsPair)
  GOOGLE_DCHECK_NE(&from, this);
  const StatisticsPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StatisticsPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.StatisticsPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.StatisticsPair)
    MergeFrom(*source);
  }
}

void StatisticsPair::MergeFrom(const StatisticsPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.StatisticsPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_statistics()) {
    mutable_statistics()->::zsearch::AnonymousStoreStatistics::MergeFrom(from.statistics());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.protocol() != 0) {
    set_protocol(from.protocol());
  }
  if (from.subprotocol() != 0) {
    set_subprotocol(from.subprotocol());
  }
}

void StatisticsPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.StatisticsPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticsPair::CopyFrom(const StatisticsPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.StatisticsPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticsPair::IsInitialized() const {
  return true;
}

void StatisticsPair::Swap(StatisticsPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatisticsPair::InternalSwap(StatisticsPair* other) {
  std::swap(statistics_, other->statistics_);
  std::swap(port_, other->port_);
  std::swap(protocol_, other->protocol_);
  std::swap(subprotocol_, other->subprotocol_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatisticsPair::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatisticsPair

// uint32 port = 1;
void StatisticsPair::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 StatisticsPair::port() const {
  // @@protoc_insertion_point(field_get:zsearch.StatisticsPair.port)
  return port_;
}
void StatisticsPair::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:zsearch.StatisticsPair.port)
}

// uint32 protocol = 2;
void StatisticsPair::clear_protocol() {
  protocol_ = 0u;
}
::google::protobuf::uint32 StatisticsPair::protocol() const {
  // @@protoc_insertion_point(field_get:zsearch.StatisticsPair.protocol)
  return protocol_;
}
void StatisticsPair::set_protocol(::google::protobuf::uint32 value) {
  
  protocol_ = value;
  // @@protoc_insertion_point(field_set:zsearch.StatisticsPair.protocol)
}

// uint32 subprotocol = 3;
void StatisticsPair::clear_subprotocol() {
  subprotocol_ = 0u;
}
::google::protobuf::uint32 StatisticsPair::subprotocol() const {
  // @@protoc_insertion_point(field_get:zsearch.StatisticsPair.subprotocol)
  return subprotocol_;
}
void StatisticsPair::set_subprotocol(::google::protobuf::uint32 value) {
  
  subprotocol_ = value;
  // @@protoc_insertion_point(field_set:zsearch.StatisticsPair.subprotocol)
}

// .zsearch.AnonymousStoreStatistics statistics = 4;
bool StatisticsPair::has_statistics() const {
  return this != internal_default_instance() && statistics_ != NULL;
}
void StatisticsPair::clear_statistics() {
  if (GetArenaNoVirtual() == NULL && statistics_ != NULL) delete statistics_;
  statistics_ = NULL;
}
const ::zsearch::AnonymousStoreStatistics& StatisticsPair::statistics() const {
  // @@protoc_insertion_point(field_get:zsearch.StatisticsPair.statistics)
  return statistics_ != NULL ? *statistics_
                         : *::zsearch::AnonymousStoreStatistics::internal_default_instance();
}
::zsearch::AnonymousStoreStatistics* StatisticsPair::mutable_statistics() {
  
  if (statistics_ == NULL) {
    statistics_ = new ::zsearch::AnonymousStoreStatistics;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.StatisticsPair.statistics)
  return statistics_;
}
::zsearch::AnonymousStoreStatistics* StatisticsPair::release_statistics() {
  // @@protoc_insertion_point(field_release:zsearch.StatisticsPair.statistics)
  
  ::zsearch::AnonymousStoreStatistics* temp = statistics_;
  statistics_ = NULL;
  return temp;
}
void StatisticsPair::set_allocated_statistics(::zsearch::AnonymousStoreStatistics* statistics) {
  delete statistics_;
  statistics_ = statistics;
  if (statistics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.StatisticsPair.statistics)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StoreStatistics::kGlobalFieldNumber;
const int StoreStatistics::kProtocolsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StoreStatistics::StoreStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.StoreStatistics)
}
StoreStatistics::StoreStatistics(const StoreStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      protocols_(from.protocols_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_global()) {
    global_ = new ::zsearch::AnonymousStoreStatistics(*from.global_);
  } else {
    global_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zsearch.StoreStatistics)
}

void StoreStatistics::SharedCtor() {
  global_ = NULL;
  _cached_size_ = 0;
}

StoreStatistics::~StoreStatistics() {
  // @@protoc_insertion_point(destructor:zsearch.StoreStatistics)
  SharedDtor();
}

void StoreStatistics::SharedDtor() {
  if (this != internal_default_instance()) {
    delete global_;
  }
}

void StoreStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreStatistics::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StoreStatistics& StoreStatistics::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

StoreStatistics* StoreStatistics::New(::google::protobuf::Arena* arena) const {
  StoreStatistics* n = new StoreStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StoreStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.StoreStatistics)
  protocols_.Clear();
  if (GetArenaNoVirtual() == NULL && global_ != NULL) {
    delete global_;
  }
  global_ = NULL;
}

bool StoreStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.StoreStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .zsearch.AnonymousStoreStatistics global = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_global()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zsearch.StatisticsPair protocols = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_protocols()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.StoreStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.StoreStatistics)
  return false;
#undef DO_
}

void StoreStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.StoreStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zsearch.AnonymousStoreStatistics global = 1;
  if (this->has_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->global_, output);
  }

  // repeated .zsearch.StatisticsPair protocols = 2;
  for (unsigned int i = 0, n = this->protocols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->protocols(i), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.StoreStatistics)
}

::google::protobuf::uint8* StoreStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.StoreStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zsearch.AnonymousStoreStatistics global = 1;
  if (this->has_global()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->global_, deterministic, target);
  }

  // repeated .zsearch.StatisticsPair protocols = 2;
  for (unsigned int i = 0, n = this->protocols_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->protocols(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.StoreStatistics)
  return target;
}

size_t StoreStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.StoreStatistics)
  size_t total_size = 0;

  // repeated .zsearch.StatisticsPair protocols = 2;
  {
    unsigned int count = this->protocols_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->protocols(i));
    }
  }

  // .zsearch.AnonymousStoreStatistics global = 1;
  if (this->has_global()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->global_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.StoreStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StoreStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.StoreStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.StoreStatistics)
    MergeFrom(*source);
  }
}

void StoreStatistics::MergeFrom(const StoreStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.StoreStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  protocols_.MergeFrom(from.protocols_);
  if (from.has_global()) {
    mutable_global()->::zsearch::AnonymousStoreStatistics::MergeFrom(from.global());
  }
}

void StoreStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.StoreStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreStatistics::CopyFrom(const StoreStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.StoreStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreStatistics::IsInitialized() const {
  return true;
}

void StoreStatistics::Swap(StoreStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StoreStatistics::InternalSwap(StoreStatistics* other) {
  protocols_.InternalSwap(&other->protocols_);
  std::swap(global_, other->global_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StoreStatistics::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StoreStatistics

// .zsearch.AnonymousStoreStatistics global = 1;
bool StoreStatistics::has_global() const {
  return this != internal_default_instance() && global_ != NULL;
}
void StoreStatistics::clear_global() {
  if (GetArenaNoVirtual() == NULL && global_ != NULL) delete global_;
  global_ = NULL;
}
const ::zsearch::AnonymousStoreStatistics& StoreStatistics::global() const {
  // @@protoc_insertion_point(field_get:zsearch.StoreStatistics.global)
  return global_ != NULL ? *global_
                         : *::zsearch::AnonymousStoreStatistics::internal_default_instance();
}
::zsearch::AnonymousStoreStatistics* StoreStatistics::mutable_global() {
  
  if (global_ == NULL) {
    global_ = new ::zsearch::AnonymousStoreStatistics;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.StoreStatistics.global)
  return global_;
}
::zsearch::AnonymousStoreStatistics* StoreStatistics::release_global() {
  // @@protoc_insertion_point(field_release:zsearch.StoreStatistics.global)
  
  ::zsearch::AnonymousStoreStatistics* temp = global_;
  global_ = NULL;
  return temp;
}
void StoreStatistics::set_allocated_global(::zsearch::AnonymousStoreStatistics* global) {
  delete global_;
  global_ = global;
  if (global) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.StoreStatistics.global)
}

// repeated .zsearch.StatisticsPair protocols = 2;
int StoreStatistics::protocols_size() const {
  return protocols_.size();
}
void StoreStatistics::clear_protocols() {
  protocols_.Clear();
}
const ::zsearch::StatisticsPair& StoreStatistics::protocols(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.StoreStatistics.protocols)
  return protocols_.Get(index);
}
::zsearch::StatisticsPair* StoreStatistics::mutable_protocols(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.StoreStatistics.protocols)
  return protocols_.Mutable(index);
}
::zsearch::StatisticsPair* StoreStatistics::add_protocols() {
  // @@protoc_insertion_point(field_add:zsearch.StoreStatistics.protocols)
  return protocols_.Add();
}
::google::protobuf::RepeatedPtrField< ::zsearch::StatisticsPair >*
StoreStatistics::mutable_protocols() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.StoreStatistics.protocols)
  return &protocols_;
}
const ::google::protobuf::RepeatedPtrField< ::zsearch::StatisticsPair >&
StoreStatistics::protocols() const {
  // @@protoc_insertion_point(field_list:zsearch.StoreStatistics.protocols)
  return protocols_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ServerStatistics::ServerStatistics_StoreStatisticsEntry::ServerStatistics_StoreStatisticsEntry() {}
ServerStatistics::ServerStatistics_StoreStatisticsEntry::ServerStatistics_StoreStatisticsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ServerStatistics::ServerStatistics_StoreStatisticsEntry::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[6];
}
void ServerStatistics::ServerStatistics_StoreStatisticsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ServerStatistics::ServerStatistics_StoreStatisticsEntry::MergeFrom(const ServerStatistics_StoreStatisticsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ServerStatistics::ServerStatistics_AnonymousStoreStatisticsEntry::ServerStatistics_AnonymousStoreStatisticsEntry() {}
ServerStatistics::ServerStatistics_AnonymousStoreStatisticsEntry::ServerStatistics_AnonymousStoreStatisticsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ServerStatistics::ServerStatistics_AnonymousStoreStatisticsEntry::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[7];
}
void ServerStatistics::ServerStatistics_AnonymousStoreStatisticsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ServerStatistics::ServerStatistics_AnonymousStoreStatisticsEntry::MergeFrom(const ServerStatistics_AnonymousStoreStatisticsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerStatistics::kStoreStatisticsFieldNumber;
const int ServerStatistics::kAnonymousStoreStatisticsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerStatistics::ServerStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.ServerStatistics)
}
ServerStatistics::ServerStatistics(const ServerStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  store_statistics_.MergeFrom(from.store_statistics_);
  anonymous_store_statistics_.MergeFrom(from.anonymous_store_statistics_);
  // @@protoc_insertion_point(copy_constructor:zsearch.ServerStatistics)
}

void ServerStatistics::SharedCtor() {
  _cached_size_ = 0;
}

ServerStatistics::~ServerStatistics() {
  // @@protoc_insertion_point(destructor:zsearch.ServerStatistics)
  SharedDtor();
}

void ServerStatistics::SharedDtor() {
}

void ServerStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerStatistics::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerStatistics& ServerStatistics::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerStatistics* ServerStatistics::New(::google::protobuf::Arena* arena) const {
  ServerStatistics* n = new ServerStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.ServerStatistics)
  store_statistics_.Clear();
  anonymous_store_statistics_.Clear();
}

bool ServerStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.ServerStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .zsearch.StoreStatistics> store_statistics = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          ServerStatistics_StoreStatisticsEntry::Parser< ::google::protobuf::internal::MapField<
              ServerStatistics_StoreStatisticsEntry,
              ::std::string, ::zsearch::StoreStatistics,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::zsearch::StoreStatistics > > parser(&store_statistics_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.ServerStatistics.StoreStatisticsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .zsearch.AnonymousStoreStatistics> anonymous_store_statistics = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          ServerStatistics_AnonymousStoreStatisticsEntry::Parser< ::google::protobuf::internal::MapField<
              ServerStatistics_AnonymousStoreStatisticsEntry,
              ::std::string, ::zsearch::AnonymousStoreStatistics,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::zsearch::AnonymousStoreStatistics > > parser(&anonymous_store_statistics_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.ServerStatistics.AnonymousStoreStatisticsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.ServerStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.ServerStatistics)
  return false;
#undef DO_
}

void ServerStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.ServerStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .zsearch.StoreStatistics> store_statistics = 1;
  if (!this->store_statistics().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::zsearch::StoreStatistics >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "zsearch.ServerStatistics.StoreStatisticsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->store_statistics().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->store_statistics().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::zsearch::StoreStatistics >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::zsearch::StoreStatistics >::const_iterator
          it = this->store_statistics().begin();
          it != this->store_statistics().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ServerStatistics_StoreStatisticsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(store_statistics_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ServerStatistics_StoreStatisticsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::zsearch::StoreStatistics >::const_iterator
          it = this->store_statistics().begin();
          it != this->store_statistics().end(); ++it) {
        entry.reset(store_statistics_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .zsearch.AnonymousStoreStatistics> anonymous_store_statistics = 2;
  if (!this->anonymous_store_statistics().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::zsearch::AnonymousStoreStatistics >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "zsearch.ServerStatistics.AnonymousStoreStatisticsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->anonymous_store_statistics().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->anonymous_store_statistics().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::zsearch::AnonymousStoreStatistics >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::zsearch::AnonymousStoreStatistics >::const_iterator
          it = this->anonymous_store_statistics().begin();
          it != this->anonymous_store_statistics().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ServerStatistics_AnonymousStoreStatisticsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(anonymous_store_statistics_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ServerStatistics_AnonymousStoreStatisticsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::zsearch::AnonymousStoreStatistics >::const_iterator
          it = this->anonymous_store_statistics().begin();
          it != this->anonymous_store_statistics().end(); ++it) {
        entry.reset(anonymous_store_statistics_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:zsearch.ServerStatistics)
}

::google::protobuf::uint8* ServerStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.ServerStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .zsearch.StoreStatistics> store_statistics = 1;
  if (!this->store_statistics().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::zsearch::StoreStatistics >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "zsearch.ServerStatistics.StoreStatisticsEntry.key");
      }
    };

    if (deterministic &&
        this->store_statistics().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->store_statistics().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::zsearch::StoreStatistics >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::zsearch::StoreStatistics >::const_iterator
          it = this->store_statistics().begin();
          it != this->store_statistics().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ServerStatistics_StoreStatisticsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(store_statistics_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ServerStatistics_StoreStatisticsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::zsearch::StoreStatistics >::const_iterator
          it = this->store_statistics().begin();
          it != this->store_statistics().end(); ++it) {
        entry.reset(store_statistics_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .zsearch.AnonymousStoreStatistics> anonymous_store_statistics = 2;
  if (!this->anonymous_store_statistics().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::zsearch::AnonymousStoreStatistics >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "zsearch.ServerStatistics.AnonymousStoreStatisticsEntry.key");
      }
    };

    if (deterministic &&
        this->anonymous_store_statistics().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->anonymous_store_statistics().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::zsearch::AnonymousStoreStatistics >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::zsearch::AnonymousStoreStatistics >::const_iterator
          it = this->anonymous_store_statistics().begin();
          it != this->anonymous_store_statistics().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ServerStatistics_AnonymousStoreStatisticsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(anonymous_store_statistics_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ServerStatistics_AnonymousStoreStatisticsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::zsearch::AnonymousStoreStatistics >::const_iterator
          it = this->anonymous_store_statistics().begin();
          it != this->anonymous_store_statistics().end(); ++it) {
        entry.reset(anonymous_store_statistics_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.ServerStatistics)
  return target;
}

size_t ServerStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.ServerStatistics)
  size_t total_size = 0;

  // map<string, .zsearch.StoreStatistics> store_statistics = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->store_statistics_size());
  {
    ::google::protobuf::scoped_ptr<ServerStatistics_StoreStatisticsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::zsearch::StoreStatistics >::const_iterator
        it = this->store_statistics().begin();
        it != this->store_statistics().end(); ++it) {
      entry.reset(store_statistics_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .zsearch.AnonymousStoreStatistics> anonymous_store_statistics = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->anonymous_store_statistics_size());
  {
    ::google::protobuf::scoped_ptr<ServerStatistics_AnonymousStoreStatisticsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::zsearch::AnonymousStoreStatistics >::const_iterator
        it = this->anonymous_store_statistics().begin();
        it != this->anonymous_store_statistics().end(); ++it) {
      entry.reset(anonymous_store_statistics_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.ServerStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.ServerStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.ServerStatistics)
    MergeFrom(*source);
  }
}

void ServerStatistics::MergeFrom(const ServerStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.ServerStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  store_statistics_.MergeFrom(from.store_statistics_);
  anonymous_store_statistics_.MergeFrom(from.anonymous_store_statistics_);
}

void ServerStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.ServerStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerStatistics::CopyFrom(const ServerStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.ServerStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerStatistics::IsInitialized() const {
  return true;
}

void ServerStatistics::Swap(ServerStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerStatistics::InternalSwap(ServerStatistics* other) {
  store_statistics_.Swap(&other->store_statistics_);
  anonymous_store_statistics_.Swap(&other->anonymous_store_statistics_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerStatistics::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerStatistics

// map<string, .zsearch.StoreStatistics> store_statistics = 1;
int ServerStatistics::store_statistics_size() const {
  return store_statistics_.size();
}
void ServerStatistics::clear_store_statistics() {
  store_statistics_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::zsearch::StoreStatistics >&
ServerStatistics::store_statistics() const {
  // @@protoc_insertion_point(field_map:zsearch.ServerStatistics.store_statistics)
  return store_statistics_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::zsearch::StoreStatistics >*
ServerStatistics::mutable_store_statistics() {
  // @@protoc_insertion_point(field_mutable_map:zsearch.ServerStatistics.store_statistics)
  return store_statistics_.MutableMap();
}

// map<string, .zsearch.AnonymousStoreStatistics> anonymous_store_statistics = 2;
int ServerStatistics::anonymous_store_statistics_size() const {
  return anonymous_store_statistics_.size();
}
void ServerStatistics::clear_anonymous_store_statistics() {
  anonymous_store_statistics_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::zsearch::AnonymousStoreStatistics >&
ServerStatistics::anonymous_store_statistics() const {
  // @@protoc_insertion_point(field_map:zsearch.ServerStatistics.anonymous_store_statistics)
  return anonymous_store_statistics_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::zsearch::AnonymousStoreStatistics >*
ServerStatistics::mutable_anonymous_store_statistics() {
  // @@protoc_insertion_point(field_mutable_map:zsearch.ServerStatistics.anonymous_store_statistics)
  return anonymous_store_statistics_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PruneStatistics::kKeyFieldNumber;
const int PruneStatistics::kRecordsPrunedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PruneStatistics::PruneStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.PruneStatistics)
}
PruneStatistics::PruneStatistics(const PruneStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::zsearch::AnonymousKey(*from.key_);
  } else {
    key_ = NULL;
  }
  records_pruned_ = from.records_pruned_;
  // @@protoc_insertion_point(copy_constructor:zsearch.PruneStatistics)
}

void PruneStatistics::SharedCtor() {
  ::memset(&key_, 0, reinterpret_cast<char*>(&records_pruned_) -
    reinterpret_cast<char*>(&key_) + sizeof(records_pruned_));
  _cached_size_ = 0;
}

PruneStatistics::~PruneStatistics() {
  // @@protoc_insertion_point(destructor:zsearch.PruneStatistics)
  SharedDtor();
}

void PruneStatistics::SharedDtor() {
  if (this != internal_default_instance()) {
    delete key_;
  }
}

void PruneStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PruneStatistics::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PruneStatistics& PruneStatistics::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

PruneStatistics* PruneStatistics::New(::google::protobuf::Arena* arena) const {
  PruneStatistics* n = new PruneStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PruneStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.PruneStatistics)
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  records_pruned_ = GOOGLE_ULONGLONG(0);
}

bool PruneStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.PruneStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .zsearch.AnonymousKey key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 records_pruned = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &records_pruned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.PruneStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.PruneStatistics)
  return false;
#undef DO_
}

void PruneStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.PruneStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zsearch.AnonymousKey key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // uint64 records_pruned = 2;
  if (this->records_pruned() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->records_pruned(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.PruneStatistics)
}

::google::protobuf::uint8* PruneStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.PruneStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zsearch.AnonymousKey key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->key_, deterministic, target);
  }

  // uint64 records_pruned = 2;
  if (this->records_pruned() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->records_pruned(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.PruneStatistics)
  return target;
}

size_t PruneStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.PruneStatistics)
  size_t total_size = 0;

  // .zsearch.AnonymousKey key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // uint64 records_pruned = 2;
  if (this->records_pruned() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->records_pruned());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PruneStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.PruneStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const PruneStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PruneStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.PruneStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.PruneStatistics)
    MergeFrom(*source);
  }
}

void PruneStatistics::MergeFrom(const PruneStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.PruneStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    mutable_key()->::zsearch::AnonymousKey::MergeFrom(from.key());
  }
  if (from.records_pruned() != 0) {
    set_records_pruned(from.records_pruned());
  }
}

void PruneStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.PruneStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PruneStatistics::CopyFrom(const PruneStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.PruneStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PruneStatistics::IsInitialized() const {
  return true;
}

void PruneStatistics::Swap(PruneStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PruneStatistics::InternalSwap(PruneStatistics* other) {
  std::swap(key_, other->key_);
  std::swap(records_pruned_, other->records_pruned_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PruneStatistics::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PruneStatistics

// .zsearch.AnonymousKey key = 1;
bool PruneStatistics::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void PruneStatistics::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::zsearch::AnonymousKey& PruneStatistics::key() const {
  // @@protoc_insertion_point(field_get:zsearch.PruneStatistics.key)
  return key_ != NULL ? *key_
                         : *::zsearch::AnonymousKey::internal_default_instance();
}
::zsearch::AnonymousKey* PruneStatistics::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::zsearch::AnonymousKey;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.PruneStatistics.key)
  return key_;
}
::zsearch::AnonymousKey* PruneStatistics::release_key() {
  // @@protoc_insertion_point(field_release:zsearch.PruneStatistics.key)
  
  ::zsearch::AnonymousKey* temp = key_;
  key_ = NULL;
  return temp;
}
void PruneStatistics::set_allocated_key(::zsearch::AnonymousKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.PruneStatistics.key)
}

// uint64 records_pruned = 2;
void PruneStatistics::clear_records_pruned() {
  records_pruned_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 PruneStatistics::records_pruned() const {
  // @@protoc_insertion_point(field_get:zsearch.PruneStatistics.records_pruned)
  return records_pruned_;
}
void PruneStatistics::set_records_pruned(::google::protobuf::uint64 value) {
  
  records_pruned_ = value;
  // @@protoc_insertion_point(field_set:zsearch.PruneStatistics.records_pruned)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommandReply::kStatusFieldNumber;
const int CommandReply::kErrorFieldNumber;
const int CommandReply::kStatsFieldNumber;
const int CommandReply::kPruneStatisticsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommandReply::CommandReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.CommandReply)
}
CommandReply::CommandReply(const CommandReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      prune_statistics_(from.prune_statistics_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_stats()) {
    stats_ = new ::zsearch::ServerStatistics(*from.stats_);
  } else {
    stats_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:zsearch.CommandReply)
}

void CommandReply::SharedCtor() {
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stats_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&stats_) + sizeof(status_));
  _cached_size_ = 0;
}

CommandReply::~CommandReply() {
  // @@protoc_insertion_point(destructor:zsearch.CommandReply)
  SharedDtor();
}

void CommandReply::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete stats_;
  }
}

void CommandReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandReply::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommandReply& CommandReply::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommandReply* CommandReply::New(::google::protobuf::Arena* arena) const {
  CommandReply* n = new CommandReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommandReply::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.CommandReply)
  prune_statistics_.Clear();
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
  status_ = 0;
}

bool CommandReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.CommandReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .zsearch.CommandReply.CommandStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::zsearch::CommandReply_CommandStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.CommandReply.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.ServerStatistics stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zsearch.PruneStatistics prune_statistics = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prune_statistics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.CommandReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.CommandReply)
  return false;
#undef DO_
}

void CommandReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.CommandReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zsearch.CommandReply.CommandStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.CommandReply.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error(), output);
  }

  // .zsearch.ServerStatistics stats = 3;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stats_, output);
  }

  // repeated .zsearch.PruneStatistics prune_statistics = 4;
  for (unsigned int i = 0, n = this->prune_statistics_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prune_statistics(i), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.CommandReply)
}

::google::protobuf::uint8* CommandReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.CommandReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zsearch.CommandReply.CommandStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.CommandReply.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }

  // .zsearch.ServerStatistics stats = 3;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stats_, deterministic, target);
  }

  // repeated .zsearch.PruneStatistics prune_statistics = 4;
  for (unsigned int i = 0, n = this->prune_statistics_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->prune_statistics(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.CommandReply)
  return target;
}

size_t CommandReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.CommandReply)
  size_t total_size = 0;

  // repeated .zsearch.PruneStatistics prune_statistics = 4;
  {
    unsigned int count = this->prune_statistics_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prune_statistics(i));
    }
  }

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // .zsearch.ServerStatistics stats = 3;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  // .zsearch.CommandReply.CommandStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.CommandReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommandReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.CommandReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.CommandReply)
    MergeFrom(*source);
  }
}

void CommandReply::MergeFrom(const CommandReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.CommandReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prune_statistics_.MergeFrom(from.prune_statistics_);
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_stats()) {
    mutable_stats()->::zsearch::ServerStatistics::MergeFrom(from.stats());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void CommandReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.CommandReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandReply::CopyFrom(const CommandReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.CommandReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReply::IsInitialized() const {
  return true;
}

void CommandReply::Swap(CommandReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommandReply::InternalSwap(CommandReply* other) {
  prune_statistics_.InternalSwap(&other->prune_statistics_);
  error_.Swap(&other->error_);
  std::swap(stats_, other->stats_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommandReply::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommandReply

// .zsearch.CommandReply.CommandStatus status = 1;
void CommandReply::clear_status() {
  status_ = 0;
}
::zsearch::CommandReply_CommandStatus CommandReply::status() const {
  // @@protoc_insertion_point(field_get:zsearch.CommandReply.status)
  return static_cast< ::zsearch::CommandReply_CommandStatus >(status_);
}
void CommandReply::set_status(::zsearch::CommandReply_CommandStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:zsearch.CommandReply.status)
}

// string error = 2;
void CommandReply::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CommandReply::error() const {
  // @@protoc_insertion_point(field_get:zsearch.CommandReply.error)
  return error_.GetNoArena();
}
void CommandReply::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.CommandReply.error)
}
#if LANG_CXX11
void CommandReply::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.CommandReply.error)
}
#endif
void CommandReply::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.CommandReply.error)
}
void CommandReply::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.CommandReply.error)
}
::std::string* CommandReply::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.CommandReply.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CommandReply::release_error() {
  // @@protoc_insertion_point(field_release:zsearch.CommandReply.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CommandReply::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:zsearch.CommandReply.error)
}

// .zsearch.ServerStatistics stats = 3;
bool CommandReply::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
void CommandReply::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::zsearch::ServerStatistics& CommandReply::stats() const {
  // @@protoc_insertion_point(field_get:zsearch.CommandReply.stats)
  return stats_ != NULL ? *stats_
                         : *::zsearch::ServerStatistics::internal_default_instance();
}
::zsearch::ServerStatistics* CommandReply::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::zsearch::ServerStatistics;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CommandReply.stats)
  return stats_;
}
::zsearch::ServerStatistics* CommandReply::release_stats() {
  // @@protoc_insertion_point(field_release:zsearch.CommandReply.stats)
  
  ::zsearch::ServerStatistics* temp = stats_;
  stats_ = NULL;
  return temp;
}
void CommandReply::set_allocated_stats(::zsearch::ServerStatistics* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CommandReply.stats)
}

// repeated .zsearch.PruneStatistics prune_statistics = 4;
int CommandReply::prune_statistics_size() const {
  return prune_statistics_.size();
}
void CommandReply::clear_prune_statistics() {
  prune_statistics_.Clear();
}
const ::zsearch::PruneStatistics& CommandReply::prune_statistics(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.CommandReply.prune_statistics)
  return prune_statistics_.Get(index);
}
::zsearch::PruneStatistics* CommandReply::mutable_prune_statistics(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.CommandReply.prune_statistics)
  return prune_statistics_.Mutable(index);
}
::zsearch::PruneStatistics* CommandReply::add_prune_statistics() {
  // @@protoc_insertion_point(field_add:zsearch.CommandReply.prune_statistics)
  return prune_statistics_.Add();
}
::google::protobuf::RepeatedPtrField< ::zsearch::PruneStatistics >*
CommandReply::mutable_prune_statistics() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.CommandReply.prune_statistics)
  return &prune_statistics_;
}
const ::google::protobuf::RepeatedPtrField< ::zsearch::PruneStatistics >&
CommandReply::prune_statistics() const {
  // @@protoc_insertion_point(field_list:zsearch.CommandReply.prune_statistics)
  return prune_statistics_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostQuery::kIpFieldNumber;
const int HostQuery::kDomainFieldNumber;
const int HostQuery::kPortFieldNumber;
const int HostQuery::kProtocolFieldNumber;
const int HostQuery::kSubprotocolFieldNumber;
const int HostQuery::kMaxRecordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostQuery::HostQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.HostQuery)
}
HostQuery::HostQuery(const HostQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  ::memcpy(&ip_, &from.ip_,
    reinterpret_cast<char*>(&max_records_) -
    reinterpret_cast<char*>(&ip_) + sizeof(max_records_));
  // @@protoc_insertion_point(copy_constructor:zsearch.HostQuery)
}

void HostQuery::SharedCtor() {
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ip_, 0, reinterpret_cast<char*>(&max_records_) -
    reinterpret_cast<char*>(&ip_) + sizeof(max_records_));
  _cached_size_ = 0;
}

HostQuery::~HostQuery() {
  // @@protoc_insertion_point(destructor:zsearch.HostQuery)
  SharedDtor();
}

void HostQuery::SharedDtor() {
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HostQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostQuery::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HostQuery& HostQuery::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

HostQuery* HostQuery::New(::google::protobuf::Arena* arena) const {
  HostQuery* n = new HostQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.HostQuery)
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ip_, 0, reinterpret_cast<char*>(&max_records_) -
    reinterpret_cast<char*>(&ip_) + sizeof(max_records_));
}

bool HostQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.HostQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.HostQuery.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 protocol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 subprotocol = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subprotocol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_records = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_records_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.HostQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.HostQuery)
  return false;
#undef DO_
}

void HostQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.HostQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 ip = 1;
  if (this->ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->ip(), output);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.HostQuery.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // uint32 protocol = 4;
  if (this->protocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protocol(), output);
  }

  // uint32 subprotocol = 5;
  if (this->subprotocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->subprotocol(), output);
  }

  // uint32 max_records = 6;
  if (this->max_records() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_records(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.HostQuery)
}

::google::protobuf::uint8* HostQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.HostQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 ip = 1;
  if (this->ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->ip(), target);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.HostQuery.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // uint32 protocol = 4;
  if (this->protocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protocol(), target);
  }

  // uint32 subprotocol = 5;
  if (this->subprotocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->subprotocol(), target);
  }

  // uint32 max_records = 6;
  if (this->max_records() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_records(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.HostQuery)
  return target;
}

size_t HostQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.HostQuery)
  size_t total_size = 0;

  // string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // fixed32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 + 4;
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 protocol = 4;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->protocol());
  }

  // uint32 subprotocol = 5;
  if (this->subprotocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->subprotocol());
  }

  // uint32 max_records = 6;
  if (this->max_records() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_records());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.HostQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const HostQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HostQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.HostQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.HostQuery)
    MergeFrom(*source);
  }
}

void HostQuery::MergeFrom(const HostQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.HostQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.ip() != 0) {
    set_ip(from.ip());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.protocol() != 0) {
    set_protocol(from.protocol());
  }
  if (from.subprotocol() != 0) {
    set_subprotocol(from.subprotocol());
  }
  if (from.max_records() != 0) {
    set_max_records(from.max_records());
  }
}

void HostQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.HostQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostQuery::CopyFrom(const HostQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.HostQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostQuery::IsInitialized() const {
  return true;
}

void HostQuery::Swap(HostQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostQuery::InternalSwap(HostQuery* other) {
  domain_.Swap(&other->domain_);
  std::swap(ip_, other->ip_);
  std::swap(port_, other->port_);
  std::swap(protocol_, other->protocol_);
  std::swap(subprotocol_, other->subprotocol_);
  std::swap(max_records_, other->max_records_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HostQuery::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HostQuery

// fixed32 ip = 1;
void HostQuery::clear_ip() {
  ip_ = 0u;
}
::google::protobuf::uint32 HostQuery::ip() const {
  // @@protoc_insertion_point(field_get:zsearch.HostQuery.ip)
  return ip_;
}
void HostQuery::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:zsearch.HostQuery.ip)
}

// string domain = 2;
void HostQuery::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HostQuery::domain() const {
  // @@protoc_insertion_point(field_get:zsearch.HostQuery.domain)
  return domain_.GetNoArena();
}
void HostQuery::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.HostQuery.domain)
}
#if LANG_CXX11
void HostQuery::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.HostQuery.domain)
}
#endif
void HostQuery::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.HostQuery.domain)
}
void HostQuery::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.HostQuery.domain)
}
::std::string* HostQuery::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.HostQuery.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HostQuery::release_domain() {
  // @@protoc_insertion_point(field_release:zsearch.HostQuery.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HostQuery::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:zsearch.HostQuery.domain)
}

// uint32 port = 3;
void HostQuery::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 HostQuery::port() const {
  // @@protoc_insertion_point(field_get:zsearch.HostQuery.port)
  return port_;
}
void HostQuery::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:zsearch.HostQuery.port)
}

// uint32 protocol = 4;
void HostQuery::clear_protocol() {
  protocol_ = 0u;
}
::google::protobuf::uint32 HostQuery::protocol() const {
  // @@protoc_insertion_point(field_get:zsearch.HostQuery.protocol)
  return protocol_;
}
void HostQuery::set_protocol(::google::protobuf::uint32 value) {
  
  protocol_ = value;
  // @@protoc_insertion_point(field_set:zsearch.HostQuery.protocol)
}

// uint32 subprotocol = 5;
void HostQuery::clear_subprotocol() {
  subprotocol_ = 0u;
}
::google::protobuf::uint32 HostQuery::subprotocol() const {
  // @@protoc_insertion_point(field_get:zsearch.HostQuery.subprotocol)
  return subprotocol_;
}
void HostQuery::set_subprotocol(::google::protobuf::uint32 value) {
  
  subprotocol_ = value;
  // @@protoc_insertion_point(field_set:zsearch.HostQuery.subprotocol)
}

// uint32 max_records = 6;
void HostQuery::clear_max_records() {
  max_records_ = 0u;
}
::google::protobuf::uint32 HostQuery::max_records() const {
  // @@protoc_insertion_point(field_get:zsearch.HostQuery.max_records)
  return max_records_;
}
void HostQuery::set_max_records(::google::protobuf::uint32 value) {
  
  max_records_ = value;
  // @@protoc_insertion_point(field_set:zsearch.HostQuery.max_records)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostQueryResponse::kStatusFieldNumber;
const int HostQueryResponse::kIpFieldNumber;
const int HostQueryResponse::kDomainFieldNumber;
const int HostQueryResponse::kPortFieldNumber;
const int HostQueryResponse::kProtocolFieldNumber;
const int HostQueryResponse::kSubprotocolFieldNumber;
const int HostQueryResponse::kRecordFieldNumber;
const int HostQueryResponse::kRecordsFieldNumber;
const int HostQueryResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostQueryResponse::HostQueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.HostQueryResponse)
}
HostQueryResponse::HostQueryResponse(const HostQueryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      records_(from.records_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_record()) {
    record_ = new ::zsearch::Record(*from.record_);
  } else {
    record_ = NULL;
  }
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&subprotocol_) -
    reinterpret_cast<char*>(&status_) + sizeof(subprotocol_));
  // @@protoc_insertion_point(copy_constructor:zsearch.HostQueryResponse)
}

void HostQueryResponse::SharedCtor() {
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&record_, 0, reinterpret_cast<char*>(&subprotocol_) -
    reinterpret_cast<char*>(&record_) + sizeof(subprotocol_));
  _cached_size_ = 0;
}

HostQueryResponse::~HostQueryResponse() {
  // @@protoc_insertion_point(destructor:zsearch.HostQueryResponse)
  SharedDtor();
}

void HostQueryResponse::SharedDtor() {
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete record_;
  }
}

void HostQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostQueryResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HostQueryResponse& HostQueryResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

HostQueryResponse* HostQueryResponse::New(::google::protobuf::Arena* arena) const {
  HostQueryResponse* n = new HostQueryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.HostQueryResponse)
  records_.Clear();
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && record_ != NULL) {
    delete record_;
  }
  record_ = NULL;
  ::memset(&status_, 0, reinterpret_cast<char*>(&subprotocol_) -
    reinterpret_cast<char*>(&status_) + sizeof(subprotocol_));
}

bool HostQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.HostQueryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .zsearch.HostQueryResponse.ResponseStatus status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::zsearch::HostQueryResponse_ResponseStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.HostQueryResponse.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 protocol = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 subprotocol = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subprotocol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.Record record = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zsearch.Record records = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.HostQueryResponse.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.HostQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.HostQueryResponse)
  return false;
#undef DO_
}

void HostQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.HostQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zsearch.HostQueryResponse.ResponseStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // fixed32 ip = 2;
  if (this->ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ip(), output);
  }

  // string domain = 3;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.HostQueryResponse.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->domain(), output);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // uint32 protocol = 5;
  if (this->protocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->protocol(), output);
  }

  // uint32 subprotocol = 6;
  if (this->subprotocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->subprotocol(), output);
  }

  // .zsearch.Record record = 7;
  if (this->has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->record_, output);
  }

  // repeated .zsearch.Record records = 8;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->records(i), output);
  }

  // string error = 9;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.HostQueryResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.HostQueryResponse)
}

::google::protobuf::uint8* HostQueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.HostQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zsearch.HostQueryResponse.ResponseStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // fixed32 ip = 2;
  if (this->ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ip(), target);
  }

  // string domain = 3;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.HostQueryResponse.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  // uint32 protocol = 5;
  if (this->protocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->protocol(), target);
  }

  // uint32 subprotocol = 6;
  if (this->subprotocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->subprotocol(), target);
  }

  // .zsearch.Record record = 7;
  if (this->has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->record_, deterministic, target);
  }

  // repeated .zsearch.Record records = 8;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->records(i), deterministic, target);
  }

  // string error = 9;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.HostQueryResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.HostQueryResponse)
  return target;
}

size_t HostQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.HostQueryResponse)
  size_t total_size = 0;

  // repeated .zsearch.Record records = 8;
  {
    unsigned int count = this->records_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->records(i));
    }
  }

  // string domain = 3;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // string error = 9;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // .zsearch.Record record = 7;
  if (this->has_record()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->record_);
  }

  // .zsearch.HostQueryResponse.ResponseStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // fixed32 ip = 2;
  if (this->ip() != 0) {
    total_size += 1 + 4;
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 protocol = 5;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->protocol());
  }

  // uint32 subprotocol = 6;
  if (this->subprotocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->subprotocol());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.HostQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HostQueryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HostQueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.HostQueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.HostQueryResponse)
    MergeFrom(*source);
  }
}

void HostQueryResponse::MergeFrom(const HostQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.HostQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_record()) {
    mutable_record()->::zsearch::Record::MergeFrom(from.record());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.ip() != 0) {
    set_ip(from.ip());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.protocol() != 0) {
    set_protocol(from.protocol());
  }
  if (from.subprotocol() != 0) {
    set_subprotocol(from.subprotocol());
  }
}

void HostQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.HostQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostQueryResponse::CopyFrom(const HostQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.HostQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostQueryResponse::IsInitialized() const {
  return true;
}

void HostQueryResponse::Swap(HostQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostQueryResponse::InternalSwap(HostQueryResponse* other) {
  records_.InternalSwap(&other->records_);
  domain_.Swap(&other->domain_);
  error_.Swap(&other->error_);
  std::swap(record_, other->record_);
  std::swap(status_, other->status_);
  std::swap(ip_, other->ip_);
  std::swap(port_, other->port_);
  std::swap(protocol_, other->protocol_);
  std::swap(subprotocol_, other->subprotocol_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HostQueryResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HostQueryResponse

// .zsearch.HostQueryResponse.ResponseStatus status = 1;
void HostQueryResponse::clear_status() {
  status_ = 0;
}
::zsearch::HostQueryResponse_ResponseStatus HostQueryResponse::status() const {
  // @@protoc_insertion_point(field_get:zsearch.HostQueryResponse.status)
  return static_cast< ::zsearch::HostQueryResponse_ResponseStatus >(status_);
}
void HostQueryResponse::set_status(::zsearch::HostQueryResponse_ResponseStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:zsearch.HostQueryResponse.status)
}

// fixed32 ip = 2;
void HostQueryResponse::clear_ip() {
  ip_ = 0u;
}
::google::protobuf::uint32 HostQueryResponse::ip() const {
  // @@protoc_insertion_point(field_get:zsearch.HostQueryResponse.ip)
  return ip_;
}
void HostQueryResponse::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:zsearch.HostQueryResponse.ip)
}

// string domain = 3;
void HostQueryResponse::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HostQueryResponse::domain() const {
  // @@protoc_insertion_point(field_get:zsearch.HostQueryResponse.domain)
  return domain_.GetNoArena();
}
void HostQueryResponse::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.HostQueryResponse.domain)
}
#if LANG_CXX11
void HostQueryResponse::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.HostQueryResponse.domain)
}
#endif
void HostQueryResponse::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.HostQueryResponse.domain)
}
void HostQueryResponse::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.HostQueryResponse.domain)
}
::std::string* HostQueryResponse::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.HostQueryResponse.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HostQueryResponse::release_domain() {
  // @@protoc_insertion_point(field_release:zsearch.HostQueryResponse.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HostQueryResponse::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:zsearch.HostQueryResponse.domain)
}

// uint32 port = 4;
void HostQueryResponse::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 HostQueryResponse::port() const {
  // @@protoc_insertion_point(field_get:zsearch.HostQueryResponse.port)
  return port_;
}
void HostQueryResponse::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:zsearch.HostQueryResponse.port)
}

// uint32 protocol = 5;
void HostQueryResponse::clear_protocol() {
  protocol_ = 0u;
}
::google::protobuf::uint32 HostQueryResponse::protocol() const {
  // @@protoc_insertion_point(field_get:zsearch.HostQueryResponse.protocol)
  return protocol_;
}
void HostQueryResponse::set_protocol(::google::protobuf::uint32 value) {
  
  protocol_ = value;
  // @@protoc_insertion_point(field_set:zsearch.HostQueryResponse.protocol)
}

// uint32 subprotocol = 6;
void HostQueryResponse::clear_subprotocol() {
  subprotocol_ = 0u;
}
::google::protobuf::uint32 HostQueryResponse::subprotocol() const {
  // @@protoc_insertion_point(field_get:zsearch.HostQueryResponse.subprotocol)
  return subprotocol_;
}
void HostQueryResponse::set_subprotocol(::google::protobuf::uint32 value) {
  
  subprotocol_ = value;
  // @@protoc_insertion_point(field_set:zsearch.HostQueryResponse.subprotocol)
}

// .zsearch.Record record = 7;
bool HostQueryResponse::has_record() const {
  return this != internal_default_instance() && record_ != NULL;
}
void HostQueryResponse::clear_record() {
  if (GetArenaNoVirtual() == NULL && record_ != NULL) delete record_;
  record_ = NULL;
}
const ::zsearch::Record& HostQueryResponse::record() const {
  // @@protoc_insertion_point(field_get:zsearch.HostQueryResponse.record)
  return record_ != NULL ? *record_
                         : *::zsearch::Record::internal_default_instance();
}
::zsearch::Record* HostQueryResponse::mutable_record() {
  
  if (record_ == NULL) {
    record_ = new ::zsearch::Record;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.HostQueryResponse.record)
  return record_;
}
::zsearch::Record* HostQueryResponse::release_record() {
  // @@protoc_insertion_point(field_release:zsearch.HostQueryResponse.record)
  
  ::zsearch::Record* temp = record_;
  record_ = NULL;
  return temp;
}
void HostQueryResponse::set_allocated_record(::zsearch::Record* record) {
  delete record_;
  record_ = record;
  if (record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.HostQueryResponse.record)
}

// repeated .zsearch.Record records = 8;
int HostQueryResponse::records_size() const {
  return records_.size();
}
void HostQueryResponse::clear_records() {
  records_.Clear();
}
const ::zsearch::Record& HostQueryResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.HostQueryResponse.records)
  return records_.Get(index);
}
::zsearch::Record* HostQueryResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.HostQueryResponse.records)
  return records_.Mutable(index);
}
::zsearch::Record* HostQueryResponse::add_records() {
  // @@protoc_insertion_point(field_add:zsearch.HostQueryResponse.records)
  return records_.Add();
}
::google::protobuf::RepeatedPtrField< ::zsearch::Record >*
HostQueryResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.HostQueryResponse.records)
  return &records_;
}
const ::google::protobuf::RepeatedPtrField< ::zsearch::Record >&
HostQueryResponse::records() const {
  // @@protoc_insertion_point(field_list:zsearch.HostQueryResponse.records)
  return records_;
}

// string error = 9;
void HostQueryResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HostQueryResponse::error() const {
  // @@protoc_insertion_point(field_get:zsearch.HostQueryResponse.error)
  return error_.GetNoArena();
}
void HostQueryResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.HostQueryResponse.error)
}
#if LANG_CXX11
void HostQueryResponse::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.HostQueryResponse.error)
}
#endif
void HostQueryResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.HostQueryResponse.error)
}
void HostQueryResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.HostQueryResponse.error)
}
::std::string* HostQueryResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.HostQueryResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HostQueryResponse::release_error() {
  // @@protoc_insertion_point(field_release:zsearch.HostQueryResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HostQueryResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:zsearch.HostQueryResponse.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnonymousQuery::kSha256FpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnonymousQuery::AnonymousQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.AnonymousQuery)
}
AnonymousQuery::AnonymousQuery(const AnonymousQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha256fp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sha256fp().size() > 0) {
    sha256fp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256fp_);
  }
  // @@protoc_insertion_point(copy_constructor:zsearch.AnonymousQuery)
}

void AnonymousQuery::SharedCtor() {
  sha256fp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AnonymousQuery::~AnonymousQuery() {
  // @@protoc_insertion_point(destructor:zsearch.AnonymousQuery)
  SharedDtor();
}

void AnonymousQuery::SharedDtor() {
  sha256fp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AnonymousQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnonymousQuery::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnonymousQuery& AnonymousQuery::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnonymousQuery* AnonymousQuery::New(::google::protobuf::Arena* arena) const {
  AnonymousQuery* n = new AnonymousQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnonymousQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.AnonymousQuery)
  sha256fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AnonymousQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.AnonymousQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes sha256fp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha256fp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.AnonymousQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.AnonymousQuery)
  return false;
#undef DO_
}

void AnonymousQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.AnonymousQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sha256fp = 1;
  if (this->sha256fp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sha256fp(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.AnonymousQuery)
}

::google::protobuf::uint8* AnonymousQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.AnonymousQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sha256fp = 1;
  if (this->sha256fp().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sha256fp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.AnonymousQuery)
  return target;
}

size_t AnonymousQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.AnonymousQuery)
  size_t total_size = 0;

  // bytes sha256fp = 1;
  if (this->sha256fp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sha256fp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnonymousQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.AnonymousQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const AnonymousQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnonymousQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.AnonymousQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.AnonymousQuery)
    MergeFrom(*source);
  }
}

void AnonymousQuery::MergeFrom(const AnonymousQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.AnonymousQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sha256fp().size() > 0) {

    sha256fp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256fp_);
  }
}

void AnonymousQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.AnonymousQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnonymousQuery::CopyFrom(const AnonymousQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.AnonymousQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnonymousQuery::IsInitialized() const {
  return true;
}

void AnonymousQuery::Swap(AnonymousQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnonymousQuery::InternalSwap(AnonymousQuery* other) {
  sha256fp_.Swap(&other->sha256fp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnonymousQuery::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnonymousQuery

// bytes sha256fp = 1;
void AnonymousQuery::clear_sha256fp() {
  sha256fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnonymousQuery::sha256fp() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousQuery.sha256fp)
  return sha256fp_.GetNoArena();
}
void AnonymousQuery::set_sha256fp(const ::std::string& value) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.AnonymousQuery.sha256fp)
}
#if LANG_CXX11
void AnonymousQuery::set_sha256fp(::std::string&& value) {
  
  sha256fp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.AnonymousQuery.sha256fp)
}
#endif
void AnonymousQuery::set_sha256fp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.AnonymousQuery.sha256fp)
}
void AnonymousQuery::set_sha256fp(const void* value, size_t size) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.AnonymousQuery.sha256fp)
}
::std::string* AnonymousQuery::mutable_sha256fp() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.AnonymousQuery.sha256fp)
  return sha256fp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnonymousQuery::release_sha256fp() {
  // @@protoc_insertion_point(field_release:zsearch.AnonymousQuery.sha256fp)
  
  return sha256fp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnonymousQuery::set_allocated_sha256fp(::std::string* sha256fp) {
  if (sha256fp != NULL) {
    
  } else {
    
  }
  sha256fp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha256fp);
  // @@protoc_insertion_point(field_set_allocated:zsearch.AnonymousQuery.sha256fp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnonymousQueryResponse::kSha256FpFieldNumber;
const int AnonymousQueryResponse::kStatusFieldNumber;
const int AnonymousQueryResponse::kRecordFieldNumber;
const int AnonymousQueryResponse::kRecordsFieldNumber;
const int AnonymousQueryResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnonymousQueryResponse::AnonymousQueryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.AnonymousQueryResponse)
}
AnonymousQueryResponse::AnonymousQueryResponse(const AnonymousQueryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      records_(from.records_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha256fp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sha256fp().size() > 0) {
    sha256fp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256fp_);
  }
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error().size() > 0) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_record()) {
    record_ = new ::zsearch::AnonymousRecord(*from.record_);
  } else {
    record_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:zsearch.AnonymousQueryResponse)
}

void AnonymousQueryResponse::SharedCtor() {
  sha256fp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&record_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&record_) + sizeof(status_));
  _cached_size_ = 0;
}

AnonymousQueryResponse::~AnonymousQueryResponse() {
  // @@protoc_insertion_point(destructor:zsearch.AnonymousQueryResponse)
  SharedDtor();
}

void AnonymousQueryResponse::SharedDtor() {
  sha256fp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete record_;
  }
}

void AnonymousQueryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnonymousQueryResponse::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AnonymousQueryResponse& AnonymousQueryResponse::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnonymousQueryResponse* AnonymousQueryResponse::New(::google::protobuf::Arena* arena) const {
  AnonymousQueryResponse* n = new AnonymousQueryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnonymousQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.AnonymousQueryResponse)
  records_.Clear();
  sha256fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && record_ != NULL) {
    delete record_;
  }
  record_ = NULL;
  status_ = 0;
}

bool AnonymousQueryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.AnonymousQueryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes sha256fp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha256fp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.AnonymousQueryResponse.ResponseStatus status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::zsearch::AnonymousQueryResponse_ResponseStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.AnonymousRecord record = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zsearch.AnonymousRecord records = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(474u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.AnonymousQueryResponse.error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.AnonymousQueryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.AnonymousQueryResponse)
  return false;
#undef DO_
}

void AnonymousQueryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.AnonymousQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sha256fp = 1;
  if (this->sha256fp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sha256fp(), output);
  }

  // .zsearch.AnonymousQueryResponse.ResponseStatus status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // .zsearch.AnonymousRecord record = 3;
  if (this->has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->record_, output);
  }

  // repeated .zsearch.AnonymousRecord records = 4;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->records(i), output);
  }

  // string error = 59;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.AnonymousQueryResponse.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      59, this->error(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.AnonymousQueryResponse)
}

::google::protobuf::uint8* AnonymousQueryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.AnonymousQueryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sha256fp = 1;
  if (this->sha256fp().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sha256fp(), target);
  }

  // .zsearch.AnonymousQueryResponse.ResponseStatus status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // .zsearch.AnonymousRecord record = 3;
  if (this->has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->record_, deterministic, target);
  }

  // repeated .zsearch.AnonymousRecord records = 4;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->records(i), deterministic, target);
  }

  // string error = 59;
  if (this->error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.AnonymousQueryResponse.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        59, this->error(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.AnonymousQueryResponse)
  return target;
}

size_t AnonymousQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.AnonymousQueryResponse)
  size_t total_size = 0;

  // repeated .zsearch.AnonymousRecord records = 4;
  {
    unsigned int count = this->records_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->records(i));
    }
  }

  // bytes sha256fp = 1;
  if (this->sha256fp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sha256fp());
  }

  // string error = 59;
  if (this->error().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error());
  }

  // .zsearch.AnonymousRecord record = 3;
  if (this->has_record()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->record_);
  }

  // .zsearch.AnonymousQueryResponse.ResponseStatus status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnonymousQueryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.AnonymousQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AnonymousQueryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnonymousQueryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.AnonymousQueryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.AnonymousQueryResponse)
    MergeFrom(*source);
  }
}

void AnonymousQueryResponse::MergeFrom(const AnonymousQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.AnonymousQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  records_.MergeFrom(from.records_);
  if (from.sha256fp().size() > 0) {

    sha256fp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256fp_);
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.has_record()) {
    mutable_record()->::zsearch::AnonymousRecord::MergeFrom(from.record());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void AnonymousQueryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.AnonymousQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnonymousQueryResponse::CopyFrom(const AnonymousQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.AnonymousQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnonymousQueryResponse::IsInitialized() const {
  return true;
}

void AnonymousQueryResponse::Swap(AnonymousQueryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnonymousQueryResponse::InternalSwap(AnonymousQueryResponse* other) {
  records_.InternalSwap(&other->records_);
  sha256fp_.Swap(&other->sha256fp_);
  error_.Swap(&other->error_);
  std::swap(record_, other->record_);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnonymousQueryResponse::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnonymousQueryResponse

// bytes sha256fp = 1;
void AnonymousQueryResponse::clear_sha256fp() {
  sha256fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnonymousQueryResponse::sha256fp() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousQueryResponse.sha256fp)
  return sha256fp_.GetNoArena();
}
void AnonymousQueryResponse::set_sha256fp(const ::std::string& value) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.AnonymousQueryResponse.sha256fp)
}
#if LANG_CXX11
void AnonymousQueryResponse::set_sha256fp(::std::string&& value) {
  
  sha256fp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.AnonymousQueryResponse.sha256fp)
}
#endif
void AnonymousQueryResponse::set_sha256fp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.AnonymousQueryResponse.sha256fp)
}
void AnonymousQueryResponse::set_sha256fp(const void* value, size_t size) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.AnonymousQueryResponse.sha256fp)
}
::std::string* AnonymousQueryResponse::mutable_sha256fp() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.AnonymousQueryResponse.sha256fp)
  return sha256fp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnonymousQueryResponse::release_sha256fp() {
  // @@protoc_insertion_point(field_release:zsearch.AnonymousQueryResponse.sha256fp)
  
  return sha256fp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnonymousQueryResponse::set_allocated_sha256fp(::std::string* sha256fp) {
  if (sha256fp != NULL) {
    
  } else {
    
  }
  sha256fp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha256fp);
  // @@protoc_insertion_point(field_set_allocated:zsearch.AnonymousQueryResponse.sha256fp)
}

// .zsearch.AnonymousQueryResponse.ResponseStatus status = 2;
void AnonymousQueryResponse::clear_status() {
  status_ = 0;
}
::zsearch::AnonymousQueryResponse_ResponseStatus AnonymousQueryResponse::status() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousQueryResponse.status)
  return static_cast< ::zsearch::AnonymousQueryResponse_ResponseStatus >(status_);
}
void AnonymousQueryResponse::set_status(::zsearch::AnonymousQueryResponse_ResponseStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:zsearch.AnonymousQueryResponse.status)
}

// .zsearch.AnonymousRecord record = 3;
bool AnonymousQueryResponse::has_record() const {
  return this != internal_default_instance() && record_ != NULL;
}
void AnonymousQueryResponse::clear_record() {
  if (GetArenaNoVirtual() == NULL && record_ != NULL) delete record_;
  record_ = NULL;
}
const ::zsearch::AnonymousRecord& AnonymousQueryResponse::record() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousQueryResponse.record)
  return record_ != NULL ? *record_
                         : *::zsearch::AnonymousRecord::internal_default_instance();
}
::zsearch::AnonymousRecord* AnonymousQueryResponse::mutable_record() {
  
  if (record_ == NULL) {
    record_ = new ::zsearch::AnonymousRecord;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.AnonymousQueryResponse.record)
  return record_;
}
::zsearch::AnonymousRecord* AnonymousQueryResponse::release_record() {
  // @@protoc_insertion_point(field_release:zsearch.AnonymousQueryResponse.record)
  
  ::zsearch::AnonymousRecord* temp = record_;
  record_ = NULL;
  return temp;
}
void AnonymousQueryResponse::set_allocated_record(::zsearch::AnonymousRecord* record) {
  delete record_;
  record_ = record;
  if (record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.AnonymousQueryResponse.record)
}

// repeated .zsearch.AnonymousRecord records = 4;
int AnonymousQueryResponse::records_size() const {
  return records_.size();
}
void AnonymousQueryResponse::clear_records() {
  records_.Clear();
}
const ::zsearch::AnonymousRecord& AnonymousQueryResponse::records(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousQueryResponse.records)
  return records_.Get(index);
}
::zsearch::AnonymousRecord* AnonymousQueryResponse::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.AnonymousQueryResponse.records)
  return records_.Mutable(index);
}
::zsearch::AnonymousRecord* AnonymousQueryResponse::add_records() {
  // @@protoc_insertion_point(field_add:zsearch.AnonymousQueryResponse.records)
  return records_.Add();
}
::google::protobuf::RepeatedPtrField< ::zsearch::AnonymousRecord >*
AnonymousQueryResponse::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.AnonymousQueryResponse.records)
  return &records_;
}
const ::google::protobuf::RepeatedPtrField< ::zsearch::AnonymousRecord >&
AnonymousQueryResponse::records() const {
  // @@protoc_insertion_point(field_list:zsearch.AnonymousQueryResponse.records)
  return records_;
}

// string error = 59;
void AnonymousQueryResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AnonymousQueryResponse::error() const {
  // @@protoc_insertion_point(field_get:zsearch.AnonymousQueryResponse.error)
  return error_.GetNoArena();
}
void AnonymousQueryResponse::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.AnonymousQueryResponse.error)
}
#if LANG_CXX11
void AnonymousQueryResponse::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.AnonymousQueryResponse.error)
}
#endif
void AnonymousQueryResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.AnonymousQueryResponse.error)
}
void AnonymousQueryResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.AnonymousQueryResponse.error)
}
::std::string* AnonymousQueryResponse::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.AnonymousQueryResponse.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AnonymousQueryResponse::release_error() {
  // @@protoc_insertion_point(field_release:zsearch.AnonymousQueryResponse.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AnonymousQueryResponse::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:zsearch.AnonymousQueryResponse.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserDataRequest::kIpFieldNumber;
const int UserDataRequest::kDomainFieldNumber;
const int UserDataRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserDataRequest::UserDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.UserDataRequest)
}
UserDataRequest::UserDataRequest(const UserDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.has_data()) {
    data_ = new ::zsearch::UserdataAtom(*from.data_);
  } else {
    data_ = NULL;
  }
  ip_ = from.ip_;
  // @@protoc_insertion_point(copy_constructor:zsearch.UserDataRequest)
}

void UserDataRequest::SharedCtor() {
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, reinterpret_cast<char*>(&ip_) -
    reinterpret_cast<char*>(&data_) + sizeof(ip_));
  _cached_size_ = 0;
}

UserDataRequest::~UserDataRequest() {
  // @@protoc_insertion_point(destructor:zsearch.UserDataRequest)
  SharedDtor();
}

void UserDataRequest::SharedDtor() {
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void UserDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDataRequest::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserDataRequest& UserDataRequest::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserDataRequest* UserDataRequest::New(::google::protobuf::Arena* arena) const {
  UserDataRequest* n = new UserDataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.UserDataRequest)
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  ip_ = 0u;
}

bool UserDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.UserDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.UserDataRequest.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.UserdataAtom data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.UserDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.UserDataRequest)
  return false;
#undef DO_
}

void UserDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.UserDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 ip = 1;
  if (this->ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->ip(), output);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.UserDataRequest.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // .zsearch.UserdataAtom data = 3;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.UserDataRequest)
}

::google::protobuf::uint8* UserDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.UserDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed32 ip = 1;
  if (this->ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->ip(), target);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.UserDataRequest.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  // .zsearch.UserdataAtom data = 3;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->data_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.UserDataRequest)
  return target;
}

size_t UserDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.UserDataRequest)
  size_t total_size = 0;

  // string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // .zsearch.UserdataAtom data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // fixed32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.UserDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.UserDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.UserDataRequest)
    MergeFrom(*source);
  }
}

void UserDataRequest::MergeFrom(const UserDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.UserDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.has_data()) {
    mutable_data()->::zsearch::UserdataAtom::MergeFrom(from.data());
  }
  if (from.ip() != 0) {
    set_ip(from.ip());
  }
}

void UserDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.UserDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDataRequest::CopyFrom(const UserDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.UserDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDataRequest::IsInitialized() const {
  return true;
}

void UserDataRequest::Swap(UserDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserDataRequest::InternalSwap(UserDataRequest* other) {
  domain_.Swap(&other->domain_);
  std::swap(data_, other->data_);
  std::swap(ip_, other->ip_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserDataRequest::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserDataRequest

// fixed32 ip = 1;
void UserDataRequest::clear_ip() {
  ip_ = 0u;
}
::google::protobuf::uint32 UserDataRequest::ip() const {
  // @@protoc_insertion_point(field_get:zsearch.UserDataRequest.ip)
  return ip_;
}
void UserDataRequest::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:zsearch.UserDataRequest.ip)
}

// string domain = 2;
void UserDataRequest::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserDataRequest::domain() const {
  // @@protoc_insertion_point(field_get:zsearch.UserDataRequest.domain)
  return domain_.GetNoArena();
}
void UserDataRequest::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.UserDataRequest.domain)
}
#if LANG_CXX11
void UserDataRequest::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.UserDataRequest.domain)
}
#endif
void UserDataRequest::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.UserDataRequest.domain)
}
void UserDataRequest::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.UserDataRequest.domain)
}
::std::string* UserDataRequest::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.UserDataRequest.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserDataRequest::release_domain() {
  // @@protoc_insertion_point(field_release:zsearch.UserDataRequest.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserDataRequest::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:zsearch.UserDataRequest.domain)
}

// .zsearch.UserdataAtom data = 3;
bool UserDataRequest::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void UserDataRequest::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::zsearch::UserdataAtom& UserDataRequest::data() const {
  // @@protoc_insertion_point(field_get:zsearch.UserDataRequest.data)
  return data_ != NULL ? *data_
                         : *::zsearch::UserdataAtom::internal_default_instance();
}
::zsearch::UserdataAtom* UserDataRequest::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::zsearch::UserdataAtom;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.UserDataRequest.data)
  return data_;
}
::zsearch::UserdataAtom* UserDataRequest::release_data() {
  // @@protoc_insertion_point(field_release:zsearch.UserDataRequest.data)
  
  ::zsearch::UserdataAtom* temp = data_;
  data_ = NULL;
  return temp;
}
void UserDataRequest::set_allocated_data(::zsearch::UserdataAtom* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.UserDataRequest.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RootStoreQuery::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RootStoreQuery::RootStoreQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.RootStoreQuery)
}
RootStoreQuery::RootStoreQuery(const RootStoreQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:zsearch.RootStoreQuery)
}

void RootStoreQuery::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

RootStoreQuery::~RootStoreQuery() {
  // @@protoc_insertion_point(destructor:zsearch.RootStoreQuery)
  SharedDtor();
}

void RootStoreQuery::SharedDtor() {
}

void RootStoreQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RootStoreQuery::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RootStoreQuery& RootStoreQuery::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

RootStoreQuery* RootStoreQuery::New(::google::protobuf::Arena* arena) const {
  RootStoreQuery* n = new RootStoreQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RootStoreQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.RootStoreQuery)
  type_ = 0;
}

bool RootStoreQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.RootStoreQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .zsearch.RootStoreQuery.RootStoreQueryType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::zsearch::RootStoreQuery_RootStoreQueryType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.RootStoreQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.RootStoreQuery)
  return false;
#undef DO_
}

void RootStoreQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.RootStoreQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zsearch.RootStoreQuery.RootStoreQueryType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.RootStoreQuery)
}

::google::protobuf::uint8* RootStoreQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.RootStoreQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zsearch.RootStoreQuery.RootStoreQueryType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.RootStoreQuery)
  return target;
}

size_t RootStoreQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.RootStoreQuery)
  size_t total_size = 0;

  // .zsearch.RootStoreQuery.RootStoreQueryType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RootStoreQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.RootStoreQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const RootStoreQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RootStoreQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.RootStoreQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.RootStoreQuery)
    MergeFrom(*source);
  }
}

void RootStoreQuery::MergeFrom(const RootStoreQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.RootStoreQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RootStoreQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.RootStoreQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RootStoreQuery::CopyFrom(const RootStoreQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.RootStoreQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RootStoreQuery::IsInitialized() const {
  return true;
}

void RootStoreQuery::Swap(RootStoreQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RootStoreQuery::InternalSwap(RootStoreQuery* other) {
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RootStoreQuery::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RootStoreQuery

// .zsearch.RootStoreQuery.RootStoreQueryType type = 1;
void RootStoreQuery::clear_type() {
  type_ = 0;
}
::zsearch::RootStoreQuery_RootStoreQueryType RootStoreQuery::type() const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreQuery.type)
  return static_cast< ::zsearch::RootStoreQuery_RootStoreQueryType >(type_);
}
void RootStoreQuery::set_type(::zsearch::RootStoreQuery_RootStoreQueryType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:zsearch.RootStoreQuery.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RootStoreReply::kCertificatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RootStoreReply::RootStoreReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.RootStoreReply)
}
RootStoreReply::RootStoreReply(const RootStoreReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      certificates_(from.certificates_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zsearch.RootStoreReply)
}

void RootStoreReply::SharedCtor() {
  _cached_size_ = 0;
}

RootStoreReply::~RootStoreReply() {
  // @@protoc_insertion_point(destructor:zsearch.RootStoreReply)
  SharedDtor();
}

void RootStoreReply::SharedDtor() {
}

void RootStoreReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RootStoreReply::descriptor() {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RootStoreReply& RootStoreReply::default_instance() {
  protobuf_rpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

RootStoreReply* RootStoreReply::New(::google::protobuf::Arena* arena) const {
  RootStoreReply* n = new RootStoreReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RootStoreReply::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.RootStoreReply)
  certificates_.Clear();
}

bool RootStoreReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.RootStoreReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zsearch.Certificate certificates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_certificates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.RootStoreReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.RootStoreReply)
  return false;
#undef DO_
}

void RootStoreReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.RootStoreReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zsearch.Certificate certificates = 1;
  for (unsigned int i = 0, n = this->certificates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->certificates(i), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.RootStoreReply)
}

::google::protobuf::uint8* RootStoreReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.RootStoreReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zsearch.Certificate certificates = 1;
  for (unsigned int i = 0, n = this->certificates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->certificates(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.RootStoreReply)
  return target;
}

size_t RootStoreReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.RootStoreReply)
  size_t total_size = 0;

  // repeated .zsearch.Certificate certificates = 1;
  {
    unsigned int count = this->certificates_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->certificates(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RootStoreReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.RootStoreReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RootStoreReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RootStoreReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.RootStoreReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.RootStoreReply)
    MergeFrom(*source);
  }
}

void RootStoreReply::MergeFrom(const RootStoreReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.RootStoreReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  certificates_.MergeFrom(from.certificates_);
}

void RootStoreReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.RootStoreReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RootStoreReply::CopyFrom(const RootStoreReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.RootStoreReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RootStoreReply::IsInitialized() const {
  return true;
}

void RootStoreReply::Swap(RootStoreReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RootStoreReply::InternalSwap(RootStoreReply* other) {
  certificates_.InternalSwap(&other->certificates_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RootStoreReply::GetMetadata() const {
  protobuf_rpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rpc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RootStoreReply

// repeated .zsearch.Certificate certificates = 1;
int RootStoreReply::certificates_size() const {
  return certificates_.size();
}
void RootStoreReply::clear_certificates() {
  certificates_.Clear();
}
const ::zsearch::Certificate& RootStoreReply::certificates(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreReply.certificates)
  return certificates_.Get(index);
}
::zsearch::Certificate* RootStoreReply::mutable_certificates(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.RootStoreReply.certificates)
  return certificates_.Mutable(index);
}
::zsearch::Certificate* RootStoreReply::add_certificates() {
  // @@protoc_insertion_point(field_add:zsearch.RootStoreReply.certificates)
  return certificates_.Add();
}
::google::protobuf::RepeatedPtrField< ::zsearch::Certificate >*
RootStoreReply::mutable_certificates() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.RootStoreReply.certificates)
  return &certificates_;
}
const ::google::protobuf::RepeatedPtrField< ::zsearch::Certificate >&
RootStoreReply::certificates() const {
  // @@protoc_insertion_point(field_list:zsearch.RootStoreReply.certificates)
  return certificates_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace zsearch

// @@protoc_insertion_point(global_scope)
