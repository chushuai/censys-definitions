// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace zsearch {
class ASAtom;
class ASAtomDefaultTypeInternal;
extern ASAtomDefaultTypeInternal _ASAtom_default_instance_;
class Metadatum;
class MetadatumDefaultTypeInternal;
extern MetadatumDefaultTypeInternal _Metadatum_default_instance_;
class UserdataAtom;
class UserdataAtomDefaultTypeInternal;
extern UserdataAtomDefaultTypeInternal _UserdataAtom_default_instance_;
}  // namespace zsearch

namespace zsearch {

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_common_2eproto

enum DeltaType {
  DT_RESERVED = 0,
  DT_UPDATE = 1,
  DT_DELETE = 2,
  DT_NO_CHANGE = 3,
  DeltaType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DeltaType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DeltaType_IsValid(int value);
const DeltaType DeltaType_MIN = DT_RESERVED;
const DeltaType DeltaType_MAX = DT_NO_CHANGE;
const int DeltaType_ARRAYSIZE = DeltaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeltaType_descriptor();
inline const ::std::string& DeltaType_Name(DeltaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeltaType_descriptor(), value);
}
inline bool DeltaType_Parse(
    const ::std::string& name, DeltaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeltaType>(
    DeltaType_descriptor(), name, value);
}
enum RegionalRegistrar {
  RIR_RESERVED = 0,
  RIR_ARIN = 1,
  RIR_RIPE = 2,
  RIR_APNIC = 3,
  RIR_AFRINIC = 4,
  RIR_LACNIC = 5,
  RIR_UNKNOWN = 6,
  RegionalRegistrar_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RegionalRegistrar_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RegionalRegistrar_IsValid(int value);
const RegionalRegistrar RegionalRegistrar_MIN = RIR_RESERVED;
const RegionalRegistrar RegionalRegistrar_MAX = RIR_UNKNOWN;
const int RegionalRegistrar_ARRAYSIZE = RegionalRegistrar_MAX + 1;

const ::google::protobuf::EnumDescriptor* RegionalRegistrar_descriptor();
inline const ::std::string& RegionalRegistrar_Name(RegionalRegistrar value) {
  return ::google::protobuf::internal::NameOfEnum(
    RegionalRegistrar_descriptor(), value);
}
inline bool RegionalRegistrar_Parse(
    const ::std::string& name, RegionalRegistrar* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RegionalRegistrar>(
    RegionalRegistrar_descriptor(), name, value);
}
// ===================================================================

class Metadatum : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zsearch.Metadatum) */ {
 public:
  Metadatum();
  virtual ~Metadatum();

  Metadatum(const Metadatum& from);

  inline Metadatum& operator=(const Metadatum& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metadatum& default_instance();

  static inline const Metadatum* internal_default_instance() {
    return reinterpret_cast<const Metadatum*>(
               &_Metadatum_default_instance_);
  }

  void Swap(Metadatum* other);

  // implements Message ----------------------------------------------

  inline Metadatum* New() const PROTOBUF_FINAL { return New(NULL); }

  Metadatum* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Metadatum& from);
  void MergeFrom(const Metadatum& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Metadatum* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:zsearch.Metadatum)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct  protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserdataAtom : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zsearch.UserdataAtom) */ {
 public:
  UserdataAtom();
  virtual ~UserdataAtom();

  UserdataAtom(const UserdataAtom& from);

  inline UserdataAtom& operator=(const UserdataAtom& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserdataAtom& default_instance();

  static inline const UserdataAtom* internal_default_instance() {
    return reinterpret_cast<const UserdataAtom*>(
               &_UserdataAtom_default_instance_);
  }

  void Swap(UserdataAtom* other);

  // implements Message ----------------------------------------------

  inline UserdataAtom* New() const PROTOBUF_FINAL { return New(NULL); }

  UserdataAtom* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserdataAtom& from);
  void MergeFrom(const UserdataAtom& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserdataAtom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .zsearch.Metadatum private_metadata = 3;
  int private_metadata_size() const;
  void clear_private_metadata();
  static const int kPrivateMetadataFieldNumber = 3;
  const ::zsearch::Metadatum& private_metadata(int index) const;
  ::zsearch::Metadatum* mutable_private_metadata(int index);
  ::zsearch::Metadatum* add_private_metadata();
  ::google::protobuf::RepeatedPtrField< ::zsearch::Metadatum >*
      mutable_private_metadata();
  const ::google::protobuf::RepeatedPtrField< ::zsearch::Metadatum >&
      private_metadata() const;

  // repeated .zsearch.Metadatum public_metadata = 4;
  int public_metadata_size() const;
  void clear_public_metadata();
  static const int kPublicMetadataFieldNumber = 4;
  const ::zsearch::Metadatum& public_metadata(int index) const;
  ::zsearch::Metadatum* mutable_public_metadata(int index);
  ::zsearch::Metadatum* add_public_metadata();
  ::google::protobuf::RepeatedPtrField< ::zsearch::Metadatum >*
      mutable_public_metadata();
  const ::google::protobuf::RepeatedPtrField< ::zsearch::Metadatum >&
      public_metadata() const;

  // repeated string private_tags = 5;
  int private_tags_size() const;
  void clear_private_tags();
  static const int kPrivateTagsFieldNumber = 5;
  const ::std::string& private_tags(int index) const;
  ::std::string* mutable_private_tags(int index);
  void set_private_tags(int index, const ::std::string& value);
  void set_private_tags(int index, const char* value);
  void set_private_tags(int index, const char* value, size_t size);
  ::std::string* add_private_tags();
  void add_private_tags(const ::std::string& value);
  void add_private_tags(const char* value);
  void add_private_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& private_tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_private_tags();

  // repeated string public_tags = 6;
  int public_tags_size() const;
  void clear_public_tags();
  static const int kPublicTagsFieldNumber = 6;
  const ::std::string& public_tags(int index) const;
  ::std::string* mutable_public_tags(int index);
  void set_public_tags(int index, const ::std::string& value);
  void set_public_tags(int index, const char* value);
  void set_public_tags(int index, const char* value, size_t size);
  ::std::string* add_public_tags();
  void add_public_tags(const ::std::string& value);
  void add_public_tags(const char* value);
  void add_public_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& public_tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_public_tags();

  // string private_notes = 1;
  void clear_private_notes();
  static const int kPrivateNotesFieldNumber = 1;
  const ::std::string& private_notes() const;
  void set_private_notes(const ::std::string& value);
  #if LANG_CXX11
  void set_private_notes(::std::string&& value);
  #endif
  void set_private_notes(const char* value);
  void set_private_notes(const char* value, size_t size);
  ::std::string* mutable_private_notes();
  ::std::string* release_private_notes();
  void set_allocated_private_notes(::std::string* private_notes);

  // string public_notes = 2;
  void clear_public_notes();
  static const int kPublicNotesFieldNumber = 2;
  const ::std::string& public_notes() const;
  void set_public_notes(const ::std::string& value);
  #if LANG_CXX11
  void set_public_notes(::std::string&& value);
  #endif
  void set_public_notes(const char* value);
  void set_public_notes(const char* value, size_t size);
  ::std::string* mutable_public_notes();
  ::std::string* release_public_notes();
  void set_allocated_public_notes(::std::string* public_notes);

  // @@protoc_insertion_point(class_scope:zsearch.UserdataAtom)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zsearch::Metadatum > private_metadata_;
  ::google::protobuf::RepeatedPtrField< ::zsearch::Metadatum > public_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> private_tags_;
  ::google::protobuf::RepeatedPtrField< ::std::string> public_tags_;
  ::google::protobuf::internal::ArenaStringPtr private_notes_;
  ::google::protobuf::internal::ArenaStringPtr public_notes_;
  mutable int _cached_size_;
  friend struct  protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ASAtom : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zsearch.ASAtom) */ {
 public:
  ASAtom();
  virtual ~ASAtom();

  ASAtom(const ASAtom& from);

  inline ASAtom& operator=(const ASAtom& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ASAtom& default_instance();

  static inline const ASAtom* internal_default_instance() {
    return reinterpret_cast<const ASAtom*>(
               &_ASAtom_default_instance_);
  }

  void Swap(ASAtom* other);

  // implements Message ----------------------------------------------

  inline ASAtom* New() const PROTOBUF_FINAL { return New(NULL); }

  ASAtom* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ASAtom& from);
  void MergeFrom(const ASAtom& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ASAtom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 path = 3 [packed = true];
  int path_size() const;
  void clear_path();
  static const int kPathFieldNumber = 3;
  ::google::protobuf::uint32 path(int index) const;
  void set_path(int index, ::google::protobuf::uint32 value);
  void add_path(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      path() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_path();

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string bgp_prefix = 5;
  void clear_bgp_prefix();
  static const int kBgpPrefixFieldNumber = 5;
  const ::std::string& bgp_prefix() const;
  void set_bgp_prefix(const ::std::string& value);
  #if LANG_CXX11
  void set_bgp_prefix(::std::string&& value);
  #endif
  void set_bgp_prefix(const char* value);
  void set_bgp_prefix(const char* value, size_t size);
  ::std::string* mutable_bgp_prefix();
  ::std::string* release_bgp_prefix();
  void set_allocated_bgp_prefix(::std::string* bgp_prefix);

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string country_code = 7;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 7;
  const ::std::string& country_code() const;
  void set_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_country_code(::std::string&& value);
  #endif
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  ::std::string* mutable_country_code();
  ::std::string* release_country_code();
  void set_allocated_country_code(::std::string* country_code);

  // string organization = 8;
  void clear_organization();
  static const int kOrganizationFieldNumber = 8;
  const ::std::string& organization() const;
  void set_organization(const ::std::string& value);
  #if LANG_CXX11
  void set_organization(::std::string&& value);
  #endif
  void set_organization(const char* value);
  void set_organization(const char* value, size_t size);
  ::std::string* mutable_organization();
  ::std::string* release_organization();
  void set_allocated_organization(::std::string* organization);

  // uint32 asn = 1;
  void clear_asn();
  static const int kAsnFieldNumber = 1;
  ::google::protobuf::uint32 asn() const;
  void set_asn(::google::protobuf::uint32 value);

  // .zsearch.RegionalRegistrar rir = 4;
  void clear_rir();
  static const int kRirFieldNumber = 4;
  ::zsearch::RegionalRegistrar rir() const;
  void set_rir(::zsearch::RegionalRegistrar value);

  // @@protoc_insertion_point(class_scope:zsearch.ASAtom)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > path_;
  mutable int _path_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr bgp_prefix_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr country_code_;
  ::google::protobuf::internal::ArenaStringPtr organization_;
  ::google::protobuf::uint32 asn_;
  int rir_;
  mutable int _cached_size_;
  friend struct  protobuf_common_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Metadatum

// string key = 1;
inline void Metadatum::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Metadatum::key() const {
  // @@protoc_insertion_point(field_get:zsearch.Metadatum.key)
  return key_.GetNoArena();
}
inline void Metadatum::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.Metadatum.key)
}
#if LANG_CXX11
inline void Metadatum::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.Metadatum.key)
}
#endif
inline void Metadatum::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.Metadatum.key)
}
inline void Metadatum::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.Metadatum.key)
}
inline ::std::string* Metadatum::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.Metadatum.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metadatum::release_key() {
  // @@protoc_insertion_point(field_release:zsearch.Metadatum.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadatum::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:zsearch.Metadatum.key)
}

// string value = 2;
inline void Metadatum::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Metadatum::value() const {
  // @@protoc_insertion_point(field_get:zsearch.Metadatum.value)
  return value_.GetNoArena();
}
inline void Metadatum::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.Metadatum.value)
}
#if LANG_CXX11
inline void Metadatum::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.Metadatum.value)
}
#endif
inline void Metadatum::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.Metadatum.value)
}
inline void Metadatum::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.Metadatum.value)
}
inline ::std::string* Metadatum::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.Metadatum.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metadatum::release_value() {
  // @@protoc_insertion_point(field_release:zsearch.Metadatum.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadatum::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:zsearch.Metadatum.value)
}

// -------------------------------------------------------------------

// UserdataAtom

// string private_notes = 1;
inline void UserdataAtom::clear_private_notes() {
  private_notes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserdataAtom::private_notes() const {
  // @@protoc_insertion_point(field_get:zsearch.UserdataAtom.private_notes)
  return private_notes_.GetNoArena();
}
inline void UserdataAtom::set_private_notes(const ::std::string& value) {
  
  private_notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.UserdataAtom.private_notes)
}
#if LANG_CXX11
inline void UserdataAtom::set_private_notes(::std::string&& value) {
  
  private_notes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.UserdataAtom.private_notes)
}
#endif
inline void UserdataAtom::set_private_notes(const char* value) {
  
  private_notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.UserdataAtom.private_notes)
}
inline void UserdataAtom::set_private_notes(const char* value, size_t size) {
  
  private_notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.UserdataAtom.private_notes)
}
inline ::std::string* UserdataAtom::mutable_private_notes() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.UserdataAtom.private_notes)
  return private_notes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserdataAtom::release_private_notes() {
  // @@protoc_insertion_point(field_release:zsearch.UserdataAtom.private_notes)
  
  return private_notes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserdataAtom::set_allocated_private_notes(::std::string* private_notes) {
  if (private_notes != NULL) {
    
  } else {
    
  }
  private_notes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_notes);
  // @@protoc_insertion_point(field_set_allocated:zsearch.UserdataAtom.private_notes)
}

// string public_notes = 2;
inline void UserdataAtom::clear_public_notes() {
  public_notes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserdataAtom::public_notes() const {
  // @@protoc_insertion_point(field_get:zsearch.UserdataAtom.public_notes)
  return public_notes_.GetNoArena();
}
inline void UserdataAtom::set_public_notes(const ::std::string& value) {
  
  public_notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.UserdataAtom.public_notes)
}
#if LANG_CXX11
inline void UserdataAtom::set_public_notes(::std::string&& value) {
  
  public_notes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.UserdataAtom.public_notes)
}
#endif
inline void UserdataAtom::set_public_notes(const char* value) {
  
  public_notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.UserdataAtom.public_notes)
}
inline void UserdataAtom::set_public_notes(const char* value, size_t size) {
  
  public_notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.UserdataAtom.public_notes)
}
inline ::std::string* UserdataAtom::mutable_public_notes() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.UserdataAtom.public_notes)
  return public_notes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserdataAtom::release_public_notes() {
  // @@protoc_insertion_point(field_release:zsearch.UserdataAtom.public_notes)
  
  return public_notes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserdataAtom::set_allocated_public_notes(::std::string* public_notes) {
  if (public_notes != NULL) {
    
  } else {
    
  }
  public_notes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_notes);
  // @@protoc_insertion_point(field_set_allocated:zsearch.UserdataAtom.public_notes)
}

// repeated .zsearch.Metadatum private_metadata = 3;
inline int UserdataAtom::private_metadata_size() const {
  return private_metadata_.size();
}
inline void UserdataAtom::clear_private_metadata() {
  private_metadata_.Clear();
}
inline const ::zsearch::Metadatum& UserdataAtom::private_metadata(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.UserdataAtom.private_metadata)
  return private_metadata_.Get(index);
}
inline ::zsearch::Metadatum* UserdataAtom::mutable_private_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.UserdataAtom.private_metadata)
  return private_metadata_.Mutable(index);
}
inline ::zsearch::Metadatum* UserdataAtom::add_private_metadata() {
  // @@protoc_insertion_point(field_add:zsearch.UserdataAtom.private_metadata)
  return private_metadata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zsearch::Metadatum >*
UserdataAtom::mutable_private_metadata() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.UserdataAtom.private_metadata)
  return &private_metadata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zsearch::Metadatum >&
UserdataAtom::private_metadata() const {
  // @@protoc_insertion_point(field_list:zsearch.UserdataAtom.private_metadata)
  return private_metadata_;
}

// repeated .zsearch.Metadatum public_metadata = 4;
inline int UserdataAtom::public_metadata_size() const {
  return public_metadata_.size();
}
inline void UserdataAtom::clear_public_metadata() {
  public_metadata_.Clear();
}
inline const ::zsearch::Metadatum& UserdataAtom::public_metadata(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.UserdataAtom.public_metadata)
  return public_metadata_.Get(index);
}
inline ::zsearch::Metadatum* UserdataAtom::mutable_public_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.UserdataAtom.public_metadata)
  return public_metadata_.Mutable(index);
}
inline ::zsearch::Metadatum* UserdataAtom::add_public_metadata() {
  // @@protoc_insertion_point(field_add:zsearch.UserdataAtom.public_metadata)
  return public_metadata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::zsearch::Metadatum >*
UserdataAtom::mutable_public_metadata() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.UserdataAtom.public_metadata)
  return &public_metadata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::zsearch::Metadatum >&
UserdataAtom::public_metadata() const {
  // @@protoc_insertion_point(field_list:zsearch.UserdataAtom.public_metadata)
  return public_metadata_;
}

// repeated string private_tags = 5;
inline int UserdataAtom::private_tags_size() const {
  return private_tags_.size();
}
inline void UserdataAtom::clear_private_tags() {
  private_tags_.Clear();
}
inline const ::std::string& UserdataAtom::private_tags(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.UserdataAtom.private_tags)
  return private_tags_.Get(index);
}
inline ::std::string* UserdataAtom::mutable_private_tags(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.UserdataAtom.private_tags)
  return private_tags_.Mutable(index);
}
inline void UserdataAtom::set_private_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zsearch.UserdataAtom.private_tags)
  private_tags_.Mutable(index)->assign(value);
}
inline void UserdataAtom::set_private_tags(int index, const char* value) {
  private_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zsearch.UserdataAtom.private_tags)
}
inline void UserdataAtom::set_private_tags(int index, const char* value, size_t size) {
  private_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zsearch.UserdataAtom.private_tags)
}
inline ::std::string* UserdataAtom::add_private_tags() {
  // @@protoc_insertion_point(field_add_mutable:zsearch.UserdataAtom.private_tags)
  return private_tags_.Add();
}
inline void UserdataAtom::add_private_tags(const ::std::string& value) {
  private_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zsearch.UserdataAtom.private_tags)
}
inline void UserdataAtom::add_private_tags(const char* value) {
  private_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zsearch.UserdataAtom.private_tags)
}
inline void UserdataAtom::add_private_tags(const char* value, size_t size) {
  private_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zsearch.UserdataAtom.private_tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserdataAtom::private_tags() const {
  // @@protoc_insertion_point(field_list:zsearch.UserdataAtom.private_tags)
  return private_tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserdataAtom::mutable_private_tags() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.UserdataAtom.private_tags)
  return &private_tags_;
}

// repeated string public_tags = 6;
inline int UserdataAtom::public_tags_size() const {
  return public_tags_.size();
}
inline void UserdataAtom::clear_public_tags() {
  public_tags_.Clear();
}
inline const ::std::string& UserdataAtom::public_tags(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.UserdataAtom.public_tags)
  return public_tags_.Get(index);
}
inline ::std::string* UserdataAtom::mutable_public_tags(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.UserdataAtom.public_tags)
  return public_tags_.Mutable(index);
}
inline void UserdataAtom::set_public_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zsearch.UserdataAtom.public_tags)
  public_tags_.Mutable(index)->assign(value);
}
inline void UserdataAtom::set_public_tags(int index, const char* value) {
  public_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zsearch.UserdataAtom.public_tags)
}
inline void UserdataAtom::set_public_tags(int index, const char* value, size_t size) {
  public_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zsearch.UserdataAtom.public_tags)
}
inline ::std::string* UserdataAtom::add_public_tags() {
  // @@protoc_insertion_point(field_add_mutable:zsearch.UserdataAtom.public_tags)
  return public_tags_.Add();
}
inline void UserdataAtom::add_public_tags(const ::std::string& value) {
  public_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zsearch.UserdataAtom.public_tags)
}
inline void UserdataAtom::add_public_tags(const char* value) {
  public_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zsearch.UserdataAtom.public_tags)
}
inline void UserdataAtom::add_public_tags(const char* value, size_t size) {
  public_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zsearch.UserdataAtom.public_tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserdataAtom::public_tags() const {
  // @@protoc_insertion_point(field_list:zsearch.UserdataAtom.public_tags)
  return public_tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UserdataAtom::mutable_public_tags() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.UserdataAtom.public_tags)
  return &public_tags_;
}

// -------------------------------------------------------------------

// ASAtom

// uint32 asn = 1;
inline void ASAtom::clear_asn() {
  asn_ = 0u;
}
inline ::google::protobuf::uint32 ASAtom::asn() const {
  // @@protoc_insertion_point(field_get:zsearch.ASAtom.asn)
  return asn_;
}
inline void ASAtom::set_asn(::google::protobuf::uint32 value) {
  
  asn_ = value;
  // @@protoc_insertion_point(field_set:zsearch.ASAtom.asn)
}

// string description = 2;
inline void ASAtom::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ASAtom::description() const {
  // @@protoc_insertion_point(field_get:zsearch.ASAtom.description)
  return description_.GetNoArena();
}
inline void ASAtom::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.ASAtom.description)
}
#if LANG_CXX11
inline void ASAtom::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.ASAtom.description)
}
#endif
inline void ASAtom::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.ASAtom.description)
}
inline void ASAtom::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.ASAtom.description)
}
inline ::std::string* ASAtom::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.ASAtom.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ASAtom::release_description() {
  // @@protoc_insertion_point(field_release:zsearch.ASAtom.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ASAtom::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:zsearch.ASAtom.description)
}

// repeated uint32 path = 3 [packed = true];
inline int ASAtom::path_size() const {
  return path_.size();
}
inline void ASAtom::clear_path() {
  path_.Clear();
}
inline ::google::protobuf::uint32 ASAtom::path(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.ASAtom.path)
  return path_.Get(index);
}
inline void ASAtom::set_path(int index, ::google::protobuf::uint32 value) {
  path_.Set(index, value);
  // @@protoc_insertion_point(field_set:zsearch.ASAtom.path)
}
inline void ASAtom::add_path(::google::protobuf::uint32 value) {
  path_.Add(value);
  // @@protoc_insertion_point(field_add:zsearch.ASAtom.path)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ASAtom::path() const {
  // @@protoc_insertion_point(field_list:zsearch.ASAtom.path)
  return path_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ASAtom::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.ASAtom.path)
  return &path_;
}

// .zsearch.RegionalRegistrar rir = 4;
inline void ASAtom::clear_rir() {
  rir_ = 0;
}
inline ::zsearch::RegionalRegistrar ASAtom::rir() const {
  // @@protoc_insertion_point(field_get:zsearch.ASAtom.rir)
  return static_cast< ::zsearch::RegionalRegistrar >(rir_);
}
inline void ASAtom::set_rir(::zsearch::RegionalRegistrar value) {
  
  rir_ = value;
  // @@protoc_insertion_point(field_set:zsearch.ASAtom.rir)
}

// string bgp_prefix = 5;
inline void ASAtom::clear_bgp_prefix() {
  bgp_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ASAtom::bgp_prefix() const {
  // @@protoc_insertion_point(field_get:zsearch.ASAtom.bgp_prefix)
  return bgp_prefix_.GetNoArena();
}
inline void ASAtom::set_bgp_prefix(const ::std::string& value) {
  
  bgp_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.ASAtom.bgp_prefix)
}
#if LANG_CXX11
inline void ASAtom::set_bgp_prefix(::std::string&& value) {
  
  bgp_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.ASAtom.bgp_prefix)
}
#endif
inline void ASAtom::set_bgp_prefix(const char* value) {
  
  bgp_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.ASAtom.bgp_prefix)
}
inline void ASAtom::set_bgp_prefix(const char* value, size_t size) {
  
  bgp_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.ASAtom.bgp_prefix)
}
inline ::std::string* ASAtom::mutable_bgp_prefix() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.ASAtom.bgp_prefix)
  return bgp_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ASAtom::release_bgp_prefix() {
  // @@protoc_insertion_point(field_release:zsearch.ASAtom.bgp_prefix)
  
  return bgp_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ASAtom::set_allocated_bgp_prefix(::std::string* bgp_prefix) {
  if (bgp_prefix != NULL) {
    
  } else {
    
  }
  bgp_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bgp_prefix);
  // @@protoc_insertion_point(field_set_allocated:zsearch.ASAtom.bgp_prefix)
}

// string name = 6;
inline void ASAtom::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ASAtom::name() const {
  // @@protoc_insertion_point(field_get:zsearch.ASAtom.name)
  return name_.GetNoArena();
}
inline void ASAtom::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.ASAtom.name)
}
#if LANG_CXX11
inline void ASAtom::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.ASAtom.name)
}
#endif
inline void ASAtom::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.ASAtom.name)
}
inline void ASAtom::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.ASAtom.name)
}
inline ::std::string* ASAtom::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.ASAtom.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ASAtom::release_name() {
  // @@protoc_insertion_point(field_release:zsearch.ASAtom.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ASAtom::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zsearch.ASAtom.name)
}

// string country_code = 7;
inline void ASAtom::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ASAtom::country_code() const {
  // @@protoc_insertion_point(field_get:zsearch.ASAtom.country_code)
  return country_code_.GetNoArena();
}
inline void ASAtom::set_country_code(const ::std::string& value) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.ASAtom.country_code)
}
#if LANG_CXX11
inline void ASAtom::set_country_code(::std::string&& value) {
  
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.ASAtom.country_code)
}
#endif
inline void ASAtom::set_country_code(const char* value) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.ASAtom.country_code)
}
inline void ASAtom::set_country_code(const char* value, size_t size) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.ASAtom.country_code)
}
inline ::std::string* ASAtom::mutable_country_code() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.ASAtom.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ASAtom::release_country_code() {
  // @@protoc_insertion_point(field_release:zsearch.ASAtom.country_code)
  
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ASAtom::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    
  } else {
    
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:zsearch.ASAtom.country_code)
}

// string organization = 8;
inline void ASAtom::clear_organization() {
  organization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ASAtom::organization() const {
  // @@protoc_insertion_point(field_get:zsearch.ASAtom.organization)
  return organization_.GetNoArena();
}
inline void ASAtom::set_organization(const ::std::string& value) {
  
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.ASAtom.organization)
}
#if LANG_CXX11
inline void ASAtom::set_organization(::std::string&& value) {
  
  organization_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.ASAtom.organization)
}
#endif
inline void ASAtom::set_organization(const char* value) {
  
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.ASAtom.organization)
}
inline void ASAtom::set_organization(const char* value, size_t size) {
  
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.ASAtom.organization)
}
inline ::std::string* ASAtom::mutable_organization() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.ASAtom.organization)
  return organization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ASAtom::release_organization() {
  // @@protoc_insertion_point(field_release:zsearch.ASAtom.organization)
  
  return organization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ASAtom::set_allocated_organization(::std::string* organization) {
  if (organization != NULL) {
    
  } else {
    
  }
  organization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organization);
  // @@protoc_insertion_point(field_set_allocated:zsearch.ASAtom.organization)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace zsearch

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zsearch::DeltaType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zsearch::DeltaType>() {
  return ::zsearch::DeltaType_descriptor();
}
template <> struct is_proto_enum< ::zsearch::RegionalRegistrar> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zsearch::RegionalRegistrar>() {
  return ::zsearch::RegionalRegistrar_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
