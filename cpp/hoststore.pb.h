// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hoststore.proto

#ifndef PROTOBUF_hoststore_2eproto__INCLUDED
#define PROTOBUF_hoststore_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
namespace censys_definitions {
class ASAtom;
class ASAtomDefaultTypeInternal;
extern ASAtomDefaultTypeInternal _ASAtom_default_instance_;
class AnonymousKey;
class AnonymousKeyDefaultTypeInternal;
extern AnonymousKeyDefaultTypeInternal _AnonymousKey_default_instance_;
class Delta;
class DeltaDefaultTypeInternal;
extern DeltaDefaultTypeInternal _Delta_default_instance_;
class LocationAtom;
class LocationAtomDefaultTypeInternal;
extern LocationAtomDefaultTypeInternal _LocationAtom_default_instance_;
class Metadatum;
class MetadatumDefaultTypeInternal;
extern MetadatumDefaultTypeInternal _Metadatum_default_instance_;
class ProtocolAtom;
class ProtocolAtomDefaultTypeInternal;
extern ProtocolAtomDefaultTypeInternal _ProtocolAtom_default_instance_;
class Record;
class RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
class UserdataAtom;
class UserdataAtomDefaultTypeInternal;
extern UserdataAtomDefaultTypeInternal _UserdataAtom_default_instance_;
class WHOISAtom;
class WHOISAtomDefaultTypeInternal;
extern WHOISAtomDefaultTypeInternal _WHOISAtom_default_instance_;
}  // namespace censys_definitions

namespace censys_definitions {

namespace protobuf_hoststore_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_hoststore_2eproto

// ===================================================================

class WHOISAtom : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:censys_definitions.WHOISAtom) */ {
 public:
  WHOISAtom();
  virtual ~WHOISAtom();

  WHOISAtom(const WHOISAtom& from);

  inline WHOISAtom& operator=(const WHOISAtom& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WHOISAtom& default_instance();

  static inline const WHOISAtom* internal_default_instance() {
    return reinterpret_cast<const WHOISAtom*>(
               &_WHOISAtom_default_instance_);
  }

  void Swap(WHOISAtom* other);

  // implements Message ----------------------------------------------

  inline WHOISAtom* New() const PROTOBUF_FINAL { return New(NULL); }

  WHOISAtom* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WHOISAtom& from);
  void MergeFrom(const WHOISAtom& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WHOISAtom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:censys_definitions.WHOISAtom)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct  protobuf_hoststore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LocationAtom : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:censys_definitions.LocationAtom) */ {
 public:
  LocationAtom();
  virtual ~LocationAtom();

  LocationAtom(const LocationAtom& from);

  inline LocationAtom& operator=(const LocationAtom& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LocationAtom& default_instance();

  static inline const LocationAtom* internal_default_instance() {
    return reinterpret_cast<const LocationAtom*>(
               &_LocationAtom_default_instance_);
  }

  void Swap(LocationAtom* other);

  // implements Message ----------------------------------------------

  inline LocationAtom* New() const PROTOBUF_FINAL { return New(NULL); }

  LocationAtom* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LocationAtom& from);
  void MergeFrom(const LocationAtom& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LocationAtom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string continent = 1;
  void clear_continent();
  static const int kContinentFieldNumber = 1;
  const ::std::string& continent() const;
  void set_continent(const ::std::string& value);
  #if LANG_CXX11
  void set_continent(::std::string&& value);
  #endif
  void set_continent(const char* value);
  void set_continent(const char* value, size_t size);
  ::std::string* mutable_continent();
  ::std::string* release_continent();
  void set_allocated_continent(::std::string* continent);

  // string country = 2;
  void clear_country();
  static const int kCountryFieldNumber = 2;
  const ::std::string& country() const;
  void set_country(const ::std::string& value);
  #if LANG_CXX11
  void set_country(::std::string&& value);
  #endif
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  ::std::string* mutable_country();
  ::std::string* release_country();
  void set_allocated_country(::std::string* country);

  // string country_code = 3;
  void clear_country_code();
  static const int kCountryCodeFieldNumber = 3;
  const ::std::string& country_code() const;
  void set_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_country_code(::std::string&& value);
  #endif
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  ::std::string* mutable_country_code();
  ::std::string* release_country_code();
  void set_allocated_country_code(::std::string* country_code);

  // string city = 4;
  void clear_city();
  static const int kCityFieldNumber = 4;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // string postal_code = 5;
  void clear_postal_code();
  static const int kPostalCodeFieldNumber = 5;
  const ::std::string& postal_code() const;
  void set_postal_code(const ::std::string& value);
  #if LANG_CXX11
  void set_postal_code(::std::string&& value);
  #endif
  void set_postal_code(const char* value);
  void set_postal_code(const char* value, size_t size);
  ::std::string* mutable_postal_code();
  ::std::string* release_postal_code();
  void set_allocated_postal_code(::std::string* postal_code);

  // string timezone = 6;
  void clear_timezone();
  static const int kTimezoneFieldNumber = 6;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  #if LANG_CXX11
  void set_timezone(::std::string&& value);
  #endif
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // string province = 7;
  void clear_province();
  static const int kProvinceFieldNumber = 7;
  const ::std::string& province() const;
  void set_province(const ::std::string& value);
  #if LANG_CXX11
  void set_province(::std::string&& value);
  #endif
  void set_province(const char* value);
  void set_province(const char* value, size_t size);
  ::std::string* mutable_province();
  ::std::string* release_province();
  void set_allocated_province(::std::string* province);

  // string registered_country = 10;
  void clear_registered_country();
  static const int kRegisteredCountryFieldNumber = 10;
  const ::std::string& registered_country() const;
  void set_registered_country(const ::std::string& value);
  #if LANG_CXX11
  void set_registered_country(::std::string&& value);
  #endif
  void set_registered_country(const char* value);
  void set_registered_country(const char* value, size_t size);
  ::std::string* mutable_registered_country();
  ::std::string* release_registered_country();
  void set_allocated_registered_country(::std::string* registered_country);

  // string registered_country_code = 11;
  void clear_registered_country_code();
  static const int kRegisteredCountryCodeFieldNumber = 11;
  const ::std::string& registered_country_code() const;
  void set_registered_country_code(const ::std::string& value);
  #if LANG_CXX11
  void set_registered_country_code(::std::string&& value);
  #endif
  void set_registered_country_code(const char* value);
  void set_registered_country_code(const char* value, size_t size);
  ::std::string* mutable_registered_country_code();
  ::std::string* release_registered_country_code();
  void set_allocated_registered_country_code(::std::string* registered_country_code);

  // double latitude = 8;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 8;
  double latitude() const;
  void set_latitude(double value);

  // double longitude = 9;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 9;
  double longitude() const;
  void set_longitude(double value);

  // @@protoc_insertion_point(class_scope:censys_definitions.LocationAtom)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr continent_;
  ::google::protobuf::internal::ArenaStringPtr country_;
  ::google::protobuf::internal::ArenaStringPtr country_code_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr postal_code_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::google::protobuf::internal::ArenaStringPtr province_;
  ::google::protobuf::internal::ArenaStringPtr registered_country_;
  ::google::protobuf::internal::ArenaStringPtr registered_country_code_;
  double latitude_;
  double longitude_;
  mutable int _cached_size_;
  friend struct  protobuf_hoststore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProtocolAtom : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:censys_definitions.ProtocolAtom) */ {
 public:
  ProtocolAtom();
  virtual ~ProtocolAtom();

  ProtocolAtom(const ProtocolAtom& from);

  inline ProtocolAtom& operator=(const ProtocolAtom& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtocolAtom& default_instance();

  static inline const ProtocolAtom* internal_default_instance() {
    return reinterpret_cast<const ProtocolAtom*>(
               &_ProtocolAtom_default_instance_);
  }

  void Swap(ProtocolAtom* other);

  // implements Message ----------------------------------------------

  inline ProtocolAtom* New() const PROTOBUF_FINAL { return New(NULL); }

  ProtocolAtom* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProtocolAtom& from);
  void MergeFrom(const ProtocolAtom& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProtocolAtom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .censys_definitions.Metadatum metadata = 1;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  const ::censys_definitions::Metadatum& metadata(int index) const;
  ::censys_definitions::Metadatum* mutable_metadata(int index);
  ::censys_definitions::Metadatum* add_metadata();
  ::google::protobuf::RepeatedPtrField< ::censys_definitions::Metadatum >*
      mutable_metadata();
  const ::google::protobuf::RepeatedPtrField< ::censys_definitions::Metadatum >&
      metadata() const;

  // repeated string tags = 2;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 2;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // string data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:censys_definitions.ProtocolAtom)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::censys_definitions::Metadatum > metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct  protobuf_hoststore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnonymousKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:censys_definitions.AnonymousKey) */ {
 public:
  AnonymousKey();
  virtual ~AnonymousKey();

  AnonymousKey(const AnonymousKey& from);

  inline AnonymousKey& operator=(const AnonymousKey& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnonymousKey& default_instance();

  static inline const AnonymousKey* internal_default_instance() {
    return reinterpret_cast<const AnonymousKey*>(
               &_AnonymousKey_default_instance_);
  }

  void Swap(AnonymousKey* other);

  // implements Message ----------------------------------------------

  inline AnonymousKey* New() const PROTOBUF_FINAL { return New(NULL); }

  AnonymousKey* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AnonymousKey& from);
  void MergeFrom(const AnonymousKey& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AnonymousKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 port = 1;
  void clear_port();
  static const int kPortFieldNumber = 1;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint32 protocol = 2;
  void clear_protocol();
  static const int kProtocolFieldNumber = 2;
  ::google::protobuf::uint32 protocol() const;
  void set_protocol(::google::protobuf::uint32 value);

  // uint32 subprotocol = 3;
  void clear_subprotocol();
  static const int kSubprotocolFieldNumber = 3;
  ::google::protobuf::uint32 subprotocol() const;
  void set_subprotocol(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:censys_definitions.AnonymousKey)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 protocol_;
  ::google::protobuf::uint32 subprotocol_;
  mutable int _cached_size_;
  friend struct  protobuf_hoststore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:censys_definitions.Record) */ {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  enum DataOneofCase {
    kAtom = 11,
    kPrivateLocation = 12,
    kAsAtom = 13,
    kWhois = 14,
    kUserdata = 15,
    kPublicLocation = 17,
    kAlexaRank = 16,
    kQuantcastRank = 19,
    kCiscoUmbrellaRank = 20,
    DATA_ONEOF_NOT_SET = 0,
  };

  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }

  void Swap(Record* other);

  // implements Message ----------------------------------------------

  inline Record* New() const PROTOBUF_FINAL { return New(NULL); }

  Record* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Record* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string domain = 5;
  void clear_domain();
  static const int kDomainFieldNumber = 5;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // bytes sha256fp = 8;
  void clear_sha256fp();
  static const int kSha256FpFieldNumber = 8;
  const ::std::string& sha256fp() const;
  void set_sha256fp(const ::std::string& value);
  #if LANG_CXX11
  void set_sha256fp(::std::string&& value);
  #endif
  void set_sha256fp(const char* value);
  void set_sha256fp(const void* value, size_t size);
  ::std::string* mutable_sha256fp();
  ::std::string* release_sha256fp();
  void set_allocated_sha256fp(::std::string* sha256fp);

  // fixed32 ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  ::google::protobuf::uint32 ip() const;
  void set_ip(::google::protobuf::uint32 value);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint32 protocol = 3;
  void clear_protocol();
  static const int kProtocolFieldNumber = 3;
  ::google::protobuf::uint32 protocol() const;
  void set_protocol(::google::protobuf::uint32 value);

  // uint32 subprotocol = 4;
  void clear_subprotocol();
  static const int kSubprotocolFieldNumber = 4;
  ::google::protobuf::uint32 subprotocol() const;
  void set_subprotocol(::google::protobuf::uint32 value);

  // fixed32 timestamp = 6;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // uint32 scanid = 7;
  void clear_scanid();
  static const int kScanidFieldNumber = 7;
  ::google::protobuf::uint32 scanid() const;
  void set_scanid(::google::protobuf::uint32 value);

  // uint32 first_seen_at_scan_id = 9;
  void clear_first_seen_at_scan_id();
  static const int kFirstSeenAtScanIdFieldNumber = 9;
  ::google::protobuf::uint32 first_seen_at_scan_id() const;
  void set_first_seen_at_scan_id(::google::protobuf::uint32 value);

  // uint32 last_seen_at_scan_id = 10;
  void clear_last_seen_at_scan_id();
  static const int kLastSeenAtScanIdFieldNumber = 10;
  ::google::protobuf::uint32 last_seen_at_scan_id() const;
  void set_last_seen_at_scan_id(::google::protobuf::uint32 value);

  // uint64 version = 18;
  void clear_version();
  static const int kVersionFieldNumber = 18;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // .censys_definitions.ProtocolAtom atom = 11;
  bool has_atom() const;
  void clear_atom();
  static const int kAtomFieldNumber = 11;
  const ::censys_definitions::ProtocolAtom& atom() const;
  ::censys_definitions::ProtocolAtom* mutable_atom();
  ::censys_definitions::ProtocolAtom* release_atom();
  void set_allocated_atom(::censys_definitions::ProtocolAtom* atom);

  // .censys_definitions.LocationAtom private_location = 12;
  bool has_private_location() const;
  void clear_private_location();
  static const int kPrivateLocationFieldNumber = 12;
  const ::censys_definitions::LocationAtom& private_location() const;
  ::censys_definitions::LocationAtom* mutable_private_location();
  ::censys_definitions::LocationAtom* release_private_location();
  void set_allocated_private_location(::censys_definitions::LocationAtom* private_location);

  // .censys_definitions.ASAtom as_atom = 13;
  bool has_as_atom() const;
  void clear_as_atom();
  static const int kAsAtomFieldNumber = 13;
  const ::censys_definitions::ASAtom& as_atom() const;
  ::censys_definitions::ASAtom* mutable_as_atom();
  ::censys_definitions::ASAtom* release_as_atom();
  void set_allocated_as_atom(::censys_definitions::ASAtom* as_atom);

  // .censys_definitions.WHOISAtom whois = 14;
  bool has_whois() const;
  void clear_whois();
  static const int kWhoisFieldNumber = 14;
  const ::censys_definitions::WHOISAtom& whois() const;
  ::censys_definitions::WHOISAtom* mutable_whois();
  ::censys_definitions::WHOISAtom* release_whois();
  void set_allocated_whois(::censys_definitions::WHOISAtom* whois);

  // .censys_definitions.UserdataAtom userdata = 15;
  bool has_userdata() const;
  void clear_userdata();
  static const int kUserdataFieldNumber = 15;
  const ::censys_definitions::UserdataAtom& userdata() const;
  ::censys_definitions::UserdataAtom* mutable_userdata();
  ::censys_definitions::UserdataAtom* release_userdata();
  void set_allocated_userdata(::censys_definitions::UserdataAtom* userdata);

  // .censys_definitions.LocationAtom public_location = 17;
  bool has_public_location() const;
  void clear_public_location();
  static const int kPublicLocationFieldNumber = 17;
  const ::censys_definitions::LocationAtom& public_location() const;
  ::censys_definitions::LocationAtom* mutable_public_location();
  ::censys_definitions::LocationAtom* release_public_location();
  void set_allocated_public_location(::censys_definitions::LocationAtom* public_location);

  // uint32 alexa_rank = 16;
  private:
  bool has_alexa_rank() const;
  public:
  void clear_alexa_rank();
  static const int kAlexaRankFieldNumber = 16;
  ::google::protobuf::uint32 alexa_rank() const;
  void set_alexa_rank(::google::protobuf::uint32 value);

  // uint32 quantcast_rank = 19;
  private:
  bool has_quantcast_rank() const;
  public:
  void clear_quantcast_rank();
  static const int kQuantcastRankFieldNumber = 19;
  ::google::protobuf::uint32 quantcast_rank() const;
  void set_quantcast_rank(::google::protobuf::uint32 value);

  // uint32 cisco_umbrella_rank = 20;
  private:
  bool has_cisco_umbrella_rank() const;
  public:
  void clear_cisco_umbrella_rank();
  static const int kCiscoUmbrellaRankFieldNumber = 20;
  ::google::protobuf::uint32 cisco_umbrella_rank() const;
  void set_cisco_umbrella_rank(::google::protobuf::uint32 value);

  DataOneofCase data_oneof_case() const;
  // @@protoc_insertion_point(class_scope:censys_definitions.Record)
 private:
  void set_has_atom();
  void set_has_private_location();
  void set_has_as_atom();
  void set_has_whois();
  void set_has_userdata();
  void set_has_public_location();
  void set_has_alexa_rank();
  void set_has_quantcast_rank();
  void set_has_cisco_umbrella_rank();

  inline bool has_data_oneof() const;
  void clear_data_oneof();
  inline void clear_has_data_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr sha256fp_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 protocol_;
  ::google::protobuf::uint32 subprotocol_;
  ::google::protobuf::uint32 timestamp_;
  ::google::protobuf::uint32 scanid_;
  ::google::protobuf::uint32 first_seen_at_scan_id_;
  ::google::protobuf::uint32 last_seen_at_scan_id_;
  ::google::protobuf::uint64 version_;
  union DataOneofUnion {
    DataOneofUnion() {}
    ::censys_definitions::ProtocolAtom* atom_;
    ::censys_definitions::LocationAtom* private_location_;
    ::censys_definitions::ASAtom* as_atom_;
    ::censys_definitions::WHOISAtom* whois_;
    ::censys_definitions::UserdataAtom* userdata_;
    ::censys_definitions::LocationAtom* public_location_;
    ::google::protobuf::uint32 alexa_rank_;
    ::google::protobuf::uint32 quantcast_rank_;
    ::google::protobuf::uint32 cisco_umbrella_rank_;
  } data_oneof_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct  protobuf_hoststore_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Delta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:censys_definitions.Delta) */ {
 public:
  Delta();
  virtual ~Delta();

  Delta(const Delta& from);

  inline Delta& operator=(const Delta& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Delta& default_instance();

  static inline const Delta* internal_default_instance() {
    return reinterpret_cast<const Delta*>(
               &_Delta_default_instance_);
  }

  void Swap(Delta* other);

  // implements Message ----------------------------------------------

  inline Delta* New() const PROTOBUF_FINAL { return New(NULL); }

  Delta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Delta& from);
  void MergeFrom(const Delta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Delta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .censys_definitions.Record records = 5;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 5;
  const ::censys_definitions::Record& records(int index) const;
  ::censys_definitions::Record* mutable_records(int index);
  ::censys_definitions::Record* add_records();
  ::google::protobuf::RepeatedPtrField< ::censys_definitions::Record >*
      mutable_records();
  const ::google::protobuf::RepeatedPtrField< ::censys_definitions::Record >&
      records() const;

  // string domain = 3;
  void clear_domain();
  static const int kDomainFieldNumber = 3;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // .censys_definitions.DeltaType delta_type = 1;
  void clear_delta_type();
  static const int kDeltaTypeFieldNumber = 1;
  ::censys_definitions::DeltaType delta_type() const;
  void set_delta_type(::censys_definitions::DeltaType value);

  // fixed32 ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  ::google::protobuf::uint32 ip() const;
  void set_ip(::google::protobuf::uint32 value);

  // uint64 version = 4;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:censys_definitions.Delta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::censys_definitions::Record > records_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  int delta_type_;
  ::google::protobuf::uint32 ip_;
  ::google::protobuf::uint64 version_;
  mutable int _cached_size_;
  friend struct  protobuf_hoststore_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// WHOISAtom

// -------------------------------------------------------------------

// LocationAtom

// string continent = 1;
inline void LocationAtom::clear_continent() {
  continent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationAtom::continent() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.continent)
  return continent_.GetNoArena();
}
inline void LocationAtom::set_continent(const ::std::string& value) {
  
  continent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.continent)
}
#if LANG_CXX11
inline void LocationAtom::set_continent(::std::string&& value) {
  
  continent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.continent)
}
#endif
inline void LocationAtom::set_continent(const char* value) {
  
  continent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.continent)
}
inline void LocationAtom::set_continent(const char* value, size_t size) {
  
  continent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.continent)
}
inline ::std::string* LocationAtom::mutable_continent() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.continent)
  return continent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationAtom::release_continent() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.continent)
  
  return continent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationAtom::set_allocated_continent(::std::string* continent) {
  if (continent != NULL) {
    
  } else {
    
  }
  continent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), continent);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.continent)
}

// string country = 2;
inline void LocationAtom::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationAtom::country() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.country)
  return country_.GetNoArena();
}
inline void LocationAtom::set_country(const ::std::string& value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.country)
}
#if LANG_CXX11
inline void LocationAtom::set_country(::std::string&& value) {
  
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.country)
}
#endif
inline void LocationAtom::set_country(const char* value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.country)
}
inline void LocationAtom::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.country)
}
inline ::std::string* LocationAtom::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationAtom::release_country() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.country)
  
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationAtom::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.country)
}

// string country_code = 3;
inline void LocationAtom::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationAtom::country_code() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.country_code)
  return country_code_.GetNoArena();
}
inline void LocationAtom::set_country_code(const ::std::string& value) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.country_code)
}
#if LANG_CXX11
inline void LocationAtom::set_country_code(::std::string&& value) {
  
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.country_code)
}
#endif
inline void LocationAtom::set_country_code(const char* value) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.country_code)
}
inline void LocationAtom::set_country_code(const char* value, size_t size) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.country_code)
}
inline ::std::string* LocationAtom::mutable_country_code() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationAtom::release_country_code() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.country_code)
  
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationAtom::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    
  } else {
    
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.country_code)
}

// string city = 4;
inline void LocationAtom::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationAtom::city() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.city)
  return city_.GetNoArena();
}
inline void LocationAtom::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.city)
}
#if LANG_CXX11
inline void LocationAtom::set_city(::std::string&& value) {
  
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.city)
}
#endif
inline void LocationAtom::set_city(const char* value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.city)
}
inline void LocationAtom::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.city)
}
inline ::std::string* LocationAtom::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationAtom::release_city() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationAtom::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.city)
}

// string postal_code = 5;
inline void LocationAtom::clear_postal_code() {
  postal_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationAtom::postal_code() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.postal_code)
  return postal_code_.GetNoArena();
}
inline void LocationAtom::set_postal_code(const ::std::string& value) {
  
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.postal_code)
}
#if LANG_CXX11
inline void LocationAtom::set_postal_code(::std::string&& value) {
  
  postal_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.postal_code)
}
#endif
inline void LocationAtom::set_postal_code(const char* value) {
  
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.postal_code)
}
inline void LocationAtom::set_postal_code(const char* value, size_t size) {
  
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.postal_code)
}
inline ::std::string* LocationAtom::mutable_postal_code() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.postal_code)
  return postal_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationAtom::release_postal_code() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.postal_code)
  
  return postal_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationAtom::set_allocated_postal_code(::std::string* postal_code) {
  if (postal_code != NULL) {
    
  } else {
    
  }
  postal_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), postal_code);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.postal_code)
}

// string timezone = 6;
inline void LocationAtom::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationAtom::timezone() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.timezone)
  return timezone_.GetNoArena();
}
inline void LocationAtom::set_timezone(const ::std::string& value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.timezone)
}
#if LANG_CXX11
inline void LocationAtom::set_timezone(::std::string&& value) {
  
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.timezone)
}
#endif
inline void LocationAtom::set_timezone(const char* value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.timezone)
}
inline void LocationAtom::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.timezone)
}
inline ::std::string* LocationAtom::mutable_timezone() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationAtom::release_timezone() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.timezone)
  
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationAtom::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.timezone)
}

// string province = 7;
inline void LocationAtom::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationAtom::province() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.province)
  return province_.GetNoArena();
}
inline void LocationAtom::set_province(const ::std::string& value) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.province)
}
#if LANG_CXX11
inline void LocationAtom::set_province(::std::string&& value) {
  
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.province)
}
#endif
inline void LocationAtom::set_province(const char* value) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.province)
}
inline void LocationAtom::set_province(const char* value, size_t size) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.province)
}
inline ::std::string* LocationAtom::mutable_province() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationAtom::release_province() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.province)
  
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationAtom::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    
  } else {
    
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.province)
}

// double latitude = 8;
inline void LocationAtom::clear_latitude() {
  latitude_ = 0;
}
inline double LocationAtom::latitude() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.latitude)
  return latitude_;
}
inline void LocationAtom::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.latitude)
}

// double longitude = 9;
inline void LocationAtom::clear_longitude() {
  longitude_ = 0;
}
inline double LocationAtom::longitude() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.longitude)
  return longitude_;
}
inline void LocationAtom::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.longitude)
}

// string registered_country = 10;
inline void LocationAtom::clear_registered_country() {
  registered_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationAtom::registered_country() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.registered_country)
  return registered_country_.GetNoArena();
}
inline void LocationAtom::set_registered_country(const ::std::string& value) {
  
  registered_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.registered_country)
}
#if LANG_CXX11
inline void LocationAtom::set_registered_country(::std::string&& value) {
  
  registered_country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.registered_country)
}
#endif
inline void LocationAtom::set_registered_country(const char* value) {
  
  registered_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.registered_country)
}
inline void LocationAtom::set_registered_country(const char* value, size_t size) {
  
  registered_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.registered_country)
}
inline ::std::string* LocationAtom::mutable_registered_country() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.registered_country)
  return registered_country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationAtom::release_registered_country() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.registered_country)
  
  return registered_country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationAtom::set_allocated_registered_country(::std::string* registered_country) {
  if (registered_country != NULL) {
    
  } else {
    
  }
  registered_country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registered_country);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.registered_country)
}

// string registered_country_code = 11;
inline void LocationAtom::clear_registered_country_code() {
  registered_country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationAtom::registered_country_code() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.registered_country_code)
  return registered_country_code_.GetNoArena();
}
inline void LocationAtom::set_registered_country_code(const ::std::string& value) {
  
  registered_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.registered_country_code)
}
#if LANG_CXX11
inline void LocationAtom::set_registered_country_code(::std::string&& value) {
  
  registered_country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.registered_country_code)
}
#endif
inline void LocationAtom::set_registered_country_code(const char* value) {
  
  registered_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.registered_country_code)
}
inline void LocationAtom::set_registered_country_code(const char* value, size_t size) {
  
  registered_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.registered_country_code)
}
inline ::std::string* LocationAtom::mutable_registered_country_code() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.registered_country_code)
  return registered_country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationAtom::release_registered_country_code() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.registered_country_code)
  
  return registered_country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationAtom::set_allocated_registered_country_code(::std::string* registered_country_code) {
  if (registered_country_code != NULL) {
    
  } else {
    
  }
  registered_country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registered_country_code);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.registered_country_code)
}

// -------------------------------------------------------------------

// ProtocolAtom

// repeated .censys_definitions.Metadatum metadata = 1;
inline int ProtocolAtom::metadata_size() const {
  return metadata_.size();
}
inline void ProtocolAtom::clear_metadata() {
  metadata_.Clear();
}
inline const ::censys_definitions::Metadatum& ProtocolAtom::metadata(int index) const {
  // @@protoc_insertion_point(field_get:censys_definitions.ProtocolAtom.metadata)
  return metadata_.Get(index);
}
inline ::censys_definitions::Metadatum* ProtocolAtom::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:censys_definitions.ProtocolAtom.metadata)
  return metadata_.Mutable(index);
}
inline ::censys_definitions::Metadatum* ProtocolAtom::add_metadata() {
  // @@protoc_insertion_point(field_add:censys_definitions.ProtocolAtom.metadata)
  return metadata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::censys_definitions::Metadatum >*
ProtocolAtom::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:censys_definitions.ProtocolAtom.metadata)
  return &metadata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::censys_definitions::Metadatum >&
ProtocolAtom::metadata() const {
  // @@protoc_insertion_point(field_list:censys_definitions.ProtocolAtom.metadata)
  return metadata_;
}

// repeated string tags = 2;
inline int ProtocolAtom::tags_size() const {
  return tags_.size();
}
inline void ProtocolAtom::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& ProtocolAtom::tags(int index) const {
  // @@protoc_insertion_point(field_get:censys_definitions.ProtocolAtom.tags)
  return tags_.Get(index);
}
inline ::std::string* ProtocolAtom::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:censys_definitions.ProtocolAtom.tags)
  return tags_.Mutable(index);
}
inline void ProtocolAtom::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:censys_definitions.ProtocolAtom.tags)
  tags_.Mutable(index)->assign(value);
}
inline void ProtocolAtom::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:censys_definitions.ProtocolAtom.tags)
}
inline void ProtocolAtom::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.ProtocolAtom.tags)
}
inline ::std::string* ProtocolAtom::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:censys_definitions.ProtocolAtom.tags)
  return tags_.Add();
}
inline void ProtocolAtom::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:censys_definitions.ProtocolAtom.tags)
}
inline void ProtocolAtom::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:censys_definitions.ProtocolAtom.tags)
}
inline void ProtocolAtom::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:censys_definitions.ProtocolAtom.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProtocolAtom::tags() const {
  // @@protoc_insertion_point(field_list:censys_definitions.ProtocolAtom.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProtocolAtom::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:censys_definitions.ProtocolAtom.tags)
  return &tags_;
}

// string data = 3;
inline void ProtocolAtom::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtocolAtom::data() const {
  // @@protoc_insertion_point(field_get:censys_definitions.ProtocolAtom.data)
  return data_.GetNoArena();
}
inline void ProtocolAtom::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.ProtocolAtom.data)
}
#if LANG_CXX11
inline void ProtocolAtom::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.ProtocolAtom.data)
}
#endif
inline void ProtocolAtom::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.ProtocolAtom.data)
}
inline void ProtocolAtom::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.ProtocolAtom.data)
}
inline ::std::string* ProtocolAtom::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.ProtocolAtom.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtocolAtom::release_data() {
  // @@protoc_insertion_point(field_release:censys_definitions.ProtocolAtom.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtocolAtom::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.ProtocolAtom.data)
}

// -------------------------------------------------------------------

// AnonymousKey

// uint32 port = 1;
inline void AnonymousKey::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 AnonymousKey::port() const {
  // @@protoc_insertion_point(field_get:censys_definitions.AnonymousKey.port)
  return port_;
}
inline void AnonymousKey::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.AnonymousKey.port)
}

// uint32 protocol = 2;
inline void AnonymousKey::clear_protocol() {
  protocol_ = 0u;
}
inline ::google::protobuf::uint32 AnonymousKey::protocol() const {
  // @@protoc_insertion_point(field_get:censys_definitions.AnonymousKey.protocol)
  return protocol_;
}
inline void AnonymousKey::set_protocol(::google::protobuf::uint32 value) {
  
  protocol_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.AnonymousKey.protocol)
}

// uint32 subprotocol = 3;
inline void AnonymousKey::clear_subprotocol() {
  subprotocol_ = 0u;
}
inline ::google::protobuf::uint32 AnonymousKey::subprotocol() const {
  // @@protoc_insertion_point(field_get:censys_definitions.AnonymousKey.subprotocol)
  return subprotocol_;
}
inline void AnonymousKey::set_subprotocol(::google::protobuf::uint32 value) {
  
  subprotocol_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.AnonymousKey.subprotocol)
}

// -------------------------------------------------------------------

// Record

// fixed32 ip = 1;
inline void Record::clear_ip() {
  ip_ = 0u;
}
inline ::google::protobuf::uint32 Record::ip() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.ip)
  return ip_;
}
inline void Record::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.ip)
}

// uint32 port = 2;
inline void Record::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 Record::port() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.port)
  return port_;
}
inline void Record::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.port)
}

// uint32 protocol = 3;
inline void Record::clear_protocol() {
  protocol_ = 0u;
}
inline ::google::protobuf::uint32 Record::protocol() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.protocol)
  return protocol_;
}
inline void Record::set_protocol(::google::protobuf::uint32 value) {
  
  protocol_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.protocol)
}

// uint32 subprotocol = 4;
inline void Record::clear_subprotocol() {
  subprotocol_ = 0u;
}
inline ::google::protobuf::uint32 Record::subprotocol() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.subprotocol)
  return subprotocol_;
}
inline void Record::set_subprotocol(::google::protobuf::uint32 value) {
  
  subprotocol_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.subprotocol)
}

// string domain = 5;
inline void Record::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Record::domain() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.domain)
  return domain_.GetNoArena();
}
inline void Record::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.Record.domain)
}
#if LANG_CXX11
inline void Record::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.Record.domain)
}
#endif
inline void Record::set_domain(const char* value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.Record.domain)
}
inline void Record::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.Record.domain)
}
inline ::std::string* Record::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.Record.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Record::release_domain() {
  // @@protoc_insertion_point(field_release:censys_definitions.Record.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Record.domain)
}

// fixed32 timestamp = 6;
inline void Record::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::google::protobuf::uint32 Record::timestamp() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.timestamp)
  return timestamp_;
}
inline void Record::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.timestamp)
}

// uint32 scanid = 7;
inline void Record::clear_scanid() {
  scanid_ = 0u;
}
inline ::google::protobuf::uint32 Record::scanid() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.scanid)
  return scanid_;
}
inline void Record::set_scanid(::google::protobuf::uint32 value) {
  
  scanid_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.scanid)
}

// bytes sha256fp = 8;
inline void Record::clear_sha256fp() {
  sha256fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Record::sha256fp() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.sha256fp)
  return sha256fp_.GetNoArena();
}
inline void Record::set_sha256fp(const ::std::string& value) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.Record.sha256fp)
}
#if LANG_CXX11
inline void Record::set_sha256fp(::std::string&& value) {
  
  sha256fp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.Record.sha256fp)
}
#endif
inline void Record::set_sha256fp(const char* value) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.Record.sha256fp)
}
inline void Record::set_sha256fp(const void* value, size_t size) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.Record.sha256fp)
}
inline ::std::string* Record::mutable_sha256fp() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.Record.sha256fp)
  return sha256fp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Record::release_sha256fp() {
  // @@protoc_insertion_point(field_release:censys_definitions.Record.sha256fp)
  
  return sha256fp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_sha256fp(::std::string* sha256fp) {
  if (sha256fp != NULL) {
    
  } else {
    
  }
  sha256fp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha256fp);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Record.sha256fp)
}

// uint32 first_seen_at_scan_id = 9;
inline void Record::clear_first_seen_at_scan_id() {
  first_seen_at_scan_id_ = 0u;
}
inline ::google::protobuf::uint32 Record::first_seen_at_scan_id() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.first_seen_at_scan_id)
  return first_seen_at_scan_id_;
}
inline void Record::set_first_seen_at_scan_id(::google::protobuf::uint32 value) {
  
  first_seen_at_scan_id_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.first_seen_at_scan_id)
}

// uint32 last_seen_at_scan_id = 10;
inline void Record::clear_last_seen_at_scan_id() {
  last_seen_at_scan_id_ = 0u;
}
inline ::google::protobuf::uint32 Record::last_seen_at_scan_id() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.last_seen_at_scan_id)
  return last_seen_at_scan_id_;
}
inline void Record::set_last_seen_at_scan_id(::google::protobuf::uint32 value) {
  
  last_seen_at_scan_id_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.last_seen_at_scan_id)
}

// .censys_definitions.ProtocolAtom atom = 11;
inline bool Record::has_atom() const {
  return data_oneof_case() == kAtom;
}
inline void Record::set_has_atom() {
  _oneof_case_[0] = kAtom;
}
inline void Record::clear_atom() {
  if (has_atom()) {
    delete data_oneof_.atom_;
    clear_has_data_oneof();
  }
}
inline  const ::censys_definitions::ProtocolAtom& Record::atom() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.atom)
  return has_atom()
      ? *data_oneof_.atom_
      : ::censys_definitions::ProtocolAtom::default_instance();
}
inline ::censys_definitions::ProtocolAtom* Record::mutable_atom() {
  if (!has_atom()) {
    clear_data_oneof();
    set_has_atom();
    data_oneof_.atom_ = new ::censys_definitions::ProtocolAtom;
  }
  // @@protoc_insertion_point(field_mutable:censys_definitions.Record.atom)
  return data_oneof_.atom_;
}
inline ::censys_definitions::ProtocolAtom* Record::release_atom() {
  // @@protoc_insertion_point(field_release:censys_definitions.Record.atom)
  if (has_atom()) {
    clear_has_data_oneof();
    ::censys_definitions::ProtocolAtom* temp = data_oneof_.atom_;
    data_oneof_.atom_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Record::set_allocated_atom(::censys_definitions::ProtocolAtom* atom) {
  clear_data_oneof();
  if (atom) {
    set_has_atom();
    data_oneof_.atom_ = atom;
  }
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Record.atom)
}

// .censys_definitions.LocationAtom private_location = 12;
inline bool Record::has_private_location() const {
  return data_oneof_case() == kPrivateLocation;
}
inline void Record::set_has_private_location() {
  _oneof_case_[0] = kPrivateLocation;
}
inline void Record::clear_private_location() {
  if (has_private_location()) {
    delete data_oneof_.private_location_;
    clear_has_data_oneof();
  }
}
inline  const ::censys_definitions::LocationAtom& Record::private_location() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.private_location)
  return has_private_location()
      ? *data_oneof_.private_location_
      : ::censys_definitions::LocationAtom::default_instance();
}
inline ::censys_definitions::LocationAtom* Record::mutable_private_location() {
  if (!has_private_location()) {
    clear_data_oneof();
    set_has_private_location();
    data_oneof_.private_location_ = new ::censys_definitions::LocationAtom;
  }
  // @@protoc_insertion_point(field_mutable:censys_definitions.Record.private_location)
  return data_oneof_.private_location_;
}
inline ::censys_definitions::LocationAtom* Record::release_private_location() {
  // @@protoc_insertion_point(field_release:censys_definitions.Record.private_location)
  if (has_private_location()) {
    clear_has_data_oneof();
    ::censys_definitions::LocationAtom* temp = data_oneof_.private_location_;
    data_oneof_.private_location_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Record::set_allocated_private_location(::censys_definitions::LocationAtom* private_location) {
  clear_data_oneof();
  if (private_location) {
    set_has_private_location();
    data_oneof_.private_location_ = private_location;
  }
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Record.private_location)
}

// .censys_definitions.ASAtom as_atom = 13;
inline bool Record::has_as_atom() const {
  return data_oneof_case() == kAsAtom;
}
inline void Record::set_has_as_atom() {
  _oneof_case_[0] = kAsAtom;
}
inline void Record::clear_as_atom() {
  if (has_as_atom()) {
    delete data_oneof_.as_atom_;
    clear_has_data_oneof();
  }
}
inline  const ::censys_definitions::ASAtom& Record::as_atom() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.as_atom)
  return has_as_atom()
      ? *data_oneof_.as_atom_
      : ::censys_definitions::ASAtom::default_instance();
}
inline ::censys_definitions::ASAtom* Record::mutable_as_atom() {
  if (!has_as_atom()) {
    clear_data_oneof();
    set_has_as_atom();
    data_oneof_.as_atom_ = new ::censys_definitions::ASAtom;
  }
  // @@protoc_insertion_point(field_mutable:censys_definitions.Record.as_atom)
  return data_oneof_.as_atom_;
}
inline ::censys_definitions::ASAtom* Record::release_as_atom() {
  // @@protoc_insertion_point(field_release:censys_definitions.Record.as_atom)
  if (has_as_atom()) {
    clear_has_data_oneof();
    ::censys_definitions::ASAtom* temp = data_oneof_.as_atom_;
    data_oneof_.as_atom_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Record::set_allocated_as_atom(::censys_definitions::ASAtom* as_atom) {
  clear_data_oneof();
  if (as_atom) {
    set_has_as_atom();
    data_oneof_.as_atom_ = as_atom;
  }
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Record.as_atom)
}

// .censys_definitions.WHOISAtom whois = 14;
inline bool Record::has_whois() const {
  return data_oneof_case() == kWhois;
}
inline void Record::set_has_whois() {
  _oneof_case_[0] = kWhois;
}
inline void Record::clear_whois() {
  if (has_whois()) {
    delete data_oneof_.whois_;
    clear_has_data_oneof();
  }
}
inline  const ::censys_definitions::WHOISAtom& Record::whois() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.whois)
  return has_whois()
      ? *data_oneof_.whois_
      : ::censys_definitions::WHOISAtom::default_instance();
}
inline ::censys_definitions::WHOISAtom* Record::mutable_whois() {
  if (!has_whois()) {
    clear_data_oneof();
    set_has_whois();
    data_oneof_.whois_ = new ::censys_definitions::WHOISAtom;
  }
  // @@protoc_insertion_point(field_mutable:censys_definitions.Record.whois)
  return data_oneof_.whois_;
}
inline ::censys_definitions::WHOISAtom* Record::release_whois() {
  // @@protoc_insertion_point(field_release:censys_definitions.Record.whois)
  if (has_whois()) {
    clear_has_data_oneof();
    ::censys_definitions::WHOISAtom* temp = data_oneof_.whois_;
    data_oneof_.whois_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Record::set_allocated_whois(::censys_definitions::WHOISAtom* whois) {
  clear_data_oneof();
  if (whois) {
    set_has_whois();
    data_oneof_.whois_ = whois;
  }
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Record.whois)
}

// .censys_definitions.UserdataAtom userdata = 15;
inline bool Record::has_userdata() const {
  return data_oneof_case() == kUserdata;
}
inline void Record::set_has_userdata() {
  _oneof_case_[0] = kUserdata;
}
inline void Record::clear_userdata() {
  if (has_userdata()) {
    delete data_oneof_.userdata_;
    clear_has_data_oneof();
  }
}
inline  const ::censys_definitions::UserdataAtom& Record::userdata() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.userdata)
  return has_userdata()
      ? *data_oneof_.userdata_
      : ::censys_definitions::UserdataAtom::default_instance();
}
inline ::censys_definitions::UserdataAtom* Record::mutable_userdata() {
  if (!has_userdata()) {
    clear_data_oneof();
    set_has_userdata();
    data_oneof_.userdata_ = new ::censys_definitions::UserdataAtom;
  }
  // @@protoc_insertion_point(field_mutable:censys_definitions.Record.userdata)
  return data_oneof_.userdata_;
}
inline ::censys_definitions::UserdataAtom* Record::release_userdata() {
  // @@protoc_insertion_point(field_release:censys_definitions.Record.userdata)
  if (has_userdata()) {
    clear_has_data_oneof();
    ::censys_definitions::UserdataAtom* temp = data_oneof_.userdata_;
    data_oneof_.userdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Record::set_allocated_userdata(::censys_definitions::UserdataAtom* userdata) {
  clear_data_oneof();
  if (userdata) {
    set_has_userdata();
    data_oneof_.userdata_ = userdata;
  }
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Record.userdata)
}

// .censys_definitions.LocationAtom public_location = 17;
inline bool Record::has_public_location() const {
  return data_oneof_case() == kPublicLocation;
}
inline void Record::set_has_public_location() {
  _oneof_case_[0] = kPublicLocation;
}
inline void Record::clear_public_location() {
  if (has_public_location()) {
    delete data_oneof_.public_location_;
    clear_has_data_oneof();
  }
}
inline  const ::censys_definitions::LocationAtom& Record::public_location() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.public_location)
  return has_public_location()
      ? *data_oneof_.public_location_
      : ::censys_definitions::LocationAtom::default_instance();
}
inline ::censys_definitions::LocationAtom* Record::mutable_public_location() {
  if (!has_public_location()) {
    clear_data_oneof();
    set_has_public_location();
    data_oneof_.public_location_ = new ::censys_definitions::LocationAtom;
  }
  // @@protoc_insertion_point(field_mutable:censys_definitions.Record.public_location)
  return data_oneof_.public_location_;
}
inline ::censys_definitions::LocationAtom* Record::release_public_location() {
  // @@protoc_insertion_point(field_release:censys_definitions.Record.public_location)
  if (has_public_location()) {
    clear_has_data_oneof();
    ::censys_definitions::LocationAtom* temp = data_oneof_.public_location_;
    data_oneof_.public_location_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Record::set_allocated_public_location(::censys_definitions::LocationAtom* public_location) {
  clear_data_oneof();
  if (public_location) {
    set_has_public_location();
    data_oneof_.public_location_ = public_location;
  }
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Record.public_location)
}

// uint32 alexa_rank = 16;
inline bool Record::has_alexa_rank() const {
  return data_oneof_case() == kAlexaRank;
}
inline void Record::set_has_alexa_rank() {
  _oneof_case_[0] = kAlexaRank;
}
inline void Record::clear_alexa_rank() {
  if (has_alexa_rank()) {
    data_oneof_.alexa_rank_ = 0u;
    clear_has_data_oneof();
  }
}
inline ::google::protobuf::uint32 Record::alexa_rank() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.alexa_rank)
  if (has_alexa_rank()) {
    return data_oneof_.alexa_rank_;
  }
  return 0u;
}
inline void Record::set_alexa_rank(::google::protobuf::uint32 value) {
  if (!has_alexa_rank()) {
    clear_data_oneof();
    set_has_alexa_rank();
  }
  data_oneof_.alexa_rank_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.alexa_rank)
}

// uint32 quantcast_rank = 19;
inline bool Record::has_quantcast_rank() const {
  return data_oneof_case() == kQuantcastRank;
}
inline void Record::set_has_quantcast_rank() {
  _oneof_case_[0] = kQuantcastRank;
}
inline void Record::clear_quantcast_rank() {
  if (has_quantcast_rank()) {
    data_oneof_.quantcast_rank_ = 0u;
    clear_has_data_oneof();
  }
}
inline ::google::protobuf::uint32 Record::quantcast_rank() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.quantcast_rank)
  if (has_quantcast_rank()) {
    return data_oneof_.quantcast_rank_;
  }
  return 0u;
}
inline void Record::set_quantcast_rank(::google::protobuf::uint32 value) {
  if (!has_quantcast_rank()) {
    clear_data_oneof();
    set_has_quantcast_rank();
  }
  data_oneof_.quantcast_rank_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.quantcast_rank)
}

// uint32 cisco_umbrella_rank = 20;
inline bool Record::has_cisco_umbrella_rank() const {
  return data_oneof_case() == kCiscoUmbrellaRank;
}
inline void Record::set_has_cisco_umbrella_rank() {
  _oneof_case_[0] = kCiscoUmbrellaRank;
}
inline void Record::clear_cisco_umbrella_rank() {
  if (has_cisco_umbrella_rank()) {
    data_oneof_.cisco_umbrella_rank_ = 0u;
    clear_has_data_oneof();
  }
}
inline ::google::protobuf::uint32 Record::cisco_umbrella_rank() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.cisco_umbrella_rank)
  if (has_cisco_umbrella_rank()) {
    return data_oneof_.cisco_umbrella_rank_;
  }
  return 0u;
}
inline void Record::set_cisco_umbrella_rank(::google::protobuf::uint32 value) {
  if (!has_cisco_umbrella_rank()) {
    clear_data_oneof();
    set_has_cisco_umbrella_rank();
  }
  data_oneof_.cisco_umbrella_rank_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.cisco_umbrella_rank)
}

// uint64 version = 18;
inline void Record::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Record::version() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.version)
  return version_;
}
inline void Record::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.version)
}

inline bool Record::has_data_oneof() const {
  return data_oneof_case() != DATA_ONEOF_NOT_SET;
}
inline void Record::clear_has_data_oneof() {
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}
inline Record::DataOneofCase Record::data_oneof_case() const {
  return Record::DataOneofCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Delta

// .censys_definitions.DeltaType delta_type = 1;
inline void Delta::clear_delta_type() {
  delta_type_ = 0;
}
inline ::censys_definitions::DeltaType Delta::delta_type() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Delta.delta_type)
  return static_cast< ::censys_definitions::DeltaType >(delta_type_);
}
inline void Delta::set_delta_type(::censys_definitions::DeltaType value) {
  
  delta_type_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Delta.delta_type)
}

// fixed32 ip = 2;
inline void Delta::clear_ip() {
  ip_ = 0u;
}
inline ::google::protobuf::uint32 Delta::ip() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Delta.ip)
  return ip_;
}
inline void Delta::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Delta.ip)
}

// string domain = 3;
inline void Delta::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Delta::domain() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Delta.domain)
  return domain_.GetNoArena();
}
inline void Delta::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.Delta.domain)
}
#if LANG_CXX11
inline void Delta::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.Delta.domain)
}
#endif
inline void Delta::set_domain(const char* value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.Delta.domain)
}
inline void Delta::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.Delta.domain)
}
inline ::std::string* Delta::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.Delta.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Delta::release_domain() {
  // @@protoc_insertion_point(field_release:censys_definitions.Delta.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Delta::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Delta.domain)
}

// uint64 version = 4;
inline void Delta::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Delta::version() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Delta.version)
  return version_;
}
inline void Delta::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Delta.version)
}

// repeated .censys_definitions.Record records = 5;
inline int Delta::records_size() const {
  return records_.size();
}
inline void Delta::clear_records() {
  records_.Clear();
}
inline const ::censys_definitions::Record& Delta::records(int index) const {
  // @@protoc_insertion_point(field_get:censys_definitions.Delta.records)
  return records_.Get(index);
}
inline ::censys_definitions::Record* Delta::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:censys_definitions.Delta.records)
  return records_.Mutable(index);
}
inline ::censys_definitions::Record* Delta::add_records() {
  // @@protoc_insertion_point(field_add:censys_definitions.Delta.records)
  return records_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::censys_definitions::Record >*
Delta::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:censys_definitions.Delta.records)
  return &records_;
}
inline const ::google::protobuf::RepeatedPtrField< ::censys_definitions::Record >&
Delta::records() const {
  // @@protoc_insertion_point(field_list:censys_definitions.Delta.records)
  return records_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace censys_definitions

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hoststore_2eproto__INCLUDED
