// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: certificate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "certificate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zsearch {
class PathDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Path> {
} _Path_default_instance_;
class RootStoreStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RootStoreStatus> {
} _RootStoreStatus_default_instance_;
class CertificateValidationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CertificateValidation> {
} _CertificateValidation_default_instance_;
class MozillaSalesForceStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MozillaSalesForceStatus> {
} _MozillaSalesForceStatus_default_instance_;
class CertificateRevocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CertificateRevocation> {
} _CertificateRevocation_default_instance_;
class CertificateAuditDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CertificateAudit> {
} _CertificateAudit_default_instance_;
class CertificateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Certificate> {
} _Certificate_default_instance_;

namespace protobuf_certificate_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, sha256fp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootStoreStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootStoreStatus, valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootStoreStatus, was_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootStoreStatus, trusted_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootStoreStatus, had_trusted_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootStoreStatus, blacklisted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootStoreStatus, whitelisted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootStoreStatus, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootStoreStatus, trusted_paths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootStoreStatus, in_revocation_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RootStoreStatus, parents_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateValidation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateValidation, nss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateValidation, microsoft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateValidation, apple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateValidation, java_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateValidation, android_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateValidation, google_ct_primary_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaSalesForceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaSalesForceStatus, current_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaSalesForceStatus, was_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaSalesForceStatus, owner_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaSalesForceStatus, parent_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaSalesForceStatus, certificate_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaSalesForceStatus, certificate_policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaSalesForceStatus, certification_practice_statement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaSalesForceStatus, cp_same_as_parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaSalesForceStatus, audit_same_as_parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaSalesForceStatus, standard_audit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaSalesForceStatus, br_audit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaSalesForceStatus, auditor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaSalesForceStatus, standard_audit_statement_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaSalesForceStatus, management_assertions_by_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MozillaSalesForceStatus, comments_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateRevocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateRevocation, revoked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateRevocation, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateAudit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CertificateAudit, mozilla_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, sha1fp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, sha256fp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, parsed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, parse_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, parse_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, parse_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, parents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, presented_chain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, seen_in_scan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, post_processed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, post_process_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, validation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, ct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, zlint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, revocation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, audit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, is_precert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, not_valid_after_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, not_valid_before_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, expired_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, in_nss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, in_microsoft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, in_apple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, validation_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, valid_nss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, valid_microsoft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, valid_apple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, was_valid_nss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, was_valid_microsoft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, was_valid_apple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, was_in_nss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, was_in_microsoft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, was_in_apple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, current_valid_nss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, current_valid_microsoft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, current_valid_apple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, current_in_nss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, current_in_microsoft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, current_in_apple_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, nss_audit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, should_post_process_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Certificate, do_not_post_process_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Path)},
  { 5, -1, sizeof(RootStoreStatus)},
  { 19, -1, sizeof(CertificateValidation)},
  { 29, -1, sizeof(MozillaSalesForceStatus)},
  { 48, -1, sizeof(CertificateRevocation)},
  { 54, -1, sizeof(CertificateAudit)},
  { 59, -1, sizeof(Certificate)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Path_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RootStoreStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CertificateValidation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MozillaSalesForceStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CertificateRevocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CertificateAudit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Certificate_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "certificate.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _Path_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _RootStoreStatus_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CertificateValidation_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _MozillaSalesForceStatus_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CertificateRevocation_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CertificateAudit_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Certificate_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::zsearch::protobuf_common_2eproto::InitDefaults();
  ::zsearch::protobuf_zlint_2eproto::InitDefaults();
  ::zsearch::protobuf_ct_2eproto::InitDefaults();
  _Path_default_instance_.DefaultConstruct();
  _RootStoreStatus_default_instance_.DefaultConstruct();
  _CertificateValidation_default_instance_.DefaultConstruct();
  _MozillaSalesForceStatus_default_instance_.DefaultConstruct();
  _CertificateRevocation_default_instance_.DefaultConstruct();
  _CertificateAudit_default_instance_.DefaultConstruct();
  _Certificate_default_instance_.DefaultConstruct();
  _CertificateValidation_default_instance_.get_mutable()->nss_ = const_cast< ::zsearch::RootStoreStatus*>(
      ::zsearch::RootStoreStatus::internal_default_instance());
  _CertificateValidation_default_instance_.get_mutable()->microsoft_ = const_cast< ::zsearch::RootStoreStatus*>(
      ::zsearch::RootStoreStatus::internal_default_instance());
  _CertificateValidation_default_instance_.get_mutable()->apple_ = const_cast< ::zsearch::RootStoreStatus*>(
      ::zsearch::RootStoreStatus::internal_default_instance());
  _CertificateValidation_default_instance_.get_mutable()->java_ = const_cast< ::zsearch::RootStoreStatus*>(
      ::zsearch::RootStoreStatus::internal_default_instance());
  _CertificateValidation_default_instance_.get_mutable()->android_ = const_cast< ::zsearch::RootStoreStatus*>(
      ::zsearch::RootStoreStatus::internal_default_instance());
  _CertificateValidation_default_instance_.get_mutable()->google_ct_primary_ = const_cast< ::zsearch::RootStoreStatus*>(
      ::zsearch::RootStoreStatus::internal_default_instance());
  _CertificateAudit_default_instance_.get_mutable()->mozilla_ = const_cast< ::zsearch::MozillaSalesForceStatus*>(
      ::zsearch::MozillaSalesForceStatus::internal_default_instance());
  _Certificate_default_instance_.get_mutable()->validation_ = const_cast< ::zsearch::CertificateValidation*>(
      ::zsearch::CertificateValidation::internal_default_instance());
  _Certificate_default_instance_.get_mutable()->ct_ = const_cast< ::zsearch::CTStatus*>(
      ::zsearch::CTStatus::internal_default_instance());
  _Certificate_default_instance_.get_mutable()->zlint_ = const_cast< ::zsearch::ZLint*>(
      ::zsearch::ZLint::internal_default_instance());
  _Certificate_default_instance_.get_mutable()->revocation_ = const_cast< ::zsearch::CertificateRevocation*>(
      ::zsearch::CertificateRevocation::internal_default_instance());
  _Certificate_default_instance_.get_mutable()->audit_ = const_cast< ::zsearch::CertificateAudit*>(
      ::zsearch::CertificateAudit::internal_default_instance());
  _Certificate_default_instance_.get_mutable()->nss_audit_ = const_cast< ::zsearch::MozillaSalesForceStatus*>(
      ::zsearch::MozillaSalesForceStatus::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021certificate.proto\022\007zsearch\032\014common.pro"
      "to\032\013zlint.proto\032\010ct.proto\"\030\n\004Path\022\020\n\010sha"
      "256fp\030\001 \003(\014\"\207\002\n\017RootStoreStatus\022\r\n\005valid"
      "\030\001 \001(\010\022\021\n\twas_valid\030\002 \001(\010\022\024\n\014trusted_pat"
      "h\030\003 \001(\010\022\030\n\020had_trusted_path\030\004 \001(\010\022\023\n\013bla"
      "cklisted\030\005 \001(\010\022\023\n\013whitelisted\030\006 \001(\010\022&\n\004t"
      "ype\030\007 \001(\0162\030.zsearch.CertificateType\022$\n\rt"
      "rusted_paths\030\010 \003(\0132\r.zsearch.Path\022\031\n\021in_"
      "revocation_set\030\t \001(\010\022\017\n\007parents\030\n \003(\014\"\234\002"
      "\n\025CertificateValidation\022%\n\003nss\030\001 \001(\0132\030.z"
      "search.RootStoreStatus\022+\n\tmicrosoft\030\002 \001("
      "\0132\030.zsearch.RootStoreStatus\022\'\n\005apple\030\003 \001"
      "(\0132\030.zsearch.RootStoreStatus\022&\n\004java\030\004 \001"
      "(\0132\030.zsearch.RootStoreStatus\022)\n\007android\030"
      "\005 \001(\0132\030.zsearch.RootStoreStatus\0223\n\021googl"
      "e_ct_primary\030\n \001(\0132\030.zsearch.RootStoreSt"
      "atus\"\232\003\n\027MozillaSalesForceStatus\022\022\n\ncurr"
      "ent_in\030\001 \001(\010\022\016\n\006was_in\030\002 \001(\010\022\022\n\nowner_na"
      "me\030\003 \001(\t\022\023\n\013parent_name\030\004 \001(\t\022\030\n\020certifi"
      "cate_name\030\005 \001(\t\022\032\n\022certificate_policy\030\006 "
      "\001(\t\022(\n certification_practice_statement\030"
      "\007 \001(\t\022\031\n\021cp_same_as_parent\030\010 \001(\010\022\034\n\024audi"
      "t_same_as_parent\030\t \001(\010\022\026\n\016standard_audit"
      "\030\n \001(\t\022\020\n\010br_audit\030\013 \001(\t\022\017\n\007auditor\030\014 \001("
      "\t\022*\n\"standard_audit_statement_timestamp\030"
      "\r \001(\r\022 \n\030management_assertions_by\030\016 \001(\t\022"
      "\020\n\010comments\030\017 \001(\t\"^\n\025CertificateRevocati"
      "on\022\017\n\007revoked\030\001 \001(\010\0224\n\006reason\030\002 \001(\0162$.zs"
      "earch.CertificateRevocationReason\"E\n\020Cer"
      "tificateAudit\0221\n\007mozilla\030\001 \001(\0132 .zsearch"
      ".MozillaSalesForceStatus\"\377\t\n\013Certificate"
      "\022\016\n\006sha1fp\030\001 \001(\014\022\020\n\010sha256fp\030\002 \001(\014\022\013\n\003ra"
      "w\030\003 \001(\014\022\016\n\006parsed\030\004 \001(\t\0225\n\014parse_status\030"
      ", \001(\0162\037.zsearch.CertificateParseStatus\022\025"
      "\n\rparse_version\030\' \001(\r\022\023\n\013parse_error\030/ \001"
      "(\t\022\017\n\007parents\030\005 \003(\014\022\027\n\017presented_chain\030-"
      " \003(\014\022*\n\006source\030\034 \001(\0162\032.zsearch.Certifica"
      "teSource\022\024\n\014seen_in_scan\030\035 \001(\010\022\026\n\016post_p"
      "rocessed\030\032 \001(\010\022\036\n\026post_process_timestamp"
      "\030% \001(\r\0222\n\nvalidation\030# \001(\0132\036.zsearch.Cer"
      "tificateValidation\022\035\n\002ct\030\036 \001(\0132\021.zsearch"
      ".CTStatus\022\035\n\005zlint\030& \001(\0132\016.zsearch.ZLint"
      "\0222\n\nrevocation\030+ \001(\0132\036.zsearch.Certifica"
      "teRevocation\022(\n\005audit\030. \001(\0132\031.zsearch.Ce"
      "rtificateAudit\022\022\n\nis_precert\030  \001(\010\022\027\n\017no"
      "t_valid_after\030) \001(\r\022\030\n\020not_valid_before\030"
      "* \001(\r\022\017\n\007expired\0300 \001(\010\022\016\n\006in_nss\030\006 \001(\010\022\030"
      "\n\014in_microsoft\030\007 \001(\010B\002\030\001\022\024\n\010in_apple\030\010 \001"
      "(\010B\002\030\001\022\034\n\024validation_timestamp\030\n \001(\r\022\025\n\t"
      "valid_nss\030\013 \001(\010B\002\030\001\022\033\n\017valid_microsoft\030\014"
      " \001(\010B\002\030\001\022\027\n\013valid_apple\030\r \001(\010B\002\030\001\022\025\n\rwas"
      "_valid_nss\030\016 \001(\010\022\037\n\023was_valid_microsoft\030"
      "\017 \001(\010B\002\030\001\022\033\n\017was_valid_apple\030\020 \001(\010B\002\030\001\022\026"
      "\n\nwas_in_nss\030\021 \001(\010B\002\030\001\022\034\n\020was_in_microso"
      "ft\030\022 \001(\010B\002\030\001\022\030\n\014was_in_apple\030\023 \001(\010B\002\030\001\022\031"
      "\n\021current_valid_nss\030\024 \001(\010\022#\n\027current_val"
      "id_microsoft\030\025 \001(\010B\002\030\001\022\037\n\023current_valid_"
      "apple\030\026 \001(\010B\002\030\001\022\026\n\016current_in_nss\030\027 \001(\010\022"
      " \n\024current_in_microsoft\030\030 \001(\010B\002\030\001\022\034\n\020cur"
      "rent_in_apple\030\031 \001(\010B\002\030\001\0227\n\tnss_audit\030\037 \001"
      "(\0132 .zsearch.MozillaSalesForceStatusB\002\030\001"
      "\022\037\n\023should_post_process\030\033 \001(\010B\002\030\001\022\037\n\023do_"
      "not_post_process\030$ \001(\010B\002\030\001*\247\001\n\017Certifica"
      "teType\022\035\n\031CERTIFICATE_TYPE_RESERVED\020\000\022\034\n"
      "\030CERTIFICATE_TYPE_UNKNOWN\020\001\022\031\n\025CERTIFICA"
      "TE_TYPE_LEAF\020\002\022!\n\035CERTIFICATE_TYPE_INTER"
      "MEDIATE\020\003\022\031\n\025CERTIFICATE_TYPE_ROOT\020\004*\267\002\n"
      "\021CertificateSource\022\037\n\033CERTIFICATE_SOURCE"
      "_RESERVED\020\000\022\036\n\032CERTIFICATE_SOURCE_UNKNOW"
      "N\020\001\022\033\n\027CERTIFICATE_SOURCE_SCAN\020\002\022\031\n\025CERT"
      "IFICATE_SOURCE_CT\020\003\022)\n%CERTIFICATE_SOURC"
      "E_MOZILLA_SALESFORCE\020\004\022\037\n\033CERTIFICATE_SO"
      "URCE_RESEARCH\020\005\022\035\n\031CERTIFICATE_SOURCE_RA"
      "PID7\020\006\022\035\n\031CERTIFICATE_SOURCE_HUBBLE\020\007\022\037\n"
      "\033CERTIFICATE_SOURCE_CT_CHAIN\020\010*\327\001\n\026Certi"
      "ficateParseStatus\022%\n!CERTIFICATE_PARSE_S"
      "TATUS_RESERVED\020\000\022$\n CERTIFICATE_PARSE_ST"
      "ATUS_UNKNOWN\020\001\022$\n CERTIFICATE_PARSE_STAT"
      "US_SUCCESS\020\002\022!\n\035CERTIFICATE_PARSE_STATUS"
      "_FAIL\020\003\022\'\n#CERTIFICATE_PARSE_STATUS_NOT_"
      "PARSED\020\004*\364\004\n\033CertificateRevocationReason"
      "\022*\n&CERTIFICATE_REVOCATION_REASON_RESERV"
      "ED\020\000\022)\n%CERTIFICATE_REVOCATION_REASON_UN"
      "KNOWN\020\001\022-\n)CERTIFICATE_REVOCATION_REASON"
      "_UNSPECIFIED\020\002\0220\n,CERTIFICATE_REVOCATION"
      "_REASON_KEY_COMPROMISE\020\003\022/\n+CERTIFICATE_"
      "REVOCATION_REASON_CA_COMPROMISE\020\004\0225\n1CER"
      "TIFICATE_REVOCATION_REASON_AFFILIATION_C"
      "HANGED\020\005\022,\n(CERTIFICATE_REVOCATION_REASO"
      "N_SUPERSEDED\020\006\0228\n4CERTIFICATE_REVOCATION"
      "_REASON_CESSATION_OF_OPERATION\020\007\0222\n.CERT"
      "IFICATE_REVOCATION_REASON_CERTIFICATE_HO"
      "LD\020\010\0221\n-CERTIFICATE_REVOCATION_REASON_RE"
      "MOVE_FROM_CRL\020\t\0225\n1CERTIFICATE_REVOCATIO"
      "N_REASON_PRIVILEGE_WITHDRAWN\020\n\022/\n+CERTIF"
      "ICATE_REVOCATION_REASON_AA_COMPROMISE\020\013b"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3847);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "certificate.proto", &protobuf_RegisterTypes);
  ::zsearch::protobuf_common_2eproto::AddDescriptors();
  ::zsearch::protobuf_zlint_2eproto::AddDescriptors();
  ::zsearch::protobuf_ct_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_certificate_2eproto

const ::google::protobuf::EnumDescriptor* CertificateType_descriptor() {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_enum_descriptors[0];
}
bool CertificateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CertificateSource_descriptor() {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_enum_descriptors[1];
}
bool CertificateSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CertificateParseStatus_descriptor() {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_enum_descriptors[2];
}
bool CertificateParseStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CertificateRevocationReason_descriptor() {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_enum_descriptors[3];
}
bool CertificateRevocationReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Path::kSha256FpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Path::Path()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_certificate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.Path)
}
Path::Path(const Path& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sha256fp_(from.sha256fp_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zsearch.Path)
}

void Path::SharedCtor() {
  _cached_size_ = 0;
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:zsearch.Path)
  SharedDtor();
}

void Path::SharedDtor() {
}

void Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path::descriptor() {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_metadata[0].descriptor;
}

const Path& Path::default_instance() {
  protobuf_certificate_2eproto::InitDefaults();
  return *internal_default_instance();
}

Path* Path::New(::google::protobuf::Arena* arena) const {
  Path* n = new Path;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.Path)
  sha256fp_.Clear();
}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.Path)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes sha256fp = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_sha256fp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.Path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.Path)
  return false;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.Path)
  // repeated bytes sha256fp = 1;
  for (int i = 0; i < this->sha256fp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->sha256fp(i), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.Path)
}

::google::protobuf::uint8* Path::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.Path)
  // repeated bytes sha256fp = 1;
  for (int i = 0; i < this->sha256fp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->sha256fp(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.Path)
  size_t total_size = 0;

  // repeated bytes sha256fp = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->sha256fp_size());
  for (int i = 0; i < this->sha256fp_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->sha256fp(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Path>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.Path)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha256fp_.MergeFrom(from.sha256fp_);
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::Swap(Path* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Path::InternalSwap(Path* other) {
  sha256fp_.UnsafeArenaSwap(&other->sha256fp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Path::GetMetadata() const {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Path

// repeated bytes sha256fp = 1;
int Path::sha256fp_size() const {
  return sha256fp_.size();
}
void Path::clear_sha256fp() {
  sha256fp_.Clear();
}
const ::std::string& Path::sha256fp(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.Path.sha256fp)
  return sha256fp_.Get(index);
}
::std::string* Path::mutable_sha256fp(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.Path.sha256fp)
  return sha256fp_.Mutable(index);
}
void Path::set_sha256fp(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zsearch.Path.sha256fp)
  sha256fp_.Mutable(index)->assign(value);
}
void Path::set_sha256fp(int index, const char* value) {
  sha256fp_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zsearch.Path.sha256fp)
}
void Path::set_sha256fp(int index, const void* value, size_t size) {
  sha256fp_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zsearch.Path.sha256fp)
}
::std::string* Path::add_sha256fp() {
  // @@protoc_insertion_point(field_add_mutable:zsearch.Path.sha256fp)
  return sha256fp_.Add();
}
void Path::add_sha256fp(const ::std::string& value) {
  sha256fp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zsearch.Path.sha256fp)
}
void Path::add_sha256fp(const char* value) {
  sha256fp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zsearch.Path.sha256fp)
}
void Path::add_sha256fp(const void* value, size_t size) {
  sha256fp_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zsearch.Path.sha256fp)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Path::sha256fp() const {
  // @@protoc_insertion_point(field_list:zsearch.Path.sha256fp)
  return sha256fp_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Path::mutable_sha256fp() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.Path.sha256fp)
  return &sha256fp_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RootStoreStatus::kValidFieldNumber;
const int RootStoreStatus::kWasValidFieldNumber;
const int RootStoreStatus::kTrustedPathFieldNumber;
const int RootStoreStatus::kHadTrustedPathFieldNumber;
const int RootStoreStatus::kBlacklistedFieldNumber;
const int RootStoreStatus::kWhitelistedFieldNumber;
const int RootStoreStatus::kTypeFieldNumber;
const int RootStoreStatus::kTrustedPathsFieldNumber;
const int RootStoreStatus::kInRevocationSetFieldNumber;
const int RootStoreStatus::kParentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RootStoreStatus::RootStoreStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_certificate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.RootStoreStatus)
}
RootStoreStatus::RootStoreStatus(const RootStoreStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trusted_paths_(from.trusted_paths_),
      parents_(from.parents_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&valid_, &from.valid_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&valid_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:zsearch.RootStoreStatus)
}

void RootStoreStatus::SharedCtor() {
  ::memset(&valid_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&valid_) + sizeof(type_));
  _cached_size_ = 0;
}

RootStoreStatus::~RootStoreStatus() {
  // @@protoc_insertion_point(destructor:zsearch.RootStoreStatus)
  SharedDtor();
}

void RootStoreStatus::SharedDtor() {
}

void RootStoreStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RootStoreStatus::descriptor() {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_metadata[1].descriptor;
}

const RootStoreStatus& RootStoreStatus::default_instance() {
  protobuf_certificate_2eproto::InitDefaults();
  return *internal_default_instance();
}

RootStoreStatus* RootStoreStatus::New(::google::protobuf::Arena* arena) const {
  RootStoreStatus* n = new RootStoreStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RootStoreStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.RootStoreStatus)
  trusted_paths_.Clear();
  parents_.Clear();
  ::memset(&valid_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&valid_) + sizeof(type_));
}

bool RootStoreStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.RootStoreStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool valid = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool was_valid = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool trusted_path = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trusted_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool had_trusted_path = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &had_trusted_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool blacklisted = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blacklisted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool whitelisted = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &whitelisted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CertificateType type = 7;
      case 7: {
        if (tag == 56u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::zsearch::CertificateType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zsearch.Path trusted_paths = 8;
      case 8: {
        if (tag == 66u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trusted_paths()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // bool in_revocation_set = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_revocation_set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes parents = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_parents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.RootStoreStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.RootStoreStatus)
  return false;
#undef DO_
}

void RootStoreStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.RootStoreStatus)
  // bool valid = 1;
  if (this->valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->valid(), output);
  }

  // bool was_valid = 2;
  if (this->was_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->was_valid(), output);
  }

  // bool trusted_path = 3;
  if (this->trusted_path() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->trusted_path(), output);
  }

  // bool had_trusted_path = 4;
  if (this->had_trusted_path() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->had_trusted_path(), output);
  }

  // bool blacklisted = 5;
  if (this->blacklisted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->blacklisted(), output);
  }

  // bool whitelisted = 6;
  if (this->whitelisted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->whitelisted(), output);
  }

  // .zsearch.CertificateType type = 7;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  // repeated .zsearch.Path trusted_paths = 8;
  for (unsigned int i = 0, n = this->trusted_paths_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->trusted_paths(i), output);
  }

  // bool in_revocation_set = 9;
  if (this->in_revocation_set() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->in_revocation_set(), output);
  }

  // repeated bytes parents = 10;
  for (int i = 0; i < this->parents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->parents(i), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.RootStoreStatus)
}

::google::protobuf::uint8* RootStoreStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.RootStoreStatus)
  // bool valid = 1;
  if (this->valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->valid(), target);
  }

  // bool was_valid = 2;
  if (this->was_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->was_valid(), target);
  }

  // bool trusted_path = 3;
  if (this->trusted_path() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->trusted_path(), target);
  }

  // bool had_trusted_path = 4;
  if (this->had_trusted_path() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->had_trusted_path(), target);
  }

  // bool blacklisted = 5;
  if (this->blacklisted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->blacklisted(), target);
  }

  // bool whitelisted = 6;
  if (this->whitelisted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->whitelisted(), target);
  }

  // .zsearch.CertificateType type = 7;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  // repeated .zsearch.Path trusted_paths = 8;
  for (unsigned int i = 0, n = this->trusted_paths_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->trusted_paths(i), false, target);
  }

  // bool in_revocation_set = 9;
  if (this->in_revocation_set() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->in_revocation_set(), target);
  }

  // repeated bytes parents = 10;
  for (int i = 0; i < this->parents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(10, this->parents(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.RootStoreStatus)
  return target;
}

size_t RootStoreStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.RootStoreStatus)
  size_t total_size = 0;

  // repeated .zsearch.Path trusted_paths = 8;
  {
    unsigned int count = this->trusted_paths_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trusted_paths(i));
    }
  }

  // repeated bytes parents = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->parents_size());
  for (int i = 0; i < this->parents_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->parents(i));
  }

  // bool valid = 1;
  if (this->valid() != 0) {
    total_size += 1 + 1;
  }

  // bool was_valid = 2;
  if (this->was_valid() != 0) {
    total_size += 1 + 1;
  }

  // bool trusted_path = 3;
  if (this->trusted_path() != 0) {
    total_size += 1 + 1;
  }

  // bool had_trusted_path = 4;
  if (this->had_trusted_path() != 0) {
    total_size += 1 + 1;
  }

  // bool blacklisted = 5;
  if (this->blacklisted() != 0) {
    total_size += 1 + 1;
  }

  // bool whitelisted = 6;
  if (this->whitelisted() != 0) {
    total_size += 1 + 1;
  }

  // bool in_revocation_set = 9;
  if (this->in_revocation_set() != 0) {
    total_size += 1 + 1;
  }

  // .zsearch.CertificateType type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RootStoreStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.RootStoreStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const RootStoreStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RootStoreStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.RootStoreStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.RootStoreStatus)
    MergeFrom(*source);
  }
}

void RootStoreStatus::MergeFrom(const RootStoreStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.RootStoreStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trusted_paths_.MergeFrom(from.trusted_paths_);
  parents_.MergeFrom(from.parents_);
  if (from.valid() != 0) {
    set_valid(from.valid());
  }
  if (from.was_valid() != 0) {
    set_was_valid(from.was_valid());
  }
  if (from.trusted_path() != 0) {
    set_trusted_path(from.trusted_path());
  }
  if (from.had_trusted_path() != 0) {
    set_had_trusted_path(from.had_trusted_path());
  }
  if (from.blacklisted() != 0) {
    set_blacklisted(from.blacklisted());
  }
  if (from.whitelisted() != 0) {
    set_whitelisted(from.whitelisted());
  }
  if (from.in_revocation_set() != 0) {
    set_in_revocation_set(from.in_revocation_set());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RootStoreStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.RootStoreStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RootStoreStatus::CopyFrom(const RootStoreStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.RootStoreStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RootStoreStatus::IsInitialized() const {
  return true;
}

void RootStoreStatus::Swap(RootStoreStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RootStoreStatus::InternalSwap(RootStoreStatus* other) {
  trusted_paths_.UnsafeArenaSwap(&other->trusted_paths_);
  parents_.UnsafeArenaSwap(&other->parents_);
  std::swap(valid_, other->valid_);
  std::swap(was_valid_, other->was_valid_);
  std::swap(trusted_path_, other->trusted_path_);
  std::swap(had_trusted_path_, other->had_trusted_path_);
  std::swap(blacklisted_, other->blacklisted_);
  std::swap(whitelisted_, other->whitelisted_);
  std::swap(in_revocation_set_, other->in_revocation_set_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RootStoreStatus::GetMetadata() const {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RootStoreStatus

// bool valid = 1;
void RootStoreStatus::clear_valid() {
  valid_ = false;
}
bool RootStoreStatus::valid() const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.valid)
  return valid_;
}
void RootStoreStatus::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:zsearch.RootStoreStatus.valid)
}

// bool was_valid = 2;
void RootStoreStatus::clear_was_valid() {
  was_valid_ = false;
}
bool RootStoreStatus::was_valid() const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.was_valid)
  return was_valid_;
}
void RootStoreStatus::set_was_valid(bool value) {
  
  was_valid_ = value;
  // @@protoc_insertion_point(field_set:zsearch.RootStoreStatus.was_valid)
}

// bool trusted_path = 3;
void RootStoreStatus::clear_trusted_path() {
  trusted_path_ = false;
}
bool RootStoreStatus::trusted_path() const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.trusted_path)
  return trusted_path_;
}
void RootStoreStatus::set_trusted_path(bool value) {
  
  trusted_path_ = value;
  // @@protoc_insertion_point(field_set:zsearch.RootStoreStatus.trusted_path)
}

// bool had_trusted_path = 4;
void RootStoreStatus::clear_had_trusted_path() {
  had_trusted_path_ = false;
}
bool RootStoreStatus::had_trusted_path() const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.had_trusted_path)
  return had_trusted_path_;
}
void RootStoreStatus::set_had_trusted_path(bool value) {
  
  had_trusted_path_ = value;
  // @@protoc_insertion_point(field_set:zsearch.RootStoreStatus.had_trusted_path)
}

// bool blacklisted = 5;
void RootStoreStatus::clear_blacklisted() {
  blacklisted_ = false;
}
bool RootStoreStatus::blacklisted() const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.blacklisted)
  return blacklisted_;
}
void RootStoreStatus::set_blacklisted(bool value) {
  
  blacklisted_ = value;
  // @@protoc_insertion_point(field_set:zsearch.RootStoreStatus.blacklisted)
}

// bool whitelisted = 6;
void RootStoreStatus::clear_whitelisted() {
  whitelisted_ = false;
}
bool RootStoreStatus::whitelisted() const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.whitelisted)
  return whitelisted_;
}
void RootStoreStatus::set_whitelisted(bool value) {
  
  whitelisted_ = value;
  // @@protoc_insertion_point(field_set:zsearch.RootStoreStatus.whitelisted)
}

// .zsearch.CertificateType type = 7;
void RootStoreStatus::clear_type() {
  type_ = 0;
}
::zsearch::CertificateType RootStoreStatus::type() const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.type)
  return static_cast< ::zsearch::CertificateType >(type_);
}
void RootStoreStatus::set_type(::zsearch::CertificateType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:zsearch.RootStoreStatus.type)
}

// repeated .zsearch.Path trusted_paths = 8;
int RootStoreStatus::trusted_paths_size() const {
  return trusted_paths_.size();
}
void RootStoreStatus::clear_trusted_paths() {
  trusted_paths_.Clear();
}
const ::zsearch::Path& RootStoreStatus::trusted_paths(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.trusted_paths)
  return trusted_paths_.Get(index);
}
::zsearch::Path* RootStoreStatus::mutable_trusted_paths(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.RootStoreStatus.trusted_paths)
  return trusted_paths_.Mutable(index);
}
::zsearch::Path* RootStoreStatus::add_trusted_paths() {
  // @@protoc_insertion_point(field_add:zsearch.RootStoreStatus.trusted_paths)
  return trusted_paths_.Add();
}
::google::protobuf::RepeatedPtrField< ::zsearch::Path >*
RootStoreStatus::mutable_trusted_paths() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.RootStoreStatus.trusted_paths)
  return &trusted_paths_;
}
const ::google::protobuf::RepeatedPtrField< ::zsearch::Path >&
RootStoreStatus::trusted_paths() const {
  // @@protoc_insertion_point(field_list:zsearch.RootStoreStatus.trusted_paths)
  return trusted_paths_;
}

// bool in_revocation_set = 9;
void RootStoreStatus::clear_in_revocation_set() {
  in_revocation_set_ = false;
}
bool RootStoreStatus::in_revocation_set() const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.in_revocation_set)
  return in_revocation_set_;
}
void RootStoreStatus::set_in_revocation_set(bool value) {
  
  in_revocation_set_ = value;
  // @@protoc_insertion_point(field_set:zsearch.RootStoreStatus.in_revocation_set)
}

// repeated bytes parents = 10;
int RootStoreStatus::parents_size() const {
  return parents_.size();
}
void RootStoreStatus::clear_parents() {
  parents_.Clear();
}
const ::std::string& RootStoreStatus::parents(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.RootStoreStatus.parents)
  return parents_.Get(index);
}
::std::string* RootStoreStatus::mutable_parents(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.RootStoreStatus.parents)
  return parents_.Mutable(index);
}
void RootStoreStatus::set_parents(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zsearch.RootStoreStatus.parents)
  parents_.Mutable(index)->assign(value);
}
void RootStoreStatus::set_parents(int index, const char* value) {
  parents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zsearch.RootStoreStatus.parents)
}
void RootStoreStatus::set_parents(int index, const void* value, size_t size) {
  parents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zsearch.RootStoreStatus.parents)
}
::std::string* RootStoreStatus::add_parents() {
  // @@protoc_insertion_point(field_add_mutable:zsearch.RootStoreStatus.parents)
  return parents_.Add();
}
void RootStoreStatus::add_parents(const ::std::string& value) {
  parents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zsearch.RootStoreStatus.parents)
}
void RootStoreStatus::add_parents(const char* value) {
  parents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zsearch.RootStoreStatus.parents)
}
void RootStoreStatus::add_parents(const void* value, size_t size) {
  parents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zsearch.RootStoreStatus.parents)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RootStoreStatus::parents() const {
  // @@protoc_insertion_point(field_list:zsearch.RootStoreStatus.parents)
  return parents_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RootStoreStatus::mutable_parents() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.RootStoreStatus.parents)
  return &parents_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CertificateValidation::kNssFieldNumber;
const int CertificateValidation::kMicrosoftFieldNumber;
const int CertificateValidation::kAppleFieldNumber;
const int CertificateValidation::kJavaFieldNumber;
const int CertificateValidation::kAndroidFieldNumber;
const int CertificateValidation::kGoogleCtPrimaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CertificateValidation::CertificateValidation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_certificate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.CertificateValidation)
}
CertificateValidation::CertificateValidation(const CertificateValidation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_nss()) {
    nss_ = new ::zsearch::RootStoreStatus(*from.nss_);
  } else {
    nss_ = NULL;
  }
  if (from.has_microsoft()) {
    microsoft_ = new ::zsearch::RootStoreStatus(*from.microsoft_);
  } else {
    microsoft_ = NULL;
  }
  if (from.has_apple()) {
    apple_ = new ::zsearch::RootStoreStatus(*from.apple_);
  } else {
    apple_ = NULL;
  }
  if (from.has_java()) {
    java_ = new ::zsearch::RootStoreStatus(*from.java_);
  } else {
    java_ = NULL;
  }
  if (from.has_android()) {
    android_ = new ::zsearch::RootStoreStatus(*from.android_);
  } else {
    android_ = NULL;
  }
  if (from.has_google_ct_primary()) {
    google_ct_primary_ = new ::zsearch::RootStoreStatus(*from.google_ct_primary_);
  } else {
    google_ct_primary_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zsearch.CertificateValidation)
}

void CertificateValidation::SharedCtor() {
  ::memset(&nss_, 0, reinterpret_cast<char*>(&google_ct_primary_) -
    reinterpret_cast<char*>(&nss_) + sizeof(google_ct_primary_));
  _cached_size_ = 0;
}

CertificateValidation::~CertificateValidation() {
  // @@protoc_insertion_point(destructor:zsearch.CertificateValidation)
  SharedDtor();
}

void CertificateValidation::SharedDtor() {
  if (this != internal_default_instance()) {
    delete nss_;
  }
  if (this != internal_default_instance()) {
    delete microsoft_;
  }
  if (this != internal_default_instance()) {
    delete apple_;
  }
  if (this != internal_default_instance()) {
    delete java_;
  }
  if (this != internal_default_instance()) {
    delete android_;
  }
  if (this != internal_default_instance()) {
    delete google_ct_primary_;
  }
}

void CertificateValidation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CertificateValidation::descriptor() {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_metadata[2].descriptor;
}

const CertificateValidation& CertificateValidation::default_instance() {
  protobuf_certificate_2eproto::InitDefaults();
  return *internal_default_instance();
}

CertificateValidation* CertificateValidation::New(::google::protobuf::Arena* arena) const {
  CertificateValidation* n = new CertificateValidation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CertificateValidation::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.CertificateValidation)
  if (GetArenaNoVirtual() == NULL && nss_ != NULL) {
    delete nss_;
  }
  nss_ = NULL;
  if (GetArenaNoVirtual() == NULL && microsoft_ != NULL) {
    delete microsoft_;
  }
  microsoft_ = NULL;
  if (GetArenaNoVirtual() == NULL && apple_ != NULL) {
    delete apple_;
  }
  apple_ = NULL;
  if (GetArenaNoVirtual() == NULL && java_ != NULL) {
    delete java_;
  }
  java_ = NULL;
  if (GetArenaNoVirtual() == NULL && android_ != NULL) {
    delete android_;
  }
  android_ = NULL;
  if (GetArenaNoVirtual() == NULL && google_ct_primary_ != NULL) {
    delete google_ct_primary_;
  }
  google_ct_primary_ = NULL;
}

bool CertificateValidation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.CertificateValidation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .zsearch.RootStoreStatus nss = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.RootStoreStatus microsoft = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_microsoft()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.RootStoreStatus apple = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_apple()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.RootStoreStatus java = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_java()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.RootStoreStatus android = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_android()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.RootStoreStatus google_ct_primary = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_google_ct_primary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.CertificateValidation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.CertificateValidation)
  return false;
#undef DO_
}

void CertificateValidation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.CertificateValidation)
  // .zsearch.RootStoreStatus nss = 1;
  if (this->has_nss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->nss_, output);
  }

  // .zsearch.RootStoreStatus microsoft = 2;
  if (this->has_microsoft()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->microsoft_, output);
  }

  // .zsearch.RootStoreStatus apple = 3;
  if (this->has_apple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->apple_, output);
  }

  // .zsearch.RootStoreStatus java = 4;
  if (this->has_java()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->java_, output);
  }

  // .zsearch.RootStoreStatus android = 5;
  if (this->has_android()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->android_, output);
  }

  // .zsearch.RootStoreStatus google_ct_primary = 10;
  if (this->has_google_ct_primary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->google_ct_primary_, output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.CertificateValidation)
}

::google::protobuf::uint8* CertificateValidation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.CertificateValidation)
  // .zsearch.RootStoreStatus nss = 1;
  if (this->has_nss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->nss_, false, target);
  }

  // .zsearch.RootStoreStatus microsoft = 2;
  if (this->has_microsoft()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->microsoft_, false, target);
  }

  // .zsearch.RootStoreStatus apple = 3;
  if (this->has_apple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->apple_, false, target);
  }

  // .zsearch.RootStoreStatus java = 4;
  if (this->has_java()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->java_, false, target);
  }

  // .zsearch.RootStoreStatus android = 5;
  if (this->has_android()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->android_, false, target);
  }

  // .zsearch.RootStoreStatus google_ct_primary = 10;
  if (this->has_google_ct_primary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->google_ct_primary_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.CertificateValidation)
  return target;
}

size_t CertificateValidation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.CertificateValidation)
  size_t total_size = 0;

  // .zsearch.RootStoreStatus nss = 1;
  if (this->has_nss()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nss_);
  }

  // .zsearch.RootStoreStatus microsoft = 2;
  if (this->has_microsoft()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->microsoft_);
  }

  // .zsearch.RootStoreStatus apple = 3;
  if (this->has_apple()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->apple_);
  }

  // .zsearch.RootStoreStatus java = 4;
  if (this->has_java()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->java_);
  }

  // .zsearch.RootStoreStatus android = 5;
  if (this->has_android()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->android_);
  }

  // .zsearch.RootStoreStatus google_ct_primary = 10;
  if (this->has_google_ct_primary()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->google_ct_primary_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertificateValidation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.CertificateValidation)
  GOOGLE_DCHECK_NE(&from, this);
  const CertificateValidation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CertificateValidation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.CertificateValidation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.CertificateValidation)
    MergeFrom(*source);
  }
}

void CertificateValidation::MergeFrom(const CertificateValidation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.CertificateValidation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_nss()) {
    mutable_nss()->::zsearch::RootStoreStatus::MergeFrom(from.nss());
  }
  if (from.has_microsoft()) {
    mutable_microsoft()->::zsearch::RootStoreStatus::MergeFrom(from.microsoft());
  }
  if (from.has_apple()) {
    mutable_apple()->::zsearch::RootStoreStatus::MergeFrom(from.apple());
  }
  if (from.has_java()) {
    mutable_java()->::zsearch::RootStoreStatus::MergeFrom(from.java());
  }
  if (from.has_android()) {
    mutable_android()->::zsearch::RootStoreStatus::MergeFrom(from.android());
  }
  if (from.has_google_ct_primary()) {
    mutable_google_ct_primary()->::zsearch::RootStoreStatus::MergeFrom(from.google_ct_primary());
  }
}

void CertificateValidation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.CertificateValidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CertificateValidation::CopyFrom(const CertificateValidation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.CertificateValidation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificateValidation::IsInitialized() const {
  return true;
}

void CertificateValidation::Swap(CertificateValidation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CertificateValidation::InternalSwap(CertificateValidation* other) {
  std::swap(nss_, other->nss_);
  std::swap(microsoft_, other->microsoft_);
  std::swap(apple_, other->apple_);
  std::swap(java_, other->java_);
  std::swap(android_, other->android_);
  std::swap(google_ct_primary_, other->google_ct_primary_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CertificateValidation::GetMetadata() const {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CertificateValidation

// .zsearch.RootStoreStatus nss = 1;
bool CertificateValidation::has_nss() const {
  return this != internal_default_instance() && nss_ != NULL;
}
void CertificateValidation::clear_nss() {
  if (GetArenaNoVirtual() == NULL && nss_ != NULL) delete nss_;
  nss_ = NULL;
}
const ::zsearch::RootStoreStatus& CertificateValidation::nss() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateValidation.nss)
  return nss_ != NULL ? *nss_
                         : *::zsearch::RootStoreStatus::internal_default_instance();
}
::zsearch::RootStoreStatus* CertificateValidation::mutable_nss() {
  
  if (nss_ == NULL) {
    nss_ = new ::zsearch::RootStoreStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CertificateValidation.nss)
  return nss_;
}
::zsearch::RootStoreStatus* CertificateValidation::release_nss() {
  // @@protoc_insertion_point(field_release:zsearch.CertificateValidation.nss)
  
  ::zsearch::RootStoreStatus* temp = nss_;
  nss_ = NULL;
  return temp;
}
void CertificateValidation::set_allocated_nss(::zsearch::RootStoreStatus* nss) {
  delete nss_;
  nss_ = nss;
  if (nss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CertificateValidation.nss)
}

// .zsearch.RootStoreStatus microsoft = 2;
bool CertificateValidation::has_microsoft() const {
  return this != internal_default_instance() && microsoft_ != NULL;
}
void CertificateValidation::clear_microsoft() {
  if (GetArenaNoVirtual() == NULL && microsoft_ != NULL) delete microsoft_;
  microsoft_ = NULL;
}
const ::zsearch::RootStoreStatus& CertificateValidation::microsoft() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateValidation.microsoft)
  return microsoft_ != NULL ? *microsoft_
                         : *::zsearch::RootStoreStatus::internal_default_instance();
}
::zsearch::RootStoreStatus* CertificateValidation::mutable_microsoft() {
  
  if (microsoft_ == NULL) {
    microsoft_ = new ::zsearch::RootStoreStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CertificateValidation.microsoft)
  return microsoft_;
}
::zsearch::RootStoreStatus* CertificateValidation::release_microsoft() {
  // @@protoc_insertion_point(field_release:zsearch.CertificateValidation.microsoft)
  
  ::zsearch::RootStoreStatus* temp = microsoft_;
  microsoft_ = NULL;
  return temp;
}
void CertificateValidation::set_allocated_microsoft(::zsearch::RootStoreStatus* microsoft) {
  delete microsoft_;
  microsoft_ = microsoft;
  if (microsoft) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CertificateValidation.microsoft)
}

// .zsearch.RootStoreStatus apple = 3;
bool CertificateValidation::has_apple() const {
  return this != internal_default_instance() && apple_ != NULL;
}
void CertificateValidation::clear_apple() {
  if (GetArenaNoVirtual() == NULL && apple_ != NULL) delete apple_;
  apple_ = NULL;
}
const ::zsearch::RootStoreStatus& CertificateValidation::apple() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateValidation.apple)
  return apple_ != NULL ? *apple_
                         : *::zsearch::RootStoreStatus::internal_default_instance();
}
::zsearch::RootStoreStatus* CertificateValidation::mutable_apple() {
  
  if (apple_ == NULL) {
    apple_ = new ::zsearch::RootStoreStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CertificateValidation.apple)
  return apple_;
}
::zsearch::RootStoreStatus* CertificateValidation::release_apple() {
  // @@protoc_insertion_point(field_release:zsearch.CertificateValidation.apple)
  
  ::zsearch::RootStoreStatus* temp = apple_;
  apple_ = NULL;
  return temp;
}
void CertificateValidation::set_allocated_apple(::zsearch::RootStoreStatus* apple) {
  delete apple_;
  apple_ = apple;
  if (apple) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CertificateValidation.apple)
}

// .zsearch.RootStoreStatus java = 4;
bool CertificateValidation::has_java() const {
  return this != internal_default_instance() && java_ != NULL;
}
void CertificateValidation::clear_java() {
  if (GetArenaNoVirtual() == NULL && java_ != NULL) delete java_;
  java_ = NULL;
}
const ::zsearch::RootStoreStatus& CertificateValidation::java() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateValidation.java)
  return java_ != NULL ? *java_
                         : *::zsearch::RootStoreStatus::internal_default_instance();
}
::zsearch::RootStoreStatus* CertificateValidation::mutable_java() {
  
  if (java_ == NULL) {
    java_ = new ::zsearch::RootStoreStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CertificateValidation.java)
  return java_;
}
::zsearch::RootStoreStatus* CertificateValidation::release_java() {
  // @@protoc_insertion_point(field_release:zsearch.CertificateValidation.java)
  
  ::zsearch::RootStoreStatus* temp = java_;
  java_ = NULL;
  return temp;
}
void CertificateValidation::set_allocated_java(::zsearch::RootStoreStatus* java) {
  delete java_;
  java_ = java;
  if (java) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CertificateValidation.java)
}

// .zsearch.RootStoreStatus android = 5;
bool CertificateValidation::has_android() const {
  return this != internal_default_instance() && android_ != NULL;
}
void CertificateValidation::clear_android() {
  if (GetArenaNoVirtual() == NULL && android_ != NULL) delete android_;
  android_ = NULL;
}
const ::zsearch::RootStoreStatus& CertificateValidation::android() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateValidation.android)
  return android_ != NULL ? *android_
                         : *::zsearch::RootStoreStatus::internal_default_instance();
}
::zsearch::RootStoreStatus* CertificateValidation::mutable_android() {
  
  if (android_ == NULL) {
    android_ = new ::zsearch::RootStoreStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CertificateValidation.android)
  return android_;
}
::zsearch::RootStoreStatus* CertificateValidation::release_android() {
  // @@protoc_insertion_point(field_release:zsearch.CertificateValidation.android)
  
  ::zsearch::RootStoreStatus* temp = android_;
  android_ = NULL;
  return temp;
}
void CertificateValidation::set_allocated_android(::zsearch::RootStoreStatus* android) {
  delete android_;
  android_ = android;
  if (android) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CertificateValidation.android)
}

// .zsearch.RootStoreStatus google_ct_primary = 10;
bool CertificateValidation::has_google_ct_primary() const {
  return this != internal_default_instance() && google_ct_primary_ != NULL;
}
void CertificateValidation::clear_google_ct_primary() {
  if (GetArenaNoVirtual() == NULL && google_ct_primary_ != NULL) delete google_ct_primary_;
  google_ct_primary_ = NULL;
}
const ::zsearch::RootStoreStatus& CertificateValidation::google_ct_primary() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateValidation.google_ct_primary)
  return google_ct_primary_ != NULL ? *google_ct_primary_
                         : *::zsearch::RootStoreStatus::internal_default_instance();
}
::zsearch::RootStoreStatus* CertificateValidation::mutable_google_ct_primary() {
  
  if (google_ct_primary_ == NULL) {
    google_ct_primary_ = new ::zsearch::RootStoreStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CertificateValidation.google_ct_primary)
  return google_ct_primary_;
}
::zsearch::RootStoreStatus* CertificateValidation::release_google_ct_primary() {
  // @@protoc_insertion_point(field_release:zsearch.CertificateValidation.google_ct_primary)
  
  ::zsearch::RootStoreStatus* temp = google_ct_primary_;
  google_ct_primary_ = NULL;
  return temp;
}
void CertificateValidation::set_allocated_google_ct_primary(::zsearch::RootStoreStatus* google_ct_primary) {
  delete google_ct_primary_;
  google_ct_primary_ = google_ct_primary;
  if (google_ct_primary) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CertificateValidation.google_ct_primary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MozillaSalesForceStatus::kCurrentInFieldNumber;
const int MozillaSalesForceStatus::kWasInFieldNumber;
const int MozillaSalesForceStatus::kOwnerNameFieldNumber;
const int MozillaSalesForceStatus::kParentNameFieldNumber;
const int MozillaSalesForceStatus::kCertificateNameFieldNumber;
const int MozillaSalesForceStatus::kCertificatePolicyFieldNumber;
const int MozillaSalesForceStatus::kCertificationPracticeStatementFieldNumber;
const int MozillaSalesForceStatus::kCpSameAsParentFieldNumber;
const int MozillaSalesForceStatus::kAuditSameAsParentFieldNumber;
const int MozillaSalesForceStatus::kStandardAuditFieldNumber;
const int MozillaSalesForceStatus::kBrAuditFieldNumber;
const int MozillaSalesForceStatus::kAuditorFieldNumber;
const int MozillaSalesForceStatus::kStandardAuditStatementTimestampFieldNumber;
const int MozillaSalesForceStatus::kManagementAssertionsByFieldNumber;
const int MozillaSalesForceStatus::kCommentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MozillaSalesForceStatus::MozillaSalesForceStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_certificate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.MozillaSalesForceStatus)
}
MozillaSalesForceStatus::MozillaSalesForceStatus(const MozillaSalesForceStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.owner_name().size() > 0) {
    owner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
  }
  parent_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent_name().size() > 0) {
    parent_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_name_);
  }
  certificate_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.certificate_name().size() > 0) {
    certificate_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certificate_name_);
  }
  certificate_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.certificate_policy().size() > 0) {
    certificate_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certificate_policy_);
  }
  certification_practice_statement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.certification_practice_statement().size() > 0) {
    certification_practice_statement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certification_practice_statement_);
  }
  standard_audit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.standard_audit().size() > 0) {
    standard_audit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.standard_audit_);
  }
  br_audit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.br_audit().size() > 0) {
    br_audit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.br_audit_);
  }
  auditor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.auditor().size() > 0) {
    auditor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auditor_);
  }
  management_assertions_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.management_assertions_by().size() > 0) {
    management_assertions_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.management_assertions_by_);
  }
  comments_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.comments().size() > 0) {
    comments_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comments_);
  }
  ::memcpy(&current_in_, &from.current_in_,
    reinterpret_cast<char*>(&standard_audit_statement_timestamp_) -
    reinterpret_cast<char*>(&current_in_) + sizeof(standard_audit_statement_timestamp_));
  // @@protoc_insertion_point(copy_constructor:zsearch.MozillaSalesForceStatus)
}

void MozillaSalesForceStatus::SharedCtor() {
  owner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certificate_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certificate_policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certification_practice_statement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  standard_audit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  br_audit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auditor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  management_assertions_by_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comments_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_in_, 0, reinterpret_cast<char*>(&standard_audit_statement_timestamp_) -
    reinterpret_cast<char*>(&current_in_) + sizeof(standard_audit_statement_timestamp_));
  _cached_size_ = 0;
}

MozillaSalesForceStatus::~MozillaSalesForceStatus() {
  // @@protoc_insertion_point(destructor:zsearch.MozillaSalesForceStatus)
  SharedDtor();
}

void MozillaSalesForceStatus::SharedDtor() {
  owner_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certificate_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certificate_policy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certification_practice_statement_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  standard_audit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  br_audit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auditor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  management_assertions_by_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comments_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MozillaSalesForceStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MozillaSalesForceStatus::descriptor() {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_metadata[3].descriptor;
}

const MozillaSalesForceStatus& MozillaSalesForceStatus::default_instance() {
  protobuf_certificate_2eproto::InitDefaults();
  return *internal_default_instance();
}

MozillaSalesForceStatus* MozillaSalesForceStatus::New(::google::protobuf::Arena* arena) const {
  MozillaSalesForceStatus* n = new MozillaSalesForceStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MozillaSalesForceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.MozillaSalesForceStatus)
  owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certificate_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certificate_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certification_practice_statement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  standard_audit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  br_audit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auditor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  management_assertions_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comments_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_in_, 0, reinterpret_cast<char*>(&standard_audit_statement_timestamp_) -
    reinterpret_cast<char*>(&current_in_) + sizeof(standard_audit_statement_timestamp_));
}

bool MozillaSalesForceStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.MozillaSalesForceStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool current_in = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &current_in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool was_in = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string owner_name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->owner_name().data(), this->owner_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.MozillaSalesForceStatus.owner_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string parent_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent_name().data(), this->parent_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.MozillaSalesForceStatus.parent_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string certificate_name = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certificate_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->certificate_name().data(), this->certificate_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.MozillaSalesForceStatus.certificate_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string certificate_policy = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certificate_policy()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->certificate_policy().data(), this->certificate_policy().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.MozillaSalesForceStatus.certificate_policy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string certification_practice_statement = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certification_practice_statement()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->certification_practice_statement().data(), this->certification_practice_statement().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.MozillaSalesForceStatus.certification_practice_statement"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cp_same_as_parent = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cp_same_as_parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool audit_same_as_parent = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &audit_same_as_parent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string standard_audit = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_standard_audit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->standard_audit().data(), this->standard_audit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.MozillaSalesForceStatus.standard_audit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string br_audit = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_br_audit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->br_audit().data(), this->br_audit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.MozillaSalesForceStatus.br_audit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string auditor = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auditor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->auditor().data(), this->auditor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.MozillaSalesForceStatus.auditor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 standard_audit_statement_timestamp = 13;
      case 13: {
        if (tag == 104u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &standard_audit_statement_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string management_assertions_by = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_management_assertions_by()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->management_assertions_by().data(), this->management_assertions_by().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.MozillaSalesForceStatus.management_assertions_by"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string comments = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comments()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->comments().data(), this->comments().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.MozillaSalesForceStatus.comments"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.MozillaSalesForceStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.MozillaSalesForceStatus)
  return false;
#undef DO_
}

void MozillaSalesForceStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.MozillaSalesForceStatus)
  // bool current_in = 1;
  if (this->current_in() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->current_in(), output);
  }

  // bool was_in = 2;
  if (this->was_in() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->was_in(), output);
  }

  // string owner_name = 3;
  if (this->owner_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_name().data(), this->owner_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.owner_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->owner_name(), output);
  }

  // string parent_name = 4;
  if (this->parent_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent_name().data(), this->parent_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.parent_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->parent_name(), output);
  }

  // string certificate_name = 5;
  if (this->certificate_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certificate_name().data(), this->certificate_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.certificate_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->certificate_name(), output);
  }

  // string certificate_policy = 6;
  if (this->certificate_policy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certificate_policy().data(), this->certificate_policy().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.certificate_policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->certificate_policy(), output);
  }

  // string certification_practice_statement = 7;
  if (this->certification_practice_statement().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certification_practice_statement().data(), this->certification_practice_statement().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.certification_practice_statement");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->certification_practice_statement(), output);
  }

  // bool cp_same_as_parent = 8;
  if (this->cp_same_as_parent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->cp_same_as_parent(), output);
  }

  // bool audit_same_as_parent = 9;
  if (this->audit_same_as_parent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->audit_same_as_parent(), output);
  }

  // string standard_audit = 10;
  if (this->standard_audit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->standard_audit().data(), this->standard_audit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.standard_audit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->standard_audit(), output);
  }

  // string br_audit = 11;
  if (this->br_audit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->br_audit().data(), this->br_audit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.br_audit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->br_audit(), output);
  }

  // string auditor = 12;
  if (this->auditor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auditor().data(), this->auditor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.auditor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->auditor(), output);
  }

  // uint32 standard_audit_statement_timestamp = 13;
  if (this->standard_audit_statement_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->standard_audit_statement_timestamp(), output);
  }

  // string management_assertions_by = 14;
  if (this->management_assertions_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->management_assertions_by().data(), this->management_assertions_by().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.management_assertions_by");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->management_assertions_by(), output);
  }

  // string comments = 15;
  if (this->comments().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.comments");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->comments(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.MozillaSalesForceStatus)
}

::google::protobuf::uint8* MozillaSalesForceStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.MozillaSalesForceStatus)
  // bool current_in = 1;
  if (this->current_in() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->current_in(), target);
  }

  // bool was_in = 2;
  if (this->was_in() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->was_in(), target);
  }

  // string owner_name = 3;
  if (this->owner_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->owner_name().data(), this->owner_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.owner_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->owner_name(), target);
  }

  // string parent_name = 4;
  if (this->parent_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent_name().data(), this->parent_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.parent_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->parent_name(), target);
  }

  // string certificate_name = 5;
  if (this->certificate_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certificate_name().data(), this->certificate_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.certificate_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->certificate_name(), target);
  }

  // string certificate_policy = 6;
  if (this->certificate_policy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certificate_policy().data(), this->certificate_policy().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.certificate_policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->certificate_policy(), target);
  }

  // string certification_practice_statement = 7;
  if (this->certification_practice_statement().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->certification_practice_statement().data(), this->certification_practice_statement().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.certification_practice_statement");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->certification_practice_statement(), target);
  }

  // bool cp_same_as_parent = 8;
  if (this->cp_same_as_parent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->cp_same_as_parent(), target);
  }

  // bool audit_same_as_parent = 9;
  if (this->audit_same_as_parent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->audit_same_as_parent(), target);
  }

  // string standard_audit = 10;
  if (this->standard_audit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->standard_audit().data(), this->standard_audit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.standard_audit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->standard_audit(), target);
  }

  // string br_audit = 11;
  if (this->br_audit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->br_audit().data(), this->br_audit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.br_audit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->br_audit(), target);
  }

  // string auditor = 12;
  if (this->auditor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->auditor().data(), this->auditor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.auditor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->auditor(), target);
  }

  // uint32 standard_audit_statement_timestamp = 13;
  if (this->standard_audit_statement_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->standard_audit_statement_timestamp(), target);
  }

  // string management_assertions_by = 14;
  if (this->management_assertions_by().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->management_assertions_by().data(), this->management_assertions_by().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.management_assertions_by");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->management_assertions_by(), target);
  }

  // string comments = 15;
  if (this->comments().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.MozillaSalesForceStatus.comments");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->comments(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.MozillaSalesForceStatus)
  return target;
}

size_t MozillaSalesForceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.MozillaSalesForceStatus)
  size_t total_size = 0;

  // string owner_name = 3;
  if (this->owner_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->owner_name());
  }

  // string parent_name = 4;
  if (this->parent_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent_name());
  }

  // string certificate_name = 5;
  if (this->certificate_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->certificate_name());
  }

  // string certificate_policy = 6;
  if (this->certificate_policy().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->certificate_policy());
  }

  // string certification_practice_statement = 7;
  if (this->certification_practice_statement().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->certification_practice_statement());
  }

  // string standard_audit = 10;
  if (this->standard_audit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->standard_audit());
  }

  // string br_audit = 11;
  if (this->br_audit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->br_audit());
  }

  // string auditor = 12;
  if (this->auditor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->auditor());
  }

  // string management_assertions_by = 14;
  if (this->management_assertions_by().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->management_assertions_by());
  }

  // string comments = 15;
  if (this->comments().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->comments());
  }

  // bool current_in = 1;
  if (this->current_in() != 0) {
    total_size += 1 + 1;
  }

  // bool was_in = 2;
  if (this->was_in() != 0) {
    total_size += 1 + 1;
  }

  // bool cp_same_as_parent = 8;
  if (this->cp_same_as_parent() != 0) {
    total_size += 1 + 1;
  }

  // bool audit_same_as_parent = 9;
  if (this->audit_same_as_parent() != 0) {
    total_size += 1 + 1;
  }

  // uint32 standard_audit_statement_timestamp = 13;
  if (this->standard_audit_statement_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->standard_audit_statement_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MozillaSalesForceStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.MozillaSalesForceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const MozillaSalesForceStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MozillaSalesForceStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.MozillaSalesForceStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.MozillaSalesForceStatus)
    MergeFrom(*source);
  }
}

void MozillaSalesForceStatus::MergeFrom(const MozillaSalesForceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.MozillaSalesForceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.owner_name().size() > 0) {

    owner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
  }
  if (from.parent_name().size() > 0) {

    parent_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_name_);
  }
  if (from.certificate_name().size() > 0) {

    certificate_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certificate_name_);
  }
  if (from.certificate_policy().size() > 0) {

    certificate_policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certificate_policy_);
  }
  if (from.certification_practice_statement().size() > 0) {

    certification_practice_statement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certification_practice_statement_);
  }
  if (from.standard_audit().size() > 0) {

    standard_audit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.standard_audit_);
  }
  if (from.br_audit().size() > 0) {

    br_audit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.br_audit_);
  }
  if (from.auditor().size() > 0) {

    auditor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auditor_);
  }
  if (from.management_assertions_by().size() > 0) {

    management_assertions_by_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.management_assertions_by_);
  }
  if (from.comments().size() > 0) {

    comments_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comments_);
  }
  if (from.current_in() != 0) {
    set_current_in(from.current_in());
  }
  if (from.was_in() != 0) {
    set_was_in(from.was_in());
  }
  if (from.cp_same_as_parent() != 0) {
    set_cp_same_as_parent(from.cp_same_as_parent());
  }
  if (from.audit_same_as_parent() != 0) {
    set_audit_same_as_parent(from.audit_same_as_parent());
  }
  if (from.standard_audit_statement_timestamp() != 0) {
    set_standard_audit_statement_timestamp(from.standard_audit_statement_timestamp());
  }
}

void MozillaSalesForceStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.MozillaSalesForceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MozillaSalesForceStatus::CopyFrom(const MozillaSalesForceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.MozillaSalesForceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MozillaSalesForceStatus::IsInitialized() const {
  return true;
}

void MozillaSalesForceStatus::Swap(MozillaSalesForceStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MozillaSalesForceStatus::InternalSwap(MozillaSalesForceStatus* other) {
  owner_name_.Swap(&other->owner_name_);
  parent_name_.Swap(&other->parent_name_);
  certificate_name_.Swap(&other->certificate_name_);
  certificate_policy_.Swap(&other->certificate_policy_);
  certification_practice_statement_.Swap(&other->certification_practice_statement_);
  standard_audit_.Swap(&other->standard_audit_);
  br_audit_.Swap(&other->br_audit_);
  auditor_.Swap(&other->auditor_);
  management_assertions_by_.Swap(&other->management_assertions_by_);
  comments_.Swap(&other->comments_);
  std::swap(current_in_, other->current_in_);
  std::swap(was_in_, other->was_in_);
  std::swap(cp_same_as_parent_, other->cp_same_as_parent_);
  std::swap(audit_same_as_parent_, other->audit_same_as_parent_);
  std::swap(standard_audit_statement_timestamp_, other->standard_audit_statement_timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MozillaSalesForceStatus::GetMetadata() const {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MozillaSalesForceStatus

// bool current_in = 1;
void MozillaSalesForceStatus::clear_current_in() {
  current_in_ = false;
}
bool MozillaSalesForceStatus::current_in() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.current_in)
  return current_in_;
}
void MozillaSalesForceStatus::set_current_in(bool value) {
  
  current_in_ = value;
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.current_in)
}

// bool was_in = 2;
void MozillaSalesForceStatus::clear_was_in() {
  was_in_ = false;
}
bool MozillaSalesForceStatus::was_in() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.was_in)
  return was_in_;
}
void MozillaSalesForceStatus::set_was_in(bool value) {
  
  was_in_ = value;
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.was_in)
}

// string owner_name = 3;
void MozillaSalesForceStatus::clear_owner_name() {
  owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MozillaSalesForceStatus::owner_name() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.owner_name)
  return owner_name_.GetNoArena();
}
void MozillaSalesForceStatus::set_owner_name(const ::std::string& value) {
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.owner_name)
}
#if LANG_CXX11
void MozillaSalesForceStatus::set_owner_name(::std::string&& value) {
  
  owner_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.owner_name)
}
#endif
void MozillaSalesForceStatus::set_owner_name(const char* value) {
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.owner_name)
}
void MozillaSalesForceStatus::set_owner_name(const char* value, size_t size) {
  
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.owner_name)
}
::std::string* MozillaSalesForceStatus::mutable_owner_name() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.owner_name)
  return owner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MozillaSalesForceStatus::release_owner_name() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.owner_name)
  
  return owner_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MozillaSalesForceStatus::set_allocated_owner_name(::std::string* owner_name) {
  if (owner_name != NULL) {
    
  } else {
    
  }
  owner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_name);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.owner_name)
}

// string parent_name = 4;
void MozillaSalesForceStatus::clear_parent_name() {
  parent_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MozillaSalesForceStatus::parent_name() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.parent_name)
  return parent_name_.GetNoArena();
}
void MozillaSalesForceStatus::set_parent_name(const ::std::string& value) {
  
  parent_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.parent_name)
}
#if LANG_CXX11
void MozillaSalesForceStatus::set_parent_name(::std::string&& value) {
  
  parent_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.parent_name)
}
#endif
void MozillaSalesForceStatus::set_parent_name(const char* value) {
  
  parent_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.parent_name)
}
void MozillaSalesForceStatus::set_parent_name(const char* value, size_t size) {
  
  parent_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.parent_name)
}
::std::string* MozillaSalesForceStatus::mutable_parent_name() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.parent_name)
  return parent_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MozillaSalesForceStatus::release_parent_name() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.parent_name)
  
  return parent_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MozillaSalesForceStatus::set_allocated_parent_name(::std::string* parent_name) {
  if (parent_name != NULL) {
    
  } else {
    
  }
  parent_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_name);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.parent_name)
}

// string certificate_name = 5;
void MozillaSalesForceStatus::clear_certificate_name() {
  certificate_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MozillaSalesForceStatus::certificate_name() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.certificate_name)
  return certificate_name_.GetNoArena();
}
void MozillaSalesForceStatus::set_certificate_name(const ::std::string& value) {
  
  certificate_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.certificate_name)
}
#if LANG_CXX11
void MozillaSalesForceStatus::set_certificate_name(::std::string&& value) {
  
  certificate_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.certificate_name)
}
#endif
void MozillaSalesForceStatus::set_certificate_name(const char* value) {
  
  certificate_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.certificate_name)
}
void MozillaSalesForceStatus::set_certificate_name(const char* value, size_t size) {
  
  certificate_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.certificate_name)
}
::std::string* MozillaSalesForceStatus::mutable_certificate_name() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.certificate_name)
  return certificate_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MozillaSalesForceStatus::release_certificate_name() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.certificate_name)
  
  return certificate_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MozillaSalesForceStatus::set_allocated_certificate_name(::std::string* certificate_name) {
  if (certificate_name != NULL) {
    
  } else {
    
  }
  certificate_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certificate_name);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.certificate_name)
}

// string certificate_policy = 6;
void MozillaSalesForceStatus::clear_certificate_policy() {
  certificate_policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MozillaSalesForceStatus::certificate_policy() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.certificate_policy)
  return certificate_policy_.GetNoArena();
}
void MozillaSalesForceStatus::set_certificate_policy(const ::std::string& value) {
  
  certificate_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.certificate_policy)
}
#if LANG_CXX11
void MozillaSalesForceStatus::set_certificate_policy(::std::string&& value) {
  
  certificate_policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.certificate_policy)
}
#endif
void MozillaSalesForceStatus::set_certificate_policy(const char* value) {
  
  certificate_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.certificate_policy)
}
void MozillaSalesForceStatus::set_certificate_policy(const char* value, size_t size) {
  
  certificate_policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.certificate_policy)
}
::std::string* MozillaSalesForceStatus::mutable_certificate_policy() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.certificate_policy)
  return certificate_policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MozillaSalesForceStatus::release_certificate_policy() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.certificate_policy)
  
  return certificate_policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MozillaSalesForceStatus::set_allocated_certificate_policy(::std::string* certificate_policy) {
  if (certificate_policy != NULL) {
    
  } else {
    
  }
  certificate_policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certificate_policy);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.certificate_policy)
}

// string certification_practice_statement = 7;
void MozillaSalesForceStatus::clear_certification_practice_statement() {
  certification_practice_statement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MozillaSalesForceStatus::certification_practice_statement() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.certification_practice_statement)
  return certification_practice_statement_.GetNoArena();
}
void MozillaSalesForceStatus::set_certification_practice_statement(const ::std::string& value) {
  
  certification_practice_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.certification_practice_statement)
}
#if LANG_CXX11
void MozillaSalesForceStatus::set_certification_practice_statement(::std::string&& value) {
  
  certification_practice_statement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.certification_practice_statement)
}
#endif
void MozillaSalesForceStatus::set_certification_practice_statement(const char* value) {
  
  certification_practice_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.certification_practice_statement)
}
void MozillaSalesForceStatus::set_certification_practice_statement(const char* value, size_t size) {
  
  certification_practice_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.certification_practice_statement)
}
::std::string* MozillaSalesForceStatus::mutable_certification_practice_statement() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.certification_practice_statement)
  return certification_practice_statement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MozillaSalesForceStatus::release_certification_practice_statement() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.certification_practice_statement)
  
  return certification_practice_statement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MozillaSalesForceStatus::set_allocated_certification_practice_statement(::std::string* certification_practice_statement) {
  if (certification_practice_statement != NULL) {
    
  } else {
    
  }
  certification_practice_statement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certification_practice_statement);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.certification_practice_statement)
}

// bool cp_same_as_parent = 8;
void MozillaSalesForceStatus::clear_cp_same_as_parent() {
  cp_same_as_parent_ = false;
}
bool MozillaSalesForceStatus::cp_same_as_parent() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.cp_same_as_parent)
  return cp_same_as_parent_;
}
void MozillaSalesForceStatus::set_cp_same_as_parent(bool value) {
  
  cp_same_as_parent_ = value;
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.cp_same_as_parent)
}

// bool audit_same_as_parent = 9;
void MozillaSalesForceStatus::clear_audit_same_as_parent() {
  audit_same_as_parent_ = false;
}
bool MozillaSalesForceStatus::audit_same_as_parent() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.audit_same_as_parent)
  return audit_same_as_parent_;
}
void MozillaSalesForceStatus::set_audit_same_as_parent(bool value) {
  
  audit_same_as_parent_ = value;
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.audit_same_as_parent)
}

// string standard_audit = 10;
void MozillaSalesForceStatus::clear_standard_audit() {
  standard_audit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MozillaSalesForceStatus::standard_audit() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.standard_audit)
  return standard_audit_.GetNoArena();
}
void MozillaSalesForceStatus::set_standard_audit(const ::std::string& value) {
  
  standard_audit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.standard_audit)
}
#if LANG_CXX11
void MozillaSalesForceStatus::set_standard_audit(::std::string&& value) {
  
  standard_audit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.standard_audit)
}
#endif
void MozillaSalesForceStatus::set_standard_audit(const char* value) {
  
  standard_audit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.standard_audit)
}
void MozillaSalesForceStatus::set_standard_audit(const char* value, size_t size) {
  
  standard_audit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.standard_audit)
}
::std::string* MozillaSalesForceStatus::mutable_standard_audit() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.standard_audit)
  return standard_audit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MozillaSalesForceStatus::release_standard_audit() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.standard_audit)
  
  return standard_audit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MozillaSalesForceStatus::set_allocated_standard_audit(::std::string* standard_audit) {
  if (standard_audit != NULL) {
    
  } else {
    
  }
  standard_audit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), standard_audit);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.standard_audit)
}

// string br_audit = 11;
void MozillaSalesForceStatus::clear_br_audit() {
  br_audit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MozillaSalesForceStatus::br_audit() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.br_audit)
  return br_audit_.GetNoArena();
}
void MozillaSalesForceStatus::set_br_audit(const ::std::string& value) {
  
  br_audit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.br_audit)
}
#if LANG_CXX11
void MozillaSalesForceStatus::set_br_audit(::std::string&& value) {
  
  br_audit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.br_audit)
}
#endif
void MozillaSalesForceStatus::set_br_audit(const char* value) {
  
  br_audit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.br_audit)
}
void MozillaSalesForceStatus::set_br_audit(const char* value, size_t size) {
  
  br_audit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.br_audit)
}
::std::string* MozillaSalesForceStatus::mutable_br_audit() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.br_audit)
  return br_audit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MozillaSalesForceStatus::release_br_audit() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.br_audit)
  
  return br_audit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MozillaSalesForceStatus::set_allocated_br_audit(::std::string* br_audit) {
  if (br_audit != NULL) {
    
  } else {
    
  }
  br_audit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), br_audit);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.br_audit)
}

// string auditor = 12;
void MozillaSalesForceStatus::clear_auditor() {
  auditor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MozillaSalesForceStatus::auditor() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.auditor)
  return auditor_.GetNoArena();
}
void MozillaSalesForceStatus::set_auditor(const ::std::string& value) {
  
  auditor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.auditor)
}
#if LANG_CXX11
void MozillaSalesForceStatus::set_auditor(::std::string&& value) {
  
  auditor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.auditor)
}
#endif
void MozillaSalesForceStatus::set_auditor(const char* value) {
  
  auditor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.auditor)
}
void MozillaSalesForceStatus::set_auditor(const char* value, size_t size) {
  
  auditor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.auditor)
}
::std::string* MozillaSalesForceStatus::mutable_auditor() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.auditor)
  return auditor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MozillaSalesForceStatus::release_auditor() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.auditor)
  
  return auditor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MozillaSalesForceStatus::set_allocated_auditor(::std::string* auditor) {
  if (auditor != NULL) {
    
  } else {
    
  }
  auditor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auditor);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.auditor)
}

// uint32 standard_audit_statement_timestamp = 13;
void MozillaSalesForceStatus::clear_standard_audit_statement_timestamp() {
  standard_audit_statement_timestamp_ = 0u;
}
::google::protobuf::uint32 MozillaSalesForceStatus::standard_audit_statement_timestamp() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.standard_audit_statement_timestamp)
  return standard_audit_statement_timestamp_;
}
void MozillaSalesForceStatus::set_standard_audit_statement_timestamp(::google::protobuf::uint32 value) {
  
  standard_audit_statement_timestamp_ = value;
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.standard_audit_statement_timestamp)
}

// string management_assertions_by = 14;
void MozillaSalesForceStatus::clear_management_assertions_by() {
  management_assertions_by_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MozillaSalesForceStatus::management_assertions_by() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.management_assertions_by)
  return management_assertions_by_.GetNoArena();
}
void MozillaSalesForceStatus::set_management_assertions_by(const ::std::string& value) {
  
  management_assertions_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.management_assertions_by)
}
#if LANG_CXX11
void MozillaSalesForceStatus::set_management_assertions_by(::std::string&& value) {
  
  management_assertions_by_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.management_assertions_by)
}
#endif
void MozillaSalesForceStatus::set_management_assertions_by(const char* value) {
  
  management_assertions_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.management_assertions_by)
}
void MozillaSalesForceStatus::set_management_assertions_by(const char* value, size_t size) {
  
  management_assertions_by_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.management_assertions_by)
}
::std::string* MozillaSalesForceStatus::mutable_management_assertions_by() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.management_assertions_by)
  return management_assertions_by_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MozillaSalesForceStatus::release_management_assertions_by() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.management_assertions_by)
  
  return management_assertions_by_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MozillaSalesForceStatus::set_allocated_management_assertions_by(::std::string* management_assertions_by) {
  if (management_assertions_by != NULL) {
    
  } else {
    
  }
  management_assertions_by_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), management_assertions_by);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.management_assertions_by)
}

// string comments = 15;
void MozillaSalesForceStatus::clear_comments() {
  comments_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MozillaSalesForceStatus::comments() const {
  // @@protoc_insertion_point(field_get:zsearch.MozillaSalesForceStatus.comments)
  return comments_.GetNoArena();
}
void MozillaSalesForceStatus::set_comments(const ::std::string& value) {
  
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.MozillaSalesForceStatus.comments)
}
#if LANG_CXX11
void MozillaSalesForceStatus::set_comments(::std::string&& value) {
  
  comments_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.MozillaSalesForceStatus.comments)
}
#endif
void MozillaSalesForceStatus::set_comments(const char* value) {
  
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.MozillaSalesForceStatus.comments)
}
void MozillaSalesForceStatus::set_comments(const char* value, size_t size) {
  
  comments_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.MozillaSalesForceStatus.comments)
}
::std::string* MozillaSalesForceStatus::mutable_comments() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.MozillaSalesForceStatus.comments)
  return comments_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MozillaSalesForceStatus::release_comments() {
  // @@protoc_insertion_point(field_release:zsearch.MozillaSalesForceStatus.comments)
  
  return comments_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MozillaSalesForceStatus::set_allocated_comments(::std::string* comments) {
  if (comments != NULL) {
    
  } else {
    
  }
  comments_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comments);
  // @@protoc_insertion_point(field_set_allocated:zsearch.MozillaSalesForceStatus.comments)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CertificateRevocation::kRevokedFieldNumber;
const int CertificateRevocation::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CertificateRevocation::CertificateRevocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_certificate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.CertificateRevocation)
}
CertificateRevocation::CertificateRevocation(const CertificateRevocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&revoked_, &from.revoked_,
    reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&revoked_) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:zsearch.CertificateRevocation)
}

void CertificateRevocation::SharedCtor() {
  ::memset(&revoked_, 0, reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&revoked_) + sizeof(reason_));
  _cached_size_ = 0;
}

CertificateRevocation::~CertificateRevocation() {
  // @@protoc_insertion_point(destructor:zsearch.CertificateRevocation)
  SharedDtor();
}

void CertificateRevocation::SharedDtor() {
}

void CertificateRevocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CertificateRevocation::descriptor() {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_metadata[4].descriptor;
}

const CertificateRevocation& CertificateRevocation::default_instance() {
  protobuf_certificate_2eproto::InitDefaults();
  return *internal_default_instance();
}

CertificateRevocation* CertificateRevocation::New(::google::protobuf::Arena* arena) const {
  CertificateRevocation* n = new CertificateRevocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CertificateRevocation::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.CertificateRevocation)
  ::memset(&revoked_, 0, reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&revoked_) + sizeof(reason_));
}

bool CertificateRevocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.CertificateRevocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool revoked = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &revoked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CertificateRevocationReason reason = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::zsearch::CertificateRevocationReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.CertificateRevocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.CertificateRevocation)
  return false;
#undef DO_
}

void CertificateRevocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.CertificateRevocation)
  // bool revoked = 1;
  if (this->revoked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->revoked(), output);
  }

  // .zsearch.CertificateRevocationReason reason = 2;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.CertificateRevocation)
}

::google::protobuf::uint8* CertificateRevocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.CertificateRevocation)
  // bool revoked = 1;
  if (this->revoked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->revoked(), target);
  }

  // .zsearch.CertificateRevocationReason reason = 2;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.CertificateRevocation)
  return target;
}

size_t CertificateRevocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.CertificateRevocation)
  size_t total_size = 0;

  // bool revoked = 1;
  if (this->revoked() != 0) {
    total_size += 1 + 1;
  }

  // .zsearch.CertificateRevocationReason reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertificateRevocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.CertificateRevocation)
  GOOGLE_DCHECK_NE(&from, this);
  const CertificateRevocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CertificateRevocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.CertificateRevocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.CertificateRevocation)
    MergeFrom(*source);
  }
}

void CertificateRevocation::MergeFrom(const CertificateRevocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.CertificateRevocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.revoked() != 0) {
    set_revoked(from.revoked());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void CertificateRevocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.CertificateRevocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CertificateRevocation::CopyFrom(const CertificateRevocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.CertificateRevocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificateRevocation::IsInitialized() const {
  return true;
}

void CertificateRevocation::Swap(CertificateRevocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CertificateRevocation::InternalSwap(CertificateRevocation* other) {
  std::swap(revoked_, other->revoked_);
  std::swap(reason_, other->reason_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CertificateRevocation::GetMetadata() const {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CertificateRevocation

// bool revoked = 1;
void CertificateRevocation::clear_revoked() {
  revoked_ = false;
}
bool CertificateRevocation::revoked() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateRevocation.revoked)
  return revoked_;
}
void CertificateRevocation::set_revoked(bool value) {
  
  revoked_ = value;
  // @@protoc_insertion_point(field_set:zsearch.CertificateRevocation.revoked)
}

// .zsearch.CertificateRevocationReason reason = 2;
void CertificateRevocation::clear_reason() {
  reason_ = 0;
}
::zsearch::CertificateRevocationReason CertificateRevocation::reason() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateRevocation.reason)
  return static_cast< ::zsearch::CertificateRevocationReason >(reason_);
}
void CertificateRevocation::set_reason(::zsearch::CertificateRevocationReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:zsearch.CertificateRevocation.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CertificateAudit::kMozillaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CertificateAudit::CertificateAudit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_certificate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.CertificateAudit)
}
CertificateAudit::CertificateAudit(const CertificateAudit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mozilla()) {
    mozilla_ = new ::zsearch::MozillaSalesForceStatus(*from.mozilla_);
  } else {
    mozilla_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zsearch.CertificateAudit)
}

void CertificateAudit::SharedCtor() {
  mozilla_ = NULL;
  _cached_size_ = 0;
}

CertificateAudit::~CertificateAudit() {
  // @@protoc_insertion_point(destructor:zsearch.CertificateAudit)
  SharedDtor();
}

void CertificateAudit::SharedDtor() {
  if (this != internal_default_instance()) {
    delete mozilla_;
  }
}

void CertificateAudit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CertificateAudit::descriptor() {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_metadata[5].descriptor;
}

const CertificateAudit& CertificateAudit::default_instance() {
  protobuf_certificate_2eproto::InitDefaults();
  return *internal_default_instance();
}

CertificateAudit* CertificateAudit::New(::google::protobuf::Arena* arena) const {
  CertificateAudit* n = new CertificateAudit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CertificateAudit::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.CertificateAudit)
  if (GetArenaNoVirtual() == NULL && mozilla_ != NULL) {
    delete mozilla_;
  }
  mozilla_ = NULL;
}

bool CertificateAudit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.CertificateAudit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .zsearch.MozillaSalesForceStatus mozilla = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mozilla()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.CertificateAudit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.CertificateAudit)
  return false;
#undef DO_
}

void CertificateAudit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.CertificateAudit)
  // .zsearch.MozillaSalesForceStatus mozilla = 1;
  if (this->has_mozilla()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mozilla_, output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.CertificateAudit)
}

::google::protobuf::uint8* CertificateAudit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.CertificateAudit)
  // .zsearch.MozillaSalesForceStatus mozilla = 1;
  if (this->has_mozilla()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->mozilla_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.CertificateAudit)
  return target;
}

size_t CertificateAudit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.CertificateAudit)
  size_t total_size = 0;

  // .zsearch.MozillaSalesForceStatus mozilla = 1;
  if (this->has_mozilla()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mozilla_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CertificateAudit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.CertificateAudit)
  GOOGLE_DCHECK_NE(&from, this);
  const CertificateAudit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CertificateAudit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.CertificateAudit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.CertificateAudit)
    MergeFrom(*source);
  }
}

void CertificateAudit::MergeFrom(const CertificateAudit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.CertificateAudit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mozilla()) {
    mutable_mozilla()->::zsearch::MozillaSalesForceStatus::MergeFrom(from.mozilla());
  }
}

void CertificateAudit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.CertificateAudit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CertificateAudit::CopyFrom(const CertificateAudit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.CertificateAudit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificateAudit::IsInitialized() const {
  return true;
}

void CertificateAudit::Swap(CertificateAudit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CertificateAudit::InternalSwap(CertificateAudit* other) {
  std::swap(mozilla_, other->mozilla_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CertificateAudit::GetMetadata() const {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CertificateAudit

// .zsearch.MozillaSalesForceStatus mozilla = 1;
bool CertificateAudit::has_mozilla() const {
  return this != internal_default_instance() && mozilla_ != NULL;
}
void CertificateAudit::clear_mozilla() {
  if (GetArenaNoVirtual() == NULL && mozilla_ != NULL) delete mozilla_;
  mozilla_ = NULL;
}
const ::zsearch::MozillaSalesForceStatus& CertificateAudit::mozilla() const {
  // @@protoc_insertion_point(field_get:zsearch.CertificateAudit.mozilla)
  return mozilla_ != NULL ? *mozilla_
                         : *::zsearch::MozillaSalesForceStatus::internal_default_instance();
}
::zsearch::MozillaSalesForceStatus* CertificateAudit::mutable_mozilla() {
  
  if (mozilla_ == NULL) {
    mozilla_ = new ::zsearch::MozillaSalesForceStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.CertificateAudit.mozilla)
  return mozilla_;
}
::zsearch::MozillaSalesForceStatus* CertificateAudit::release_mozilla() {
  // @@protoc_insertion_point(field_release:zsearch.CertificateAudit.mozilla)
  
  ::zsearch::MozillaSalesForceStatus* temp = mozilla_;
  mozilla_ = NULL;
  return temp;
}
void CertificateAudit::set_allocated_mozilla(::zsearch::MozillaSalesForceStatus* mozilla) {
  delete mozilla_;
  mozilla_ = mozilla;
  if (mozilla) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.CertificateAudit.mozilla)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Certificate::kSha1FpFieldNumber;
const int Certificate::kSha256FpFieldNumber;
const int Certificate::kRawFieldNumber;
const int Certificate::kParsedFieldNumber;
const int Certificate::kParseStatusFieldNumber;
const int Certificate::kParseVersionFieldNumber;
const int Certificate::kParseErrorFieldNumber;
const int Certificate::kParentsFieldNumber;
const int Certificate::kPresentedChainFieldNumber;
const int Certificate::kSourceFieldNumber;
const int Certificate::kSeenInScanFieldNumber;
const int Certificate::kPostProcessedFieldNumber;
const int Certificate::kPostProcessTimestampFieldNumber;
const int Certificate::kValidationFieldNumber;
const int Certificate::kCtFieldNumber;
const int Certificate::kZlintFieldNumber;
const int Certificate::kRevocationFieldNumber;
const int Certificate::kAuditFieldNumber;
const int Certificate::kIsPrecertFieldNumber;
const int Certificate::kNotValidAfterFieldNumber;
const int Certificate::kNotValidBeforeFieldNumber;
const int Certificate::kExpiredFieldNumber;
const int Certificate::kInNssFieldNumber;
const int Certificate::kInMicrosoftFieldNumber;
const int Certificate::kInAppleFieldNumber;
const int Certificate::kValidationTimestampFieldNumber;
const int Certificate::kValidNssFieldNumber;
const int Certificate::kValidMicrosoftFieldNumber;
const int Certificate::kValidAppleFieldNumber;
const int Certificate::kWasValidNssFieldNumber;
const int Certificate::kWasValidMicrosoftFieldNumber;
const int Certificate::kWasValidAppleFieldNumber;
const int Certificate::kWasInNssFieldNumber;
const int Certificate::kWasInMicrosoftFieldNumber;
const int Certificate::kWasInAppleFieldNumber;
const int Certificate::kCurrentValidNssFieldNumber;
const int Certificate::kCurrentValidMicrosoftFieldNumber;
const int Certificate::kCurrentValidAppleFieldNumber;
const int Certificate::kCurrentInNssFieldNumber;
const int Certificate::kCurrentInMicrosoftFieldNumber;
const int Certificate::kCurrentInAppleFieldNumber;
const int Certificate::kNssAuditFieldNumber;
const int Certificate::kShouldPostProcessFieldNumber;
const int Certificate::kDoNotPostProcessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Certificate::Certificate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_certificate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.Certificate)
}
Certificate::Certificate(const Certificate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      parents_(from.parents_),
      presented_chain_(from.presented_chain_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha1fp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sha1fp().size() > 0) {
    sha1fp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha1fp_);
  }
  sha256fp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sha256fp().size() > 0) {
    sha256fp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256fp_);
  }
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.raw().size() > 0) {
    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  parsed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parsed().size() > 0) {
    parsed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parsed_);
  }
  parse_error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parse_error().size() > 0) {
    parse_error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parse_error_);
  }
  if (from.has_validation()) {
    validation_ = new ::zsearch::CertificateValidation(*from.validation_);
  } else {
    validation_ = NULL;
  }
  if (from.has_ct()) {
    ct_ = new ::zsearch::CTStatus(*from.ct_);
  } else {
    ct_ = NULL;
  }
  if (from.has_zlint()) {
    zlint_ = new ::zsearch::ZLint(*from.zlint_);
  } else {
    zlint_ = NULL;
  }
  if (from.has_revocation()) {
    revocation_ = new ::zsearch::CertificateRevocation(*from.revocation_);
  } else {
    revocation_ = NULL;
  }
  if (from.has_audit()) {
    audit_ = new ::zsearch::CertificateAudit(*from.audit_);
  } else {
    audit_ = NULL;
  }
  if (from.has_nss_audit()) {
    nss_audit_ = new ::zsearch::MozillaSalesForceStatus(*from.nss_audit_);
  } else {
    nss_audit_ = NULL;
  }
  ::memcpy(&parse_status_, &from.parse_status_,
    reinterpret_cast<char*>(&do_not_post_process_) -
    reinterpret_cast<char*>(&parse_status_) + sizeof(do_not_post_process_));
  // @@protoc_insertion_point(copy_constructor:zsearch.Certificate)
}

void Certificate::SharedCtor() {
  sha1fp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha256fp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parsed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parse_error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&validation_, 0, reinterpret_cast<char*>(&do_not_post_process_) -
    reinterpret_cast<char*>(&validation_) + sizeof(do_not_post_process_));
  _cached_size_ = 0;
}

Certificate::~Certificate() {
  // @@protoc_insertion_point(destructor:zsearch.Certificate)
  SharedDtor();
}

void Certificate::SharedDtor() {
  sha1fp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha256fp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parsed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parse_error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete validation_;
  }
  if (this != internal_default_instance()) {
    delete ct_;
  }
  if (this != internal_default_instance()) {
    delete zlint_;
  }
  if (this != internal_default_instance()) {
    delete revocation_;
  }
  if (this != internal_default_instance()) {
    delete audit_;
  }
  if (this != internal_default_instance()) {
    delete nss_audit_;
  }
}

void Certificate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Certificate::descriptor() {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_metadata[6].descriptor;
}

const Certificate& Certificate::default_instance() {
  protobuf_certificate_2eproto::InitDefaults();
  return *internal_default_instance();
}

Certificate* Certificate::New(::google::protobuf::Arena* arena) const {
  Certificate* n = new Certificate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Certificate::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.Certificate)
  parents_.Clear();
  presented_chain_.Clear();
  sha1fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha256fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parsed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parse_error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && validation_ != NULL) {
    delete validation_;
  }
  validation_ = NULL;
  if (GetArenaNoVirtual() == NULL && ct_ != NULL) {
    delete ct_;
  }
  ct_ = NULL;
  if (GetArenaNoVirtual() == NULL && zlint_ != NULL) {
    delete zlint_;
  }
  zlint_ = NULL;
  if (GetArenaNoVirtual() == NULL && revocation_ != NULL) {
    delete revocation_;
  }
  revocation_ = NULL;
  if (GetArenaNoVirtual() == NULL && audit_ != NULL) {
    delete audit_;
  }
  audit_ = NULL;
  if (GetArenaNoVirtual() == NULL && nss_audit_ != NULL) {
    delete nss_audit_;
  }
  nss_audit_ = NULL;
  ::memset(&parse_status_, 0, reinterpret_cast<char*>(&do_not_post_process_) -
    reinterpret_cast<char*>(&parse_status_) + sizeof(do_not_post_process_));
}

bool Certificate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.Certificate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes sha1fp = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha1fp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sha256fp = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha256fp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes raw = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string parsed = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parsed()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parsed().data(), this->parsed().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.Certificate.parsed"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes parents = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_parents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool in_nss = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_nss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool in_microsoft = 7 [deprecated = true];
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_microsoft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool in_apple = 8 [deprecated = true];
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_apple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 validation_timestamp = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &validation_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool valid_nss = 11 [deprecated = true];
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_nss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool valid_microsoft = 12 [deprecated = true];
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_microsoft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool valid_apple = 13 [deprecated = true];
      case 13: {
        if (tag == 104u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_apple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool was_valid_nss = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_valid_nss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool was_valid_microsoft = 15 [deprecated = true];
      case 15: {
        if (tag == 120u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_valid_microsoft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool was_valid_apple = 16 [deprecated = true];
      case 16: {
        if (tag == 128u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_valid_apple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool was_in_nss = 17 [deprecated = true];
      case 17: {
        if (tag == 136u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_in_nss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool was_in_microsoft = 18 [deprecated = true];
      case 18: {
        if (tag == 144u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_in_microsoft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool was_in_apple = 19 [deprecated = true];
      case 19: {
        if (tag == 152u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &was_in_apple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool current_valid_nss = 20;
      case 20: {
        if (tag == 160u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &current_valid_nss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool current_valid_microsoft = 21 [deprecated = true];
      case 21: {
        if (tag == 168u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &current_valid_microsoft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool current_valid_apple = 22 [deprecated = true];
      case 22: {
        if (tag == 176u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &current_valid_apple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool current_in_nss = 23;
      case 23: {
        if (tag == 184u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &current_in_nss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool current_in_microsoft = 24 [deprecated = true];
      case 24: {
        if (tag == 192u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &current_in_microsoft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool current_in_apple = 25 [deprecated = true];
      case 25: {
        if (tag == 200u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &current_in_apple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool post_processed = 26;
      case 26: {
        if (tag == 208u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &post_processed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool should_post_process = 27 [deprecated = true];
      case 27: {
        if (tag == 216u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_post_process_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CertificateSource source = 28;
      case 28: {
        if (tag == 224u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_source(static_cast< ::zsearch::CertificateSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool seen_in_scan = 29;
      case 29: {
        if (tag == 232u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seen_in_scan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CTStatus ct = 30;
      case 30: {
        if (tag == 242u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.MozillaSalesForceStatus nss_audit = 31 [deprecated = true];
      case 31: {
        if (tag == 250u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nss_audit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_precert = 32;
      case 32: {
        if (tag == 256u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_precert_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CertificateValidation validation = 35;
      case 35: {
        if (tag == 282u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_validation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool do_not_post_process = 36 [deprecated = true];
      case 36: {
        if (tag == 288u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_not_post_process_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 post_process_timestamp = 37;
      case 37: {
        if (tag == 296u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &post_process_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.ZLint zlint = 38;
      case 38: {
        if (tag == 306u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zlint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 parse_version = 39;
      case 39: {
        if (tag == 312u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parse_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 not_valid_after = 41;
      case 41: {
        if (tag == 328u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &not_valid_after_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 not_valid_before = 42;
      case 42: {
        if (tag == 336u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &not_valid_before_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CertificateRevocation revocation = 43;
      case 43: {
        if (tag == 346u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_revocation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CertificateParseStatus parse_status = 44;
      case 44: {
        if (tag == 352u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_parse_status(static_cast< ::zsearch::CertificateParseStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes presented_chain = 45;
      case 45: {
        if (tag == 362u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_presented_chain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.CertificateAudit audit = 46;
      case 46: {
        if (tag == 370u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string parse_error = 47;
      case 47: {
        if (tag == 378u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parse_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parse_error().data(), this->parse_error().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.Certificate.parse_error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool expired = 48;
      case 48: {
        if (tag == 384u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &expired_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.Certificate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.Certificate)
  return false;
#undef DO_
}

void Certificate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.Certificate)
  // bytes sha1fp = 1;
  if (this->sha1fp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sha1fp(), output);
  }

  // bytes sha256fp = 2;
  if (this->sha256fp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sha256fp(), output);
  }

  // bytes raw = 3;
  if (this->raw().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->raw(), output);
  }

  // string parsed = 4;
  if (this->parsed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parsed().data(), this->parsed().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.Certificate.parsed");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->parsed(), output);
  }

  // repeated bytes parents = 5;
  for (int i = 0; i < this->parents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->parents(i), output);
  }

  // bool in_nss = 6;
  if (this->in_nss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->in_nss(), output);
  }

  // bool in_microsoft = 7 [deprecated = true];
  if (this->in_microsoft() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->in_microsoft(), output);
  }

  // bool in_apple = 8 [deprecated = true];
  if (this->in_apple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->in_apple(), output);
  }

  // uint32 validation_timestamp = 10;
  if (this->validation_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->validation_timestamp(), output);
  }

  // bool valid_nss = 11 [deprecated = true];
  if (this->valid_nss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->valid_nss(), output);
  }

  // bool valid_microsoft = 12 [deprecated = true];
  if (this->valid_microsoft() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->valid_microsoft(), output);
  }

  // bool valid_apple = 13 [deprecated = true];
  if (this->valid_apple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->valid_apple(), output);
  }

  // bool was_valid_nss = 14;
  if (this->was_valid_nss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->was_valid_nss(), output);
  }

  // bool was_valid_microsoft = 15 [deprecated = true];
  if (this->was_valid_microsoft() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->was_valid_microsoft(), output);
  }

  // bool was_valid_apple = 16 [deprecated = true];
  if (this->was_valid_apple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->was_valid_apple(), output);
  }

  // bool was_in_nss = 17 [deprecated = true];
  if (this->was_in_nss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->was_in_nss(), output);
  }

  // bool was_in_microsoft = 18 [deprecated = true];
  if (this->was_in_microsoft() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->was_in_microsoft(), output);
  }

  // bool was_in_apple = 19 [deprecated = true];
  if (this->was_in_apple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->was_in_apple(), output);
  }

  // bool current_valid_nss = 20;
  if (this->current_valid_nss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->current_valid_nss(), output);
  }

  // bool current_valid_microsoft = 21 [deprecated = true];
  if (this->current_valid_microsoft() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->current_valid_microsoft(), output);
  }

  // bool current_valid_apple = 22 [deprecated = true];
  if (this->current_valid_apple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->current_valid_apple(), output);
  }

  // bool current_in_nss = 23;
  if (this->current_in_nss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->current_in_nss(), output);
  }

  // bool current_in_microsoft = 24 [deprecated = true];
  if (this->current_in_microsoft() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->current_in_microsoft(), output);
  }

  // bool current_in_apple = 25 [deprecated = true];
  if (this->current_in_apple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->current_in_apple(), output);
  }

  // bool post_processed = 26;
  if (this->post_processed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->post_processed(), output);
  }

  // bool should_post_process = 27 [deprecated = true];
  if (this->should_post_process() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->should_post_process(), output);
  }

  // .zsearch.CertificateSource source = 28;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->source(), output);
  }

  // bool seen_in_scan = 29;
  if (this->seen_in_scan() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->seen_in_scan(), output);
  }

  // .zsearch.CTStatus ct = 30;
  if (this->has_ct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->ct_, output);
  }

  // .zsearch.MozillaSalesForceStatus nss_audit = 31 [deprecated = true];
  if (this->has_nss_audit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->nss_audit_, output);
  }

  // bool is_precert = 32;
  if (this->is_precert() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->is_precert(), output);
  }

  // .zsearch.CertificateValidation validation = 35;
  if (this->has_validation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *this->validation_, output);
  }

  // bool do_not_post_process = 36 [deprecated = true];
  if (this->do_not_post_process() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->do_not_post_process(), output);
  }

  // uint32 post_process_timestamp = 37;
  if (this->post_process_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->post_process_timestamp(), output);
  }

  // .zsearch.ZLint zlint = 38;
  if (this->has_zlint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, *this->zlint_, output);
  }

  // uint32 parse_version = 39;
  if (this->parse_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->parse_version(), output);
  }

  // uint32 not_valid_after = 41;
  if (this->not_valid_after() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->not_valid_after(), output);
  }

  // uint32 not_valid_before = 42;
  if (this->not_valid_before() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->not_valid_before(), output);
  }

  // .zsearch.CertificateRevocation revocation = 43;
  if (this->has_revocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, *this->revocation_, output);
  }

  // .zsearch.CertificateParseStatus parse_status = 44;
  if (this->parse_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      44, this->parse_status(), output);
  }

  // repeated bytes presented_chain = 45;
  for (int i = 0; i < this->presented_chain_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      45, this->presented_chain(i), output);
  }

  // .zsearch.CertificateAudit audit = 46;
  if (this->has_audit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, *this->audit_, output);
  }

  // string parse_error = 47;
  if (this->parse_error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parse_error().data(), this->parse_error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.Certificate.parse_error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      47, this->parse_error(), output);
  }

  // bool expired = 48;
  if (this->expired() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->expired(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.Certificate)
}

::google::protobuf::uint8* Certificate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.Certificate)
  // bytes sha1fp = 1;
  if (this->sha1fp().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sha1fp(), target);
  }

  // bytes sha256fp = 2;
  if (this->sha256fp().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sha256fp(), target);
  }

  // bytes raw = 3;
  if (this->raw().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->raw(), target);
  }

  // string parsed = 4;
  if (this->parsed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parsed().data(), this->parsed().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.Certificate.parsed");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->parsed(), target);
  }

  // repeated bytes parents = 5;
  for (int i = 0; i < this->parents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->parents(i), target);
  }

  // bool in_nss = 6;
  if (this->in_nss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->in_nss(), target);
  }

  // bool in_microsoft = 7 [deprecated = true];
  if (this->in_microsoft() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->in_microsoft(), target);
  }

  // bool in_apple = 8 [deprecated = true];
  if (this->in_apple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->in_apple(), target);
  }

  // uint32 validation_timestamp = 10;
  if (this->validation_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->validation_timestamp(), target);
  }

  // bool valid_nss = 11 [deprecated = true];
  if (this->valid_nss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->valid_nss(), target);
  }

  // bool valid_microsoft = 12 [deprecated = true];
  if (this->valid_microsoft() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->valid_microsoft(), target);
  }

  // bool valid_apple = 13 [deprecated = true];
  if (this->valid_apple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->valid_apple(), target);
  }

  // bool was_valid_nss = 14;
  if (this->was_valid_nss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->was_valid_nss(), target);
  }

  // bool was_valid_microsoft = 15 [deprecated = true];
  if (this->was_valid_microsoft() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->was_valid_microsoft(), target);
  }

  // bool was_valid_apple = 16 [deprecated = true];
  if (this->was_valid_apple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->was_valid_apple(), target);
  }

  // bool was_in_nss = 17 [deprecated = true];
  if (this->was_in_nss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->was_in_nss(), target);
  }

  // bool was_in_microsoft = 18 [deprecated = true];
  if (this->was_in_microsoft() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->was_in_microsoft(), target);
  }

  // bool was_in_apple = 19 [deprecated = true];
  if (this->was_in_apple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->was_in_apple(), target);
  }

  // bool current_valid_nss = 20;
  if (this->current_valid_nss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->current_valid_nss(), target);
  }

  // bool current_valid_microsoft = 21 [deprecated = true];
  if (this->current_valid_microsoft() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->current_valid_microsoft(), target);
  }

  // bool current_valid_apple = 22 [deprecated = true];
  if (this->current_valid_apple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->current_valid_apple(), target);
  }

  // bool current_in_nss = 23;
  if (this->current_in_nss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->current_in_nss(), target);
  }

  // bool current_in_microsoft = 24 [deprecated = true];
  if (this->current_in_microsoft() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->current_in_microsoft(), target);
  }

  // bool current_in_apple = 25 [deprecated = true];
  if (this->current_in_apple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->current_in_apple(), target);
  }

  // bool post_processed = 26;
  if (this->post_processed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->post_processed(), target);
  }

  // bool should_post_process = 27 [deprecated = true];
  if (this->should_post_process() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->should_post_process(), target);
  }

  // .zsearch.CertificateSource source = 28;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->source(), target);
  }

  // bool seen_in_scan = 29;
  if (this->seen_in_scan() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->seen_in_scan(), target);
  }

  // .zsearch.CTStatus ct = 30;
  if (this->has_ct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->ct_, false, target);
  }

  // .zsearch.MozillaSalesForceStatus nss_audit = 31 [deprecated = true];
  if (this->has_nss_audit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->nss_audit_, false, target);
  }

  // bool is_precert = 32;
  if (this->is_precert() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->is_precert(), target);
  }

  // .zsearch.CertificateValidation validation = 35;
  if (this->has_validation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, *this->validation_, false, target);
  }

  // bool do_not_post_process = 36 [deprecated = true];
  if (this->do_not_post_process() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->do_not_post_process(), target);
  }

  // uint32 post_process_timestamp = 37;
  if (this->post_process_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->post_process_timestamp(), target);
  }

  // .zsearch.ZLint zlint = 38;
  if (this->has_zlint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        38, *this->zlint_, false, target);
  }

  // uint32 parse_version = 39;
  if (this->parse_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->parse_version(), target);
  }

  // uint32 not_valid_after = 41;
  if (this->not_valid_after() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->not_valid_after(), target);
  }

  // uint32 not_valid_before = 42;
  if (this->not_valid_before() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->not_valid_before(), target);
  }

  // .zsearch.CertificateRevocation revocation = 43;
  if (this->has_revocation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        43, *this->revocation_, false, target);
  }

  // .zsearch.CertificateParseStatus parse_status = 44;
  if (this->parse_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      44, this->parse_status(), target);
  }

  // repeated bytes presented_chain = 45;
  for (int i = 0; i < this->presented_chain_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(45, this->presented_chain(i), target);
  }

  // .zsearch.CertificateAudit audit = 46;
  if (this->has_audit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        46, *this->audit_, false, target);
  }

  // string parse_error = 47;
  if (this->parse_error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parse_error().data(), this->parse_error().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.Certificate.parse_error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->parse_error(), target);
  }

  // bool expired = 48;
  if (this->expired() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->expired(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.Certificate)
  return target;
}

size_t Certificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.Certificate)
  size_t total_size = 0;

  // repeated bytes parents = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->parents_size());
  for (int i = 0; i < this->parents_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->parents(i));
  }

  // repeated bytes presented_chain = 45;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->presented_chain_size());
  for (int i = 0; i < this->presented_chain_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->presented_chain(i));
  }

  // bytes sha1fp = 1;
  if (this->sha1fp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sha1fp());
  }

  // bytes sha256fp = 2;
  if (this->sha256fp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sha256fp());
  }

  // bytes raw = 3;
  if (this->raw().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->raw());
  }

  // string parsed = 4;
  if (this->parsed().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parsed());
  }

  // string parse_error = 47;
  if (this->parse_error().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parse_error());
  }

  // .zsearch.CertificateValidation validation = 35;
  if (this->has_validation()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->validation_);
  }

  // .zsearch.CTStatus ct = 30;
  if (this->has_ct()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ct_);
  }

  // .zsearch.ZLint zlint = 38;
  if (this->has_zlint()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->zlint_);
  }

  // .zsearch.CertificateRevocation revocation = 43;
  if (this->has_revocation()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->revocation_);
  }

  // .zsearch.CertificateAudit audit = 46;
  if (this->has_audit()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->audit_);
  }

  // .zsearch.MozillaSalesForceStatus nss_audit = 31 [deprecated = true];
  if (this->has_nss_audit()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nss_audit_);
  }

  // .zsearch.CertificateParseStatus parse_status = 44;
  if (this->parse_status() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->parse_status());
  }

  // uint32 parse_version = 39;
  if (this->parse_version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->parse_version());
  }

  // .zsearch.CertificateSource source = 28;
  if (this->source() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
  }

  // uint32 post_process_timestamp = 37;
  if (this->post_process_timestamp() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->post_process_timestamp());
  }

  // bool seen_in_scan = 29;
  if (this->seen_in_scan() != 0) {
    total_size += 2 + 1;
  }

  // bool post_processed = 26;
  if (this->post_processed() != 0) {
    total_size += 2 + 1;
  }

  // bool is_precert = 32;
  if (this->is_precert() != 0) {
    total_size += 2 + 1;
  }

  // bool expired = 48;
  if (this->expired() != 0) {
    total_size += 2 + 1;
  }

  // uint32 not_valid_after = 41;
  if (this->not_valid_after() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->not_valid_after());
  }

  // uint32 not_valid_before = 42;
  if (this->not_valid_before() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->not_valid_before());
  }

  // bool in_nss = 6;
  if (this->in_nss() != 0) {
    total_size += 1 + 1;
  }

  // bool in_microsoft = 7 [deprecated = true];
  if (this->in_microsoft() != 0) {
    total_size += 1 + 1;
  }

  // bool in_apple = 8 [deprecated = true];
  if (this->in_apple() != 0) {
    total_size += 1 + 1;
  }

  // bool valid_nss = 11 [deprecated = true];
  if (this->valid_nss() != 0) {
    total_size += 1 + 1;
  }

  // uint32 validation_timestamp = 10;
  if (this->validation_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->validation_timestamp());
  }

  // bool valid_microsoft = 12 [deprecated = true];
  if (this->valid_microsoft() != 0) {
    total_size += 1 + 1;
  }

  // bool valid_apple = 13 [deprecated = true];
  if (this->valid_apple() != 0) {
    total_size += 1 + 1;
  }

  // bool was_valid_nss = 14;
  if (this->was_valid_nss() != 0) {
    total_size += 1 + 1;
  }

  // bool was_valid_microsoft = 15 [deprecated = true];
  if (this->was_valid_microsoft() != 0) {
    total_size += 1 + 1;
  }

  // bool was_valid_apple = 16 [deprecated = true];
  if (this->was_valid_apple() != 0) {
    total_size += 2 + 1;
  }

  // bool was_in_nss = 17 [deprecated = true];
  if (this->was_in_nss() != 0) {
    total_size += 2 + 1;
  }

  // bool was_in_microsoft = 18 [deprecated = true];
  if (this->was_in_microsoft() != 0) {
    total_size += 2 + 1;
  }

  // bool was_in_apple = 19 [deprecated = true];
  if (this->was_in_apple() != 0) {
    total_size += 2 + 1;
  }

  // bool current_valid_nss = 20;
  if (this->current_valid_nss() != 0) {
    total_size += 2 + 1;
  }

  // bool current_valid_microsoft = 21 [deprecated = true];
  if (this->current_valid_microsoft() != 0) {
    total_size += 2 + 1;
  }

  // bool current_valid_apple = 22 [deprecated = true];
  if (this->current_valid_apple() != 0) {
    total_size += 2 + 1;
  }

  // bool current_in_nss = 23;
  if (this->current_in_nss() != 0) {
    total_size += 2 + 1;
  }

  // bool current_in_microsoft = 24 [deprecated = true];
  if (this->current_in_microsoft() != 0) {
    total_size += 2 + 1;
  }

  // bool current_in_apple = 25 [deprecated = true];
  if (this->current_in_apple() != 0) {
    total_size += 2 + 1;
  }

  // bool should_post_process = 27 [deprecated = true];
  if (this->should_post_process() != 0) {
    total_size += 2 + 1;
  }

  // bool do_not_post_process = 36 [deprecated = true];
  if (this->do_not_post_process() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Certificate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.Certificate)
  GOOGLE_DCHECK_NE(&from, this);
  const Certificate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Certificate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.Certificate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.Certificate)
    MergeFrom(*source);
  }
}

void Certificate::MergeFrom(const Certificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.Certificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parents_.MergeFrom(from.parents_);
  presented_chain_.MergeFrom(from.presented_chain_);
  if (from.sha1fp().size() > 0) {

    sha1fp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha1fp_);
  }
  if (from.sha256fp().size() > 0) {

    sha256fp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256fp_);
  }
  if (from.raw().size() > 0) {

    raw_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.raw_);
  }
  if (from.parsed().size() > 0) {

    parsed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parsed_);
  }
  if (from.parse_error().size() > 0) {

    parse_error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parse_error_);
  }
  if (from.has_validation()) {
    mutable_validation()->::zsearch::CertificateValidation::MergeFrom(from.validation());
  }
  if (from.has_ct()) {
    mutable_ct()->::zsearch::CTStatus::MergeFrom(from.ct());
  }
  if (from.has_zlint()) {
    mutable_zlint()->::zsearch::ZLint::MergeFrom(from.zlint());
  }
  if (from.has_revocation()) {
    mutable_revocation()->::zsearch::CertificateRevocation::MergeFrom(from.revocation());
  }
  if (from.has_audit()) {
    mutable_audit()->::zsearch::CertificateAudit::MergeFrom(from.audit());
  }
  if (from.has_nss_audit()) {
    mutable_nss_audit()->::zsearch::MozillaSalesForceStatus::MergeFrom(from.nss_audit());
  }
  if (from.parse_status() != 0) {
    set_parse_status(from.parse_status());
  }
  if (from.parse_version() != 0) {
    set_parse_version(from.parse_version());
  }
  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.post_process_timestamp() != 0) {
    set_post_process_timestamp(from.post_process_timestamp());
  }
  if (from.seen_in_scan() != 0) {
    set_seen_in_scan(from.seen_in_scan());
  }
  if (from.post_processed() != 0) {
    set_post_processed(from.post_processed());
  }
  if (from.is_precert() != 0) {
    set_is_precert(from.is_precert());
  }
  if (from.expired() != 0) {
    set_expired(from.expired());
  }
  if (from.not_valid_after() != 0) {
    set_not_valid_after(from.not_valid_after());
  }
  if (from.not_valid_before() != 0) {
    set_not_valid_before(from.not_valid_before());
  }
  if (from.in_nss() != 0) {
    set_in_nss(from.in_nss());
  }
  if (from.in_microsoft() != 0) {
    set_in_microsoft(from.in_microsoft());
  }
  if (from.in_apple() != 0) {
    set_in_apple(from.in_apple());
  }
  if (from.valid_nss() != 0) {
    set_valid_nss(from.valid_nss());
  }
  if (from.validation_timestamp() != 0) {
    set_validation_timestamp(from.validation_timestamp());
  }
  if (from.valid_microsoft() != 0) {
    set_valid_microsoft(from.valid_microsoft());
  }
  if (from.valid_apple() != 0) {
    set_valid_apple(from.valid_apple());
  }
  if (from.was_valid_nss() != 0) {
    set_was_valid_nss(from.was_valid_nss());
  }
  if (from.was_valid_microsoft() != 0) {
    set_was_valid_microsoft(from.was_valid_microsoft());
  }
  if (from.was_valid_apple() != 0) {
    set_was_valid_apple(from.was_valid_apple());
  }
  if (from.was_in_nss() != 0) {
    set_was_in_nss(from.was_in_nss());
  }
  if (from.was_in_microsoft() != 0) {
    set_was_in_microsoft(from.was_in_microsoft());
  }
  if (from.was_in_apple() != 0) {
    set_was_in_apple(from.was_in_apple());
  }
  if (from.current_valid_nss() != 0) {
    set_current_valid_nss(from.current_valid_nss());
  }
  if (from.current_valid_microsoft() != 0) {
    set_current_valid_microsoft(from.current_valid_microsoft());
  }
  if (from.current_valid_apple() != 0) {
    set_current_valid_apple(from.current_valid_apple());
  }
  if (from.current_in_nss() != 0) {
    set_current_in_nss(from.current_in_nss());
  }
  if (from.current_in_microsoft() != 0) {
    set_current_in_microsoft(from.current_in_microsoft());
  }
  if (from.current_in_apple() != 0) {
    set_current_in_apple(from.current_in_apple());
  }
  if (from.should_post_process() != 0) {
    set_should_post_process(from.should_post_process());
  }
  if (from.do_not_post_process() != 0) {
    set_do_not_post_process(from.do_not_post_process());
  }
}

void Certificate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.Certificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Certificate::CopyFrom(const Certificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.Certificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Certificate::IsInitialized() const {
  return true;
}

void Certificate::Swap(Certificate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Certificate::InternalSwap(Certificate* other) {
  parents_.UnsafeArenaSwap(&other->parents_);
  presented_chain_.UnsafeArenaSwap(&other->presented_chain_);
  sha1fp_.Swap(&other->sha1fp_);
  sha256fp_.Swap(&other->sha256fp_);
  raw_.Swap(&other->raw_);
  parsed_.Swap(&other->parsed_);
  parse_error_.Swap(&other->parse_error_);
  std::swap(validation_, other->validation_);
  std::swap(ct_, other->ct_);
  std::swap(zlint_, other->zlint_);
  std::swap(revocation_, other->revocation_);
  std::swap(audit_, other->audit_);
  std::swap(nss_audit_, other->nss_audit_);
  std::swap(parse_status_, other->parse_status_);
  std::swap(parse_version_, other->parse_version_);
  std::swap(source_, other->source_);
  std::swap(post_process_timestamp_, other->post_process_timestamp_);
  std::swap(seen_in_scan_, other->seen_in_scan_);
  std::swap(post_processed_, other->post_processed_);
  std::swap(is_precert_, other->is_precert_);
  std::swap(expired_, other->expired_);
  std::swap(not_valid_after_, other->not_valid_after_);
  std::swap(not_valid_before_, other->not_valid_before_);
  std::swap(in_nss_, other->in_nss_);
  std::swap(in_microsoft_, other->in_microsoft_);
  std::swap(in_apple_, other->in_apple_);
  std::swap(valid_nss_, other->valid_nss_);
  std::swap(validation_timestamp_, other->validation_timestamp_);
  std::swap(valid_microsoft_, other->valid_microsoft_);
  std::swap(valid_apple_, other->valid_apple_);
  std::swap(was_valid_nss_, other->was_valid_nss_);
  std::swap(was_valid_microsoft_, other->was_valid_microsoft_);
  std::swap(was_valid_apple_, other->was_valid_apple_);
  std::swap(was_in_nss_, other->was_in_nss_);
  std::swap(was_in_microsoft_, other->was_in_microsoft_);
  std::swap(was_in_apple_, other->was_in_apple_);
  std::swap(current_valid_nss_, other->current_valid_nss_);
  std::swap(current_valid_microsoft_, other->current_valid_microsoft_);
  std::swap(current_valid_apple_, other->current_valid_apple_);
  std::swap(current_in_nss_, other->current_in_nss_);
  std::swap(current_in_microsoft_, other->current_in_microsoft_);
  std::swap(current_in_apple_, other->current_in_apple_);
  std::swap(should_post_process_, other->should_post_process_);
  std::swap(do_not_post_process_, other->do_not_post_process_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Certificate::GetMetadata() const {
  protobuf_certificate_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_certificate_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Certificate

// bytes sha1fp = 1;
void Certificate::clear_sha1fp() {
  sha1fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Certificate::sha1fp() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.sha1fp)
  return sha1fp_.GetNoArena();
}
void Certificate::set_sha1fp(const ::std::string& value) {
  
  sha1fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.Certificate.sha1fp)
}
#if LANG_CXX11
void Certificate::set_sha1fp(::std::string&& value) {
  
  sha1fp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.Certificate.sha1fp)
}
#endif
void Certificate::set_sha1fp(const char* value) {
  
  sha1fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.Certificate.sha1fp)
}
void Certificate::set_sha1fp(const void* value, size_t size) {
  
  sha1fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.Certificate.sha1fp)
}
::std::string* Certificate::mutable_sha1fp() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.sha1fp)
  return sha1fp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Certificate::release_sha1fp() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.sha1fp)
  
  return sha1fp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Certificate::set_allocated_sha1fp(::std::string* sha1fp) {
  if (sha1fp != NULL) {
    
  } else {
    
  }
  sha1fp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha1fp);
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.sha1fp)
}

// bytes sha256fp = 2;
void Certificate::clear_sha256fp() {
  sha256fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Certificate::sha256fp() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.sha256fp)
  return sha256fp_.GetNoArena();
}
void Certificate::set_sha256fp(const ::std::string& value) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.Certificate.sha256fp)
}
#if LANG_CXX11
void Certificate::set_sha256fp(::std::string&& value) {
  
  sha256fp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.Certificate.sha256fp)
}
#endif
void Certificate::set_sha256fp(const char* value) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.Certificate.sha256fp)
}
void Certificate::set_sha256fp(const void* value, size_t size) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.Certificate.sha256fp)
}
::std::string* Certificate::mutable_sha256fp() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.sha256fp)
  return sha256fp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Certificate::release_sha256fp() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.sha256fp)
  
  return sha256fp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Certificate::set_allocated_sha256fp(::std::string* sha256fp) {
  if (sha256fp != NULL) {
    
  } else {
    
  }
  sha256fp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha256fp);
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.sha256fp)
}

// bytes raw = 3;
void Certificate::clear_raw() {
  raw_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Certificate::raw() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.raw)
  return raw_.GetNoArena();
}
void Certificate::set_raw(const ::std::string& value) {
  
  raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.Certificate.raw)
}
#if LANG_CXX11
void Certificate::set_raw(::std::string&& value) {
  
  raw_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.Certificate.raw)
}
#endif
void Certificate::set_raw(const char* value) {
  
  raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.Certificate.raw)
}
void Certificate::set_raw(const void* value, size_t size) {
  
  raw_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.Certificate.raw)
}
::std::string* Certificate::mutable_raw() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.raw)
  return raw_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Certificate::release_raw() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.raw)
  
  return raw_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Certificate::set_allocated_raw(::std::string* raw) {
  if (raw != NULL) {
    
  } else {
    
  }
  raw_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw);
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.raw)
}

// string parsed = 4;
void Certificate::clear_parsed() {
  parsed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Certificate::parsed() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.parsed)
  return parsed_.GetNoArena();
}
void Certificate::set_parsed(const ::std::string& value) {
  
  parsed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.Certificate.parsed)
}
#if LANG_CXX11
void Certificate::set_parsed(::std::string&& value) {
  
  parsed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.Certificate.parsed)
}
#endif
void Certificate::set_parsed(const char* value) {
  
  parsed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.Certificate.parsed)
}
void Certificate::set_parsed(const char* value, size_t size) {
  
  parsed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.Certificate.parsed)
}
::std::string* Certificate::mutable_parsed() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.parsed)
  return parsed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Certificate::release_parsed() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.parsed)
  
  return parsed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Certificate::set_allocated_parsed(::std::string* parsed) {
  if (parsed != NULL) {
    
  } else {
    
  }
  parsed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parsed);
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.parsed)
}

// .zsearch.CertificateParseStatus parse_status = 44;
void Certificate::clear_parse_status() {
  parse_status_ = 0;
}
::zsearch::CertificateParseStatus Certificate::parse_status() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.parse_status)
  return static_cast< ::zsearch::CertificateParseStatus >(parse_status_);
}
void Certificate::set_parse_status(::zsearch::CertificateParseStatus value) {
  
  parse_status_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.parse_status)
}

// uint32 parse_version = 39;
void Certificate::clear_parse_version() {
  parse_version_ = 0u;
}
::google::protobuf::uint32 Certificate::parse_version() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.parse_version)
  return parse_version_;
}
void Certificate::set_parse_version(::google::protobuf::uint32 value) {
  
  parse_version_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.parse_version)
}

// string parse_error = 47;
void Certificate::clear_parse_error() {
  parse_error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Certificate::parse_error() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.parse_error)
  return parse_error_.GetNoArena();
}
void Certificate::set_parse_error(const ::std::string& value) {
  
  parse_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.Certificate.parse_error)
}
#if LANG_CXX11
void Certificate::set_parse_error(::std::string&& value) {
  
  parse_error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.Certificate.parse_error)
}
#endif
void Certificate::set_parse_error(const char* value) {
  
  parse_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.Certificate.parse_error)
}
void Certificate::set_parse_error(const char* value, size_t size) {
  
  parse_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.Certificate.parse_error)
}
::std::string* Certificate::mutable_parse_error() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.parse_error)
  return parse_error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Certificate::release_parse_error() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.parse_error)
  
  return parse_error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Certificate::set_allocated_parse_error(::std::string* parse_error) {
  if (parse_error != NULL) {
    
  } else {
    
  }
  parse_error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parse_error);
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.parse_error)
}

// repeated bytes parents = 5;
int Certificate::parents_size() const {
  return parents_.size();
}
void Certificate::clear_parents() {
  parents_.Clear();
}
const ::std::string& Certificate::parents(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.parents)
  return parents_.Get(index);
}
::std::string* Certificate::mutable_parents(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.parents)
  return parents_.Mutable(index);
}
void Certificate::set_parents(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zsearch.Certificate.parents)
  parents_.Mutable(index)->assign(value);
}
void Certificate::set_parents(int index, const char* value) {
  parents_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zsearch.Certificate.parents)
}
void Certificate::set_parents(int index, const void* value, size_t size) {
  parents_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zsearch.Certificate.parents)
}
::std::string* Certificate::add_parents() {
  // @@protoc_insertion_point(field_add_mutable:zsearch.Certificate.parents)
  return parents_.Add();
}
void Certificate::add_parents(const ::std::string& value) {
  parents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zsearch.Certificate.parents)
}
void Certificate::add_parents(const char* value) {
  parents_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zsearch.Certificate.parents)
}
void Certificate::add_parents(const void* value, size_t size) {
  parents_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zsearch.Certificate.parents)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Certificate::parents() const {
  // @@protoc_insertion_point(field_list:zsearch.Certificate.parents)
  return parents_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Certificate::mutable_parents() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.Certificate.parents)
  return &parents_;
}

// repeated bytes presented_chain = 45;
int Certificate::presented_chain_size() const {
  return presented_chain_.size();
}
void Certificate::clear_presented_chain() {
  presented_chain_.Clear();
}
const ::std::string& Certificate::presented_chain(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.presented_chain)
  return presented_chain_.Get(index);
}
::std::string* Certificate::mutable_presented_chain(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.presented_chain)
  return presented_chain_.Mutable(index);
}
void Certificate::set_presented_chain(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zsearch.Certificate.presented_chain)
  presented_chain_.Mutable(index)->assign(value);
}
void Certificate::set_presented_chain(int index, const char* value) {
  presented_chain_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zsearch.Certificate.presented_chain)
}
void Certificate::set_presented_chain(int index, const void* value, size_t size) {
  presented_chain_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zsearch.Certificate.presented_chain)
}
::std::string* Certificate::add_presented_chain() {
  // @@protoc_insertion_point(field_add_mutable:zsearch.Certificate.presented_chain)
  return presented_chain_.Add();
}
void Certificate::add_presented_chain(const ::std::string& value) {
  presented_chain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zsearch.Certificate.presented_chain)
}
void Certificate::add_presented_chain(const char* value) {
  presented_chain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zsearch.Certificate.presented_chain)
}
void Certificate::add_presented_chain(const void* value, size_t size) {
  presented_chain_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zsearch.Certificate.presented_chain)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Certificate::presented_chain() const {
  // @@protoc_insertion_point(field_list:zsearch.Certificate.presented_chain)
  return presented_chain_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Certificate::mutable_presented_chain() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.Certificate.presented_chain)
  return &presented_chain_;
}

// .zsearch.CertificateSource source = 28;
void Certificate::clear_source() {
  source_ = 0;
}
::zsearch::CertificateSource Certificate::source() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.source)
  return static_cast< ::zsearch::CertificateSource >(source_);
}
void Certificate::set_source(::zsearch::CertificateSource value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.source)
}

// bool seen_in_scan = 29;
void Certificate::clear_seen_in_scan() {
  seen_in_scan_ = false;
}
bool Certificate::seen_in_scan() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.seen_in_scan)
  return seen_in_scan_;
}
void Certificate::set_seen_in_scan(bool value) {
  
  seen_in_scan_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.seen_in_scan)
}

// bool post_processed = 26;
void Certificate::clear_post_processed() {
  post_processed_ = false;
}
bool Certificate::post_processed() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.post_processed)
  return post_processed_;
}
void Certificate::set_post_processed(bool value) {
  
  post_processed_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.post_processed)
}

// uint32 post_process_timestamp = 37;
void Certificate::clear_post_process_timestamp() {
  post_process_timestamp_ = 0u;
}
::google::protobuf::uint32 Certificate::post_process_timestamp() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.post_process_timestamp)
  return post_process_timestamp_;
}
void Certificate::set_post_process_timestamp(::google::protobuf::uint32 value) {
  
  post_process_timestamp_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.post_process_timestamp)
}

// .zsearch.CertificateValidation validation = 35;
bool Certificate::has_validation() const {
  return this != internal_default_instance() && validation_ != NULL;
}
void Certificate::clear_validation() {
  if (GetArenaNoVirtual() == NULL && validation_ != NULL) delete validation_;
  validation_ = NULL;
}
const ::zsearch::CertificateValidation& Certificate::validation() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.validation)
  return validation_ != NULL ? *validation_
                         : *::zsearch::CertificateValidation::internal_default_instance();
}
::zsearch::CertificateValidation* Certificate::mutable_validation() {
  
  if (validation_ == NULL) {
    validation_ = new ::zsearch::CertificateValidation;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.validation)
  return validation_;
}
::zsearch::CertificateValidation* Certificate::release_validation() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.validation)
  
  ::zsearch::CertificateValidation* temp = validation_;
  validation_ = NULL;
  return temp;
}
void Certificate::set_allocated_validation(::zsearch::CertificateValidation* validation) {
  delete validation_;
  validation_ = validation;
  if (validation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.validation)
}

// .zsearch.CTStatus ct = 30;
bool Certificate::has_ct() const {
  return this != internal_default_instance() && ct_ != NULL;
}
void Certificate::clear_ct() {
  if (GetArenaNoVirtual() == NULL && ct_ != NULL) delete ct_;
  ct_ = NULL;
}
const ::zsearch::CTStatus& Certificate::ct() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.ct)
  return ct_ != NULL ? *ct_
                         : *::zsearch::CTStatus::internal_default_instance();
}
::zsearch::CTStatus* Certificate::mutable_ct() {
  
  if (ct_ == NULL) {
    ct_ = new ::zsearch::CTStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.ct)
  return ct_;
}
::zsearch::CTStatus* Certificate::release_ct() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.ct)
  
  ::zsearch::CTStatus* temp = ct_;
  ct_ = NULL;
  return temp;
}
void Certificate::set_allocated_ct(::zsearch::CTStatus* ct) {
  delete ct_;
  ct_ = ct;
  if (ct) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.ct)
}

// .zsearch.ZLint zlint = 38;
bool Certificate::has_zlint() const {
  return this != internal_default_instance() && zlint_ != NULL;
}
void Certificate::clear_zlint() {
  if (GetArenaNoVirtual() == NULL && zlint_ != NULL) delete zlint_;
  zlint_ = NULL;
}
const ::zsearch::ZLint& Certificate::zlint() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.zlint)
  return zlint_ != NULL ? *zlint_
                         : *::zsearch::ZLint::internal_default_instance();
}
::zsearch::ZLint* Certificate::mutable_zlint() {
  
  if (zlint_ == NULL) {
    zlint_ = new ::zsearch::ZLint;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.zlint)
  return zlint_;
}
::zsearch::ZLint* Certificate::release_zlint() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.zlint)
  
  ::zsearch::ZLint* temp = zlint_;
  zlint_ = NULL;
  return temp;
}
void Certificate::set_allocated_zlint(::zsearch::ZLint* zlint) {
  delete zlint_;
  zlint_ = zlint;
  if (zlint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.zlint)
}

// .zsearch.CertificateRevocation revocation = 43;
bool Certificate::has_revocation() const {
  return this != internal_default_instance() && revocation_ != NULL;
}
void Certificate::clear_revocation() {
  if (GetArenaNoVirtual() == NULL && revocation_ != NULL) delete revocation_;
  revocation_ = NULL;
}
const ::zsearch::CertificateRevocation& Certificate::revocation() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.revocation)
  return revocation_ != NULL ? *revocation_
                         : *::zsearch::CertificateRevocation::internal_default_instance();
}
::zsearch::CertificateRevocation* Certificate::mutable_revocation() {
  
  if (revocation_ == NULL) {
    revocation_ = new ::zsearch::CertificateRevocation;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.revocation)
  return revocation_;
}
::zsearch::CertificateRevocation* Certificate::release_revocation() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.revocation)
  
  ::zsearch::CertificateRevocation* temp = revocation_;
  revocation_ = NULL;
  return temp;
}
void Certificate::set_allocated_revocation(::zsearch::CertificateRevocation* revocation) {
  delete revocation_;
  revocation_ = revocation;
  if (revocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.revocation)
}

// .zsearch.CertificateAudit audit = 46;
bool Certificate::has_audit() const {
  return this != internal_default_instance() && audit_ != NULL;
}
void Certificate::clear_audit() {
  if (GetArenaNoVirtual() == NULL && audit_ != NULL) delete audit_;
  audit_ = NULL;
}
const ::zsearch::CertificateAudit& Certificate::audit() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.audit)
  return audit_ != NULL ? *audit_
                         : *::zsearch::CertificateAudit::internal_default_instance();
}
::zsearch::CertificateAudit* Certificate::mutable_audit() {
  
  if (audit_ == NULL) {
    audit_ = new ::zsearch::CertificateAudit;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.audit)
  return audit_;
}
::zsearch::CertificateAudit* Certificate::release_audit() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.audit)
  
  ::zsearch::CertificateAudit* temp = audit_;
  audit_ = NULL;
  return temp;
}
void Certificate::set_allocated_audit(::zsearch::CertificateAudit* audit) {
  delete audit_;
  audit_ = audit;
  if (audit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.audit)
}

// bool is_precert = 32;
void Certificate::clear_is_precert() {
  is_precert_ = false;
}
bool Certificate::is_precert() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.is_precert)
  return is_precert_;
}
void Certificate::set_is_precert(bool value) {
  
  is_precert_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.is_precert)
}

// uint32 not_valid_after = 41;
void Certificate::clear_not_valid_after() {
  not_valid_after_ = 0u;
}
::google::protobuf::uint32 Certificate::not_valid_after() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.not_valid_after)
  return not_valid_after_;
}
void Certificate::set_not_valid_after(::google::protobuf::uint32 value) {
  
  not_valid_after_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.not_valid_after)
}

// uint32 not_valid_before = 42;
void Certificate::clear_not_valid_before() {
  not_valid_before_ = 0u;
}
::google::protobuf::uint32 Certificate::not_valid_before() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.not_valid_before)
  return not_valid_before_;
}
void Certificate::set_not_valid_before(::google::protobuf::uint32 value) {
  
  not_valid_before_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.not_valid_before)
}

// bool expired = 48;
void Certificate::clear_expired() {
  expired_ = false;
}
bool Certificate::expired() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.expired)
  return expired_;
}
void Certificate::set_expired(bool value) {
  
  expired_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.expired)
}

// bool in_nss = 6;
void Certificate::clear_in_nss() {
  in_nss_ = false;
}
bool Certificate::in_nss() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.in_nss)
  return in_nss_;
}
void Certificate::set_in_nss(bool value) {
  
  in_nss_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.in_nss)
}

// bool in_microsoft = 7 [deprecated = true];
void Certificate::clear_in_microsoft() {
  in_microsoft_ = false;
}
bool Certificate::in_microsoft() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.in_microsoft)
  return in_microsoft_;
}
void Certificate::set_in_microsoft(bool value) {
  
  in_microsoft_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.in_microsoft)
}

// bool in_apple = 8 [deprecated = true];
void Certificate::clear_in_apple() {
  in_apple_ = false;
}
bool Certificate::in_apple() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.in_apple)
  return in_apple_;
}
void Certificate::set_in_apple(bool value) {
  
  in_apple_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.in_apple)
}

// uint32 validation_timestamp = 10;
void Certificate::clear_validation_timestamp() {
  validation_timestamp_ = 0u;
}
::google::protobuf::uint32 Certificate::validation_timestamp() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.validation_timestamp)
  return validation_timestamp_;
}
void Certificate::set_validation_timestamp(::google::protobuf::uint32 value) {
  
  validation_timestamp_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.validation_timestamp)
}

// bool valid_nss = 11 [deprecated = true];
void Certificate::clear_valid_nss() {
  valid_nss_ = false;
}
bool Certificate::valid_nss() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.valid_nss)
  return valid_nss_;
}
void Certificate::set_valid_nss(bool value) {
  
  valid_nss_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.valid_nss)
}

// bool valid_microsoft = 12 [deprecated = true];
void Certificate::clear_valid_microsoft() {
  valid_microsoft_ = false;
}
bool Certificate::valid_microsoft() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.valid_microsoft)
  return valid_microsoft_;
}
void Certificate::set_valid_microsoft(bool value) {
  
  valid_microsoft_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.valid_microsoft)
}

// bool valid_apple = 13 [deprecated = true];
void Certificate::clear_valid_apple() {
  valid_apple_ = false;
}
bool Certificate::valid_apple() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.valid_apple)
  return valid_apple_;
}
void Certificate::set_valid_apple(bool value) {
  
  valid_apple_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.valid_apple)
}

// bool was_valid_nss = 14;
void Certificate::clear_was_valid_nss() {
  was_valid_nss_ = false;
}
bool Certificate::was_valid_nss() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.was_valid_nss)
  return was_valid_nss_;
}
void Certificate::set_was_valid_nss(bool value) {
  
  was_valid_nss_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.was_valid_nss)
}

// bool was_valid_microsoft = 15 [deprecated = true];
void Certificate::clear_was_valid_microsoft() {
  was_valid_microsoft_ = false;
}
bool Certificate::was_valid_microsoft() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.was_valid_microsoft)
  return was_valid_microsoft_;
}
void Certificate::set_was_valid_microsoft(bool value) {
  
  was_valid_microsoft_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.was_valid_microsoft)
}

// bool was_valid_apple = 16 [deprecated = true];
void Certificate::clear_was_valid_apple() {
  was_valid_apple_ = false;
}
bool Certificate::was_valid_apple() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.was_valid_apple)
  return was_valid_apple_;
}
void Certificate::set_was_valid_apple(bool value) {
  
  was_valid_apple_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.was_valid_apple)
}

// bool was_in_nss = 17 [deprecated = true];
void Certificate::clear_was_in_nss() {
  was_in_nss_ = false;
}
bool Certificate::was_in_nss() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.was_in_nss)
  return was_in_nss_;
}
void Certificate::set_was_in_nss(bool value) {
  
  was_in_nss_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.was_in_nss)
}

// bool was_in_microsoft = 18 [deprecated = true];
void Certificate::clear_was_in_microsoft() {
  was_in_microsoft_ = false;
}
bool Certificate::was_in_microsoft() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.was_in_microsoft)
  return was_in_microsoft_;
}
void Certificate::set_was_in_microsoft(bool value) {
  
  was_in_microsoft_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.was_in_microsoft)
}

// bool was_in_apple = 19 [deprecated = true];
void Certificate::clear_was_in_apple() {
  was_in_apple_ = false;
}
bool Certificate::was_in_apple() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.was_in_apple)
  return was_in_apple_;
}
void Certificate::set_was_in_apple(bool value) {
  
  was_in_apple_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.was_in_apple)
}

// bool current_valid_nss = 20;
void Certificate::clear_current_valid_nss() {
  current_valid_nss_ = false;
}
bool Certificate::current_valid_nss() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.current_valid_nss)
  return current_valid_nss_;
}
void Certificate::set_current_valid_nss(bool value) {
  
  current_valid_nss_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.current_valid_nss)
}

// bool current_valid_microsoft = 21 [deprecated = true];
void Certificate::clear_current_valid_microsoft() {
  current_valid_microsoft_ = false;
}
bool Certificate::current_valid_microsoft() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.current_valid_microsoft)
  return current_valid_microsoft_;
}
void Certificate::set_current_valid_microsoft(bool value) {
  
  current_valid_microsoft_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.current_valid_microsoft)
}

// bool current_valid_apple = 22 [deprecated = true];
void Certificate::clear_current_valid_apple() {
  current_valid_apple_ = false;
}
bool Certificate::current_valid_apple() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.current_valid_apple)
  return current_valid_apple_;
}
void Certificate::set_current_valid_apple(bool value) {
  
  current_valid_apple_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.current_valid_apple)
}

// bool current_in_nss = 23;
void Certificate::clear_current_in_nss() {
  current_in_nss_ = false;
}
bool Certificate::current_in_nss() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.current_in_nss)
  return current_in_nss_;
}
void Certificate::set_current_in_nss(bool value) {
  
  current_in_nss_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.current_in_nss)
}

// bool current_in_microsoft = 24 [deprecated = true];
void Certificate::clear_current_in_microsoft() {
  current_in_microsoft_ = false;
}
bool Certificate::current_in_microsoft() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.current_in_microsoft)
  return current_in_microsoft_;
}
void Certificate::set_current_in_microsoft(bool value) {
  
  current_in_microsoft_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.current_in_microsoft)
}

// bool current_in_apple = 25 [deprecated = true];
void Certificate::clear_current_in_apple() {
  current_in_apple_ = false;
}
bool Certificate::current_in_apple() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.current_in_apple)
  return current_in_apple_;
}
void Certificate::set_current_in_apple(bool value) {
  
  current_in_apple_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.current_in_apple)
}

// .zsearch.MozillaSalesForceStatus nss_audit = 31 [deprecated = true];
bool Certificate::has_nss_audit() const {
  return this != internal_default_instance() && nss_audit_ != NULL;
}
void Certificate::clear_nss_audit() {
  if (GetArenaNoVirtual() == NULL && nss_audit_ != NULL) delete nss_audit_;
  nss_audit_ = NULL;
}
const ::zsearch::MozillaSalesForceStatus& Certificate::nss_audit() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.nss_audit)
  return nss_audit_ != NULL ? *nss_audit_
                         : *::zsearch::MozillaSalesForceStatus::internal_default_instance();
}
::zsearch::MozillaSalesForceStatus* Certificate::mutable_nss_audit() {
  
  if (nss_audit_ == NULL) {
    nss_audit_ = new ::zsearch::MozillaSalesForceStatus;
  }
  // @@protoc_insertion_point(field_mutable:zsearch.Certificate.nss_audit)
  return nss_audit_;
}
::zsearch::MozillaSalesForceStatus* Certificate::release_nss_audit() {
  // @@protoc_insertion_point(field_release:zsearch.Certificate.nss_audit)
  
  ::zsearch::MozillaSalesForceStatus* temp = nss_audit_;
  nss_audit_ = NULL;
  return temp;
}
void Certificate::set_allocated_nss_audit(::zsearch::MozillaSalesForceStatus* nss_audit) {
  delete nss_audit_;
  nss_audit_ = nss_audit;
  if (nss_audit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:zsearch.Certificate.nss_audit)
}

// bool should_post_process = 27 [deprecated = true];
void Certificate::clear_should_post_process() {
  should_post_process_ = false;
}
bool Certificate::should_post_process() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.should_post_process)
  return should_post_process_;
}
void Certificate::set_should_post_process(bool value) {
  
  should_post_process_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.should_post_process)
}

// bool do_not_post_process = 36 [deprecated = true];
void Certificate::clear_do_not_post_process() {
  do_not_post_process_ = false;
}
bool Certificate::do_not_post_process() const {
  // @@protoc_insertion_point(field_get:zsearch.Certificate.do_not_post_process)
  return do_not_post_process_;
}
void Certificate::set_do_not_post_process(bool value) {
  
  do_not_post_process_ = value;
  // @@protoc_insertion_point(field_set:zsearch.Certificate.do_not_post_process)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace zsearch

// @@protoc_insertion_point(global_scope)
