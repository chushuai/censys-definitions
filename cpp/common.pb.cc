// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zsearch {
class MetadatumDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Metadatum> {
} _Metadatum_default_instance_;
class UserdataAtomDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserdataAtom> {
} _UserdataAtom_default_instance_;
class ASAtomDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ASAtom> {
} _ASAtom_default_instance_;

namespace protobuf_common_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatum, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadatum, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserdataAtom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserdataAtom, private_notes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserdataAtom, public_notes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserdataAtom, private_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserdataAtom, public_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserdataAtom, private_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserdataAtom, public_tags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASAtom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASAtom, asn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASAtom, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASAtom, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASAtom, rir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASAtom, bgp_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASAtom, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASAtom, country_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ASAtom, organization_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Metadatum)},
  { 6, -1, sizeof(UserdataAtom)},
  { 16, -1, sizeof(ASAtom)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Metadatum_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserdataAtom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ASAtom_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "common.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _Metadatum_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _UserdataAtom_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ASAtom_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Metadatum_default_instance_.DefaultConstruct();
  _UserdataAtom_default_instance_.DefaultConstruct();
  _ASAtom_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014common.proto\022\007zsearch\"\'\n\tMetadatum\022\013\n\003"
      "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\301\001\n\014UserdataAto"
      "m\022\025\n\rprivate_notes\030\001 \001(\t\022\024\n\014public_notes"
      "\030\002 \001(\t\022,\n\020private_metadata\030\003 \003(\0132\022.zsear"
      "ch.Metadatum\022+\n\017public_metadata\030\004 \003(\0132\022."
      "zsearch.Metadatum\022\024\n\014private_tags\030\005 \003(\t\022"
      "\023\n\013public_tags\030\006 \003(\t\"\263\001\n\006ASAtom\022\013\n\003asn\030\001"
      " \001(\r\022\023\n\013description\030\002 \001(\t\022\020\n\004path\030\003 \003(\rB"
      "\002\020\001\022\'\n\003rir\030\004 \001(\0162\032.zsearch.RegionalRegis"
      "trar\022\022\n\nbgp_prefix\030\005 \001(\t\022\014\n\004name\030\006 \001(\t\022\024"
      "\n\014country_code\030\007 \001(\t\022\024\n\014organization\030\010 \001"
      "(\t*L\n\tDeltaType\022\017\n\013DT_RESERVED\020\000\022\r\n\tDT_U"
      "PDATE\020\001\022\r\n\tDT_DELETE\020\002\022\020\n\014DT_NO_CHANGE\020\003"
      "*\202\001\n\021RegionalRegistrar\022\020\n\014RIR_RESERVED\020\000"
      "\022\014\n\010RIR_ARIN\020\001\022\014\n\010RIR_RIPE\020\002\022\r\n\tRIR_APNI"
      "C\020\003\022\017\n\013RIR_AFRINIC\020\004\022\016\n\nRIR_LACNIC\020\005\022\017\n\013"
      "RIR_UNKNOWN\020\006b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 661);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_common_2eproto

const ::google::protobuf::EnumDescriptor* DeltaType_descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_enum_descriptors[0];
}
bool DeltaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RegionalRegistrar_descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_enum_descriptors[1];
}
bool RegionalRegistrar_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metadatum::kKeyFieldNumber;
const int Metadatum::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metadatum::Metadatum()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.Metadatum)
}
Metadatum::Metadatum(const Metadatum& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:zsearch.Metadatum)
}

void Metadatum::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Metadatum::~Metadatum() {
  // @@protoc_insertion_point(destructor:zsearch.Metadatum)
  SharedDtor();
}

void Metadatum::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Metadatum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadatum::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[0].descriptor;
}

const Metadatum& Metadatum::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

Metadatum* Metadatum::New(::google::protobuf::Arena* arena) const {
  Metadatum* n = new Metadatum;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Metadatum::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.Metadatum)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Metadatum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.Metadatum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.Metadatum.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.Metadatum.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.Metadatum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.Metadatum)
  return false;
#undef DO_
}

void Metadatum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.Metadatum)
  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.Metadatum.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.Metadatum.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.Metadatum)
}

::google::protobuf::uint8* Metadatum::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.Metadatum)
  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.Metadatum.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.Metadatum.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.Metadatum)
  return target;
}

size_t Metadatum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.Metadatum)
  size_t total_size = 0;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadatum::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.Metadatum)
  GOOGLE_DCHECK_NE(&from, this);
  const Metadatum* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Metadatum>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.Metadatum)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.Metadatum)
    MergeFrom(*source);
  }
}

void Metadatum::MergeFrom(const Metadatum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.Metadatum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void Metadatum::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.Metadatum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadatum::CopyFrom(const Metadatum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.Metadatum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadatum::IsInitialized() const {
  return true;
}

void Metadatum::Swap(Metadatum* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metadatum::InternalSwap(Metadatum* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Metadatum::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Metadatum

// string key = 1;
void Metadatum::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Metadatum::key() const {
  // @@protoc_insertion_point(field_get:zsearch.Metadatum.key)
  return key_.GetNoArena();
}
void Metadatum::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.Metadatum.key)
}
#if LANG_CXX11
void Metadatum::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.Metadatum.key)
}
#endif
void Metadatum::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.Metadatum.key)
}
void Metadatum::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.Metadatum.key)
}
::std::string* Metadatum::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.Metadatum.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Metadatum::release_key() {
  // @@protoc_insertion_point(field_release:zsearch.Metadatum.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metadatum::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:zsearch.Metadatum.key)
}

// string value = 2;
void Metadatum::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Metadatum::value() const {
  // @@protoc_insertion_point(field_get:zsearch.Metadatum.value)
  return value_.GetNoArena();
}
void Metadatum::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.Metadatum.value)
}
#if LANG_CXX11
void Metadatum::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.Metadatum.value)
}
#endif
void Metadatum::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.Metadatum.value)
}
void Metadatum::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.Metadatum.value)
}
::std::string* Metadatum::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.Metadatum.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Metadatum::release_value() {
  // @@protoc_insertion_point(field_release:zsearch.Metadatum.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metadatum::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:zsearch.Metadatum.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserdataAtom::kPrivateNotesFieldNumber;
const int UserdataAtom::kPublicNotesFieldNumber;
const int UserdataAtom::kPrivateMetadataFieldNumber;
const int UserdataAtom::kPublicMetadataFieldNumber;
const int UserdataAtom::kPrivateTagsFieldNumber;
const int UserdataAtom::kPublicTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserdataAtom::UserdataAtom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.UserdataAtom)
}
UserdataAtom::UserdataAtom(const UserdataAtom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      private_metadata_(from.private_metadata_),
      public_metadata_(from.public_metadata_),
      private_tags_(from.private_tags_),
      public_tags_(from.public_tags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_notes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.private_notes().size() > 0) {
    private_notes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_notes_);
  }
  public_notes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.public_notes().size() > 0) {
    public_notes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_notes_);
  }
  // @@protoc_insertion_point(copy_constructor:zsearch.UserdataAtom)
}

void UserdataAtom::SharedCtor() {
  private_notes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_notes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UserdataAtom::~UserdataAtom() {
  // @@protoc_insertion_point(destructor:zsearch.UserdataAtom)
  SharedDtor();
}

void UserdataAtom::SharedDtor() {
  private_notes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_notes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserdataAtom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserdataAtom::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[1].descriptor;
}

const UserdataAtom& UserdataAtom::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserdataAtom* UserdataAtom::New(::google::protobuf::Arena* arena) const {
  UserdataAtom* n = new UserdataAtom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserdataAtom::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.UserdataAtom)
  private_metadata_.Clear();
  public_metadata_.Clear();
  private_tags_.Clear();
  public_tags_.Clear();
  private_notes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_notes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserdataAtom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.UserdataAtom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string private_notes = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_notes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->private_notes().data(), this->private_notes().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.UserdataAtom.private_notes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string public_notes = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_notes()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->public_notes().data(), this->public_notes().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.UserdataAtom.public_notes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zsearch.Metadatum private_metadata = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_private_metadata()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .zsearch.Metadatum public_metadata = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_public_metadata()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated string private_tags = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_private_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->private_tags(this->private_tags_size() - 1).data(),
            this->private_tags(this->private_tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.UserdataAtom.private_tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string public_tags = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_public_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->public_tags(this->public_tags_size() - 1).data(),
            this->public_tags(this->public_tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.UserdataAtom.public_tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.UserdataAtom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.UserdataAtom)
  return false;
#undef DO_
}

void UserdataAtom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.UserdataAtom)
  // string private_notes = 1;
  if (this->private_notes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->private_notes().data(), this->private_notes().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.UserdataAtom.private_notes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_notes(), output);
  }

  // string public_notes = 2;
  if (this->public_notes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_notes().data(), this->public_notes().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.UserdataAtom.public_notes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->public_notes(), output);
  }

  // repeated .zsearch.Metadatum private_metadata = 3;
  for (unsigned int i = 0, n = this->private_metadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->private_metadata(i), output);
  }

  // repeated .zsearch.Metadatum public_metadata = 4;
  for (unsigned int i = 0, n = this->public_metadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->public_metadata(i), output);
  }

  // repeated string private_tags = 5;
  for (int i = 0; i < this->private_tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->private_tags(i).data(), this->private_tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.UserdataAtom.private_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->private_tags(i), output);
  }

  // repeated string public_tags = 6;
  for (int i = 0; i < this->public_tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_tags(i).data(), this->public_tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.UserdataAtom.public_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->public_tags(i), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.UserdataAtom)
}

::google::protobuf::uint8* UserdataAtom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.UserdataAtom)
  // string private_notes = 1;
  if (this->private_notes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->private_notes().data(), this->private_notes().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.UserdataAtom.private_notes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_notes(), target);
  }

  // string public_notes = 2;
  if (this->public_notes().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_notes().data(), this->public_notes().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.UserdataAtom.public_notes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->public_notes(), target);
  }

  // repeated .zsearch.Metadatum private_metadata = 3;
  for (unsigned int i = 0, n = this->private_metadata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->private_metadata(i), false, target);
  }

  // repeated .zsearch.Metadatum public_metadata = 4;
  for (unsigned int i = 0, n = this->public_metadata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->public_metadata(i), false, target);
  }

  // repeated string private_tags = 5;
  for (int i = 0; i < this->private_tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->private_tags(i).data(), this->private_tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.UserdataAtom.private_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->private_tags(i), target);
  }

  // repeated string public_tags = 6;
  for (int i = 0; i < this->public_tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->public_tags(i).data(), this->public_tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.UserdataAtom.public_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->public_tags(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.UserdataAtom)
  return target;
}

size_t UserdataAtom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.UserdataAtom)
  size_t total_size = 0;

  // repeated .zsearch.Metadatum private_metadata = 3;
  {
    unsigned int count = this->private_metadata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->private_metadata(i));
    }
  }

  // repeated .zsearch.Metadatum public_metadata = 4;
  {
    unsigned int count = this->public_metadata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->public_metadata(i));
    }
  }

  // repeated string private_tags = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->private_tags_size());
  for (int i = 0; i < this->private_tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->private_tags(i));
  }

  // repeated string public_tags = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->public_tags_size());
  for (int i = 0; i < this->public_tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->public_tags(i));
  }

  // string private_notes = 1;
  if (this->private_notes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->private_notes());
  }

  // string public_notes = 2;
  if (this->public_notes().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->public_notes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserdataAtom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.UserdataAtom)
  GOOGLE_DCHECK_NE(&from, this);
  const UserdataAtom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserdataAtom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.UserdataAtom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.UserdataAtom)
    MergeFrom(*source);
  }
}

void UserdataAtom::MergeFrom(const UserdataAtom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.UserdataAtom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_metadata_.MergeFrom(from.private_metadata_);
  public_metadata_.MergeFrom(from.public_metadata_);
  private_tags_.MergeFrom(from.private_tags_);
  public_tags_.MergeFrom(from.public_tags_);
  if (from.private_notes().size() > 0) {

    private_notes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_notes_);
  }
  if (from.public_notes().size() > 0) {

    public_notes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_notes_);
  }
}

void UserdataAtom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.UserdataAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserdataAtom::CopyFrom(const UserdataAtom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.UserdataAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserdataAtom::IsInitialized() const {
  return true;
}

void UserdataAtom::Swap(UserdataAtom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserdataAtom::InternalSwap(UserdataAtom* other) {
  private_metadata_.UnsafeArenaSwap(&other->private_metadata_);
  public_metadata_.UnsafeArenaSwap(&other->public_metadata_);
  private_tags_.UnsafeArenaSwap(&other->private_tags_);
  public_tags_.UnsafeArenaSwap(&other->public_tags_);
  private_notes_.Swap(&other->private_notes_);
  public_notes_.Swap(&other->public_notes_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserdataAtom::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserdataAtom

// string private_notes = 1;
void UserdataAtom::clear_private_notes() {
  private_notes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserdataAtom::private_notes() const {
  // @@protoc_insertion_point(field_get:zsearch.UserdataAtom.private_notes)
  return private_notes_.GetNoArena();
}
void UserdataAtom::set_private_notes(const ::std::string& value) {
  
  private_notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.UserdataAtom.private_notes)
}
#if LANG_CXX11
void UserdataAtom::set_private_notes(::std::string&& value) {
  
  private_notes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.UserdataAtom.private_notes)
}
#endif
void UserdataAtom::set_private_notes(const char* value) {
  
  private_notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.UserdataAtom.private_notes)
}
void UserdataAtom::set_private_notes(const char* value, size_t size) {
  
  private_notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.UserdataAtom.private_notes)
}
::std::string* UserdataAtom::mutable_private_notes() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.UserdataAtom.private_notes)
  return private_notes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserdataAtom::release_private_notes() {
  // @@protoc_insertion_point(field_release:zsearch.UserdataAtom.private_notes)
  
  return private_notes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserdataAtom::set_allocated_private_notes(::std::string* private_notes) {
  if (private_notes != NULL) {
    
  } else {
    
  }
  private_notes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_notes);
  // @@protoc_insertion_point(field_set_allocated:zsearch.UserdataAtom.private_notes)
}

// string public_notes = 2;
void UserdataAtom::clear_public_notes() {
  public_notes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserdataAtom::public_notes() const {
  // @@protoc_insertion_point(field_get:zsearch.UserdataAtom.public_notes)
  return public_notes_.GetNoArena();
}
void UserdataAtom::set_public_notes(const ::std::string& value) {
  
  public_notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.UserdataAtom.public_notes)
}
#if LANG_CXX11
void UserdataAtom::set_public_notes(::std::string&& value) {
  
  public_notes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.UserdataAtom.public_notes)
}
#endif
void UserdataAtom::set_public_notes(const char* value) {
  
  public_notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.UserdataAtom.public_notes)
}
void UserdataAtom::set_public_notes(const char* value, size_t size) {
  
  public_notes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.UserdataAtom.public_notes)
}
::std::string* UserdataAtom::mutable_public_notes() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.UserdataAtom.public_notes)
  return public_notes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserdataAtom::release_public_notes() {
  // @@protoc_insertion_point(field_release:zsearch.UserdataAtom.public_notes)
  
  return public_notes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserdataAtom::set_allocated_public_notes(::std::string* public_notes) {
  if (public_notes != NULL) {
    
  } else {
    
  }
  public_notes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_notes);
  // @@protoc_insertion_point(field_set_allocated:zsearch.UserdataAtom.public_notes)
}

// repeated .zsearch.Metadatum private_metadata = 3;
int UserdataAtom::private_metadata_size() const {
  return private_metadata_.size();
}
void UserdataAtom::clear_private_metadata() {
  private_metadata_.Clear();
}
const ::zsearch::Metadatum& UserdataAtom::private_metadata(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.UserdataAtom.private_metadata)
  return private_metadata_.Get(index);
}
::zsearch::Metadatum* UserdataAtom::mutable_private_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.UserdataAtom.private_metadata)
  return private_metadata_.Mutable(index);
}
::zsearch::Metadatum* UserdataAtom::add_private_metadata() {
  // @@protoc_insertion_point(field_add:zsearch.UserdataAtom.private_metadata)
  return private_metadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::zsearch::Metadatum >*
UserdataAtom::mutable_private_metadata() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.UserdataAtom.private_metadata)
  return &private_metadata_;
}
const ::google::protobuf::RepeatedPtrField< ::zsearch::Metadatum >&
UserdataAtom::private_metadata() const {
  // @@protoc_insertion_point(field_list:zsearch.UserdataAtom.private_metadata)
  return private_metadata_;
}

// repeated .zsearch.Metadatum public_metadata = 4;
int UserdataAtom::public_metadata_size() const {
  return public_metadata_.size();
}
void UserdataAtom::clear_public_metadata() {
  public_metadata_.Clear();
}
const ::zsearch::Metadatum& UserdataAtom::public_metadata(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.UserdataAtom.public_metadata)
  return public_metadata_.Get(index);
}
::zsearch::Metadatum* UserdataAtom::mutable_public_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.UserdataAtom.public_metadata)
  return public_metadata_.Mutable(index);
}
::zsearch::Metadatum* UserdataAtom::add_public_metadata() {
  // @@protoc_insertion_point(field_add:zsearch.UserdataAtom.public_metadata)
  return public_metadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::zsearch::Metadatum >*
UserdataAtom::mutable_public_metadata() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.UserdataAtom.public_metadata)
  return &public_metadata_;
}
const ::google::protobuf::RepeatedPtrField< ::zsearch::Metadatum >&
UserdataAtom::public_metadata() const {
  // @@protoc_insertion_point(field_list:zsearch.UserdataAtom.public_metadata)
  return public_metadata_;
}

// repeated string private_tags = 5;
int UserdataAtom::private_tags_size() const {
  return private_tags_.size();
}
void UserdataAtom::clear_private_tags() {
  private_tags_.Clear();
}
const ::std::string& UserdataAtom::private_tags(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.UserdataAtom.private_tags)
  return private_tags_.Get(index);
}
::std::string* UserdataAtom::mutable_private_tags(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.UserdataAtom.private_tags)
  return private_tags_.Mutable(index);
}
void UserdataAtom::set_private_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zsearch.UserdataAtom.private_tags)
  private_tags_.Mutable(index)->assign(value);
}
void UserdataAtom::set_private_tags(int index, const char* value) {
  private_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zsearch.UserdataAtom.private_tags)
}
void UserdataAtom::set_private_tags(int index, const char* value, size_t size) {
  private_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zsearch.UserdataAtom.private_tags)
}
::std::string* UserdataAtom::add_private_tags() {
  // @@protoc_insertion_point(field_add_mutable:zsearch.UserdataAtom.private_tags)
  return private_tags_.Add();
}
void UserdataAtom::add_private_tags(const ::std::string& value) {
  private_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zsearch.UserdataAtom.private_tags)
}
void UserdataAtom::add_private_tags(const char* value) {
  private_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zsearch.UserdataAtom.private_tags)
}
void UserdataAtom::add_private_tags(const char* value, size_t size) {
  private_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zsearch.UserdataAtom.private_tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserdataAtom::private_tags() const {
  // @@protoc_insertion_point(field_list:zsearch.UserdataAtom.private_tags)
  return private_tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
UserdataAtom::mutable_private_tags() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.UserdataAtom.private_tags)
  return &private_tags_;
}

// repeated string public_tags = 6;
int UserdataAtom::public_tags_size() const {
  return public_tags_.size();
}
void UserdataAtom::clear_public_tags() {
  public_tags_.Clear();
}
const ::std::string& UserdataAtom::public_tags(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.UserdataAtom.public_tags)
  return public_tags_.Get(index);
}
::std::string* UserdataAtom::mutable_public_tags(int index) {
  // @@protoc_insertion_point(field_mutable:zsearch.UserdataAtom.public_tags)
  return public_tags_.Mutable(index);
}
void UserdataAtom::set_public_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:zsearch.UserdataAtom.public_tags)
  public_tags_.Mutable(index)->assign(value);
}
void UserdataAtom::set_public_tags(int index, const char* value) {
  public_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:zsearch.UserdataAtom.public_tags)
}
void UserdataAtom::set_public_tags(int index, const char* value, size_t size) {
  public_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:zsearch.UserdataAtom.public_tags)
}
::std::string* UserdataAtom::add_public_tags() {
  // @@protoc_insertion_point(field_add_mutable:zsearch.UserdataAtom.public_tags)
  return public_tags_.Add();
}
void UserdataAtom::add_public_tags(const ::std::string& value) {
  public_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:zsearch.UserdataAtom.public_tags)
}
void UserdataAtom::add_public_tags(const char* value) {
  public_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:zsearch.UserdataAtom.public_tags)
}
void UserdataAtom::add_public_tags(const char* value, size_t size) {
  public_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:zsearch.UserdataAtom.public_tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
UserdataAtom::public_tags() const {
  // @@protoc_insertion_point(field_list:zsearch.UserdataAtom.public_tags)
  return public_tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
UserdataAtom::mutable_public_tags() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.UserdataAtom.public_tags)
  return &public_tags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ASAtom::kAsnFieldNumber;
const int ASAtom::kDescriptionFieldNumber;
const int ASAtom::kPathFieldNumber;
const int ASAtom::kRirFieldNumber;
const int ASAtom::kBgpPrefixFieldNumber;
const int ASAtom::kNameFieldNumber;
const int ASAtom::kCountryCodeFieldNumber;
const int ASAtom::kOrganizationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ASAtom::ASAtom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:zsearch.ASAtom)
}
ASAtom::ASAtom(const ASAtom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      path_(from.path_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  bgp_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bgp_prefix().size() > 0) {
    bgp_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bgp_prefix_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.country_code().size() > 0) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  organization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.organization().size() > 0) {
    organization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.organization_);
  }
  ::memcpy(&asn_, &from.asn_,
    reinterpret_cast<char*>(&rir_) -
    reinterpret_cast<char*>(&asn_) + sizeof(rir_));
  // @@protoc_insertion_point(copy_constructor:zsearch.ASAtom)
}

void ASAtom::SharedCtor() {
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bgp_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&asn_, 0, reinterpret_cast<char*>(&rir_) -
    reinterpret_cast<char*>(&asn_) + sizeof(rir_));
  _cached_size_ = 0;
}

ASAtom::~ASAtom() {
  // @@protoc_insertion_point(destructor:zsearch.ASAtom)
  SharedDtor();
}

void ASAtom::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bgp_prefix_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organization_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ASAtom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ASAtom::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[2].descriptor;
}

const ASAtom& ASAtom::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

ASAtom* ASAtom::New(::google::protobuf::Arena* arena) const {
  ASAtom* n = new ASAtom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ASAtom::Clear() {
// @@protoc_insertion_point(message_clear_start:zsearch.ASAtom)
  path_.Clear();
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bgp_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&asn_, 0, reinterpret_cast<char*>(&rir_) -
    reinterpret_cast<char*>(&asn_) + sizeof(rir_));
}

bool ASAtom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zsearch.ASAtom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 asn = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.ASAtom.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 path = 3 [packed = true];
      case 3: {
        if (tag == 26u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_path())));
        } else if (tag == 24u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_path())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .zsearch.RegionalRegistrar rir = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rir(static_cast< ::zsearch::RegionalRegistrar >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bgp_prefix = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bgp_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bgp_prefix().data(), this->bgp_prefix().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.ASAtom.bgp_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.ASAtom.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string country_code = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.ASAtom.country_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string organization = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_organization()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->organization().data(), this->organization().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "zsearch.ASAtom.organization"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zsearch.ASAtom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zsearch.ASAtom)
  return false;
#undef DO_
}

void ASAtom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zsearch.ASAtom)
  // uint32 asn = 1;
  if (this->asn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->asn(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.ASAtom.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // repeated uint32 path = 3 [packed = true];
  if (this->path_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_path_cached_byte_size_);
  }
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->path(i), output);
  }

  // .zsearch.RegionalRegistrar rir = 4;
  if (this->rir() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->rir(), output);
  }

  // string bgp_prefix = 5;
  if (this->bgp_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bgp_prefix().data(), this->bgp_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.ASAtom.bgp_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bgp_prefix(), output);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.ASAtom.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // string country_code = 7;
  if (this->country_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.ASAtom.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->country_code(), output);
  }

  // string organization = 8;
  if (this->organization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->organization().data(), this->organization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.ASAtom.organization");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->organization(), output);
  }

  // @@protoc_insertion_point(serialize_end:zsearch.ASAtom)
}

::google::protobuf::uint8* ASAtom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:zsearch.ASAtom)
  // uint32 asn = 1;
  if (this->asn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->asn(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.ASAtom.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // repeated uint32 path = 3 [packed = true];
  if (this->path_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _path_cached_byte_size_, target);
  }
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->path(i), target);
  }

  // .zsearch.RegionalRegistrar rir = 4;
  if (this->rir() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->rir(), target);
  }

  // string bgp_prefix = 5;
  if (this->bgp_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bgp_prefix().data(), this->bgp_prefix().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.ASAtom.bgp_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bgp_prefix(), target);
  }

  // string name = 6;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.ASAtom.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // string country_code = 7;
  if (this->country_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.ASAtom.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->country_code(), target);
  }

  // string organization = 8;
  if (this->organization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->organization().data(), this->organization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "zsearch.ASAtom.organization");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->organization(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:zsearch.ASAtom)
  return target;
}

size_t ASAtom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zsearch.ASAtom)
  size_t total_size = 0;

  // repeated uint32 path = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->path_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _path_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string bgp_prefix = 5;
  if (this->bgp_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bgp_prefix());
  }

  // string name = 6;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string country_code = 7;
  if (this->country_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->country_code());
  }

  // string organization = 8;
  if (this->organization().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->organization());
  }

  // uint32 asn = 1;
  if (this->asn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->asn());
  }

  // .zsearch.RegionalRegistrar rir = 4;
  if (this->rir() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->rir());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ASAtom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zsearch.ASAtom)
  GOOGLE_DCHECK_NE(&from, this);
  const ASAtom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ASAtom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zsearch.ASAtom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zsearch.ASAtom)
    MergeFrom(*source);
  }
}

void ASAtom::MergeFrom(const ASAtom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zsearch.ASAtom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.MergeFrom(from.path_);
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.bgp_prefix().size() > 0) {

    bgp_prefix_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bgp_prefix_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.country_code().size() > 0) {

    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  if (from.organization().size() > 0) {

    organization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.organization_);
  }
  if (from.asn() != 0) {
    set_asn(from.asn());
  }
  if (from.rir() != 0) {
    set_rir(from.rir());
  }
}

void ASAtom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zsearch.ASAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASAtom::CopyFrom(const ASAtom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zsearch.ASAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASAtom::IsInitialized() const {
  return true;
}

void ASAtom::Swap(ASAtom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ASAtom::InternalSwap(ASAtom* other) {
  path_.UnsafeArenaSwap(&other->path_);
  description_.Swap(&other->description_);
  bgp_prefix_.Swap(&other->bgp_prefix_);
  name_.Swap(&other->name_);
  country_code_.Swap(&other->country_code_);
  organization_.Swap(&other->organization_);
  std::swap(asn_, other->asn_);
  std::swap(rir_, other->rir_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ASAtom::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ASAtom

// uint32 asn = 1;
void ASAtom::clear_asn() {
  asn_ = 0u;
}
::google::protobuf::uint32 ASAtom::asn() const {
  // @@protoc_insertion_point(field_get:zsearch.ASAtom.asn)
  return asn_;
}
void ASAtom::set_asn(::google::protobuf::uint32 value) {
  
  asn_ = value;
  // @@protoc_insertion_point(field_set:zsearch.ASAtom.asn)
}

// string description = 2;
void ASAtom::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ASAtom::description() const {
  // @@protoc_insertion_point(field_get:zsearch.ASAtom.description)
  return description_.GetNoArena();
}
void ASAtom::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.ASAtom.description)
}
#if LANG_CXX11
void ASAtom::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.ASAtom.description)
}
#endif
void ASAtom::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.ASAtom.description)
}
void ASAtom::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.ASAtom.description)
}
::std::string* ASAtom::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.ASAtom.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ASAtom::release_description() {
  // @@protoc_insertion_point(field_release:zsearch.ASAtom.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ASAtom::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:zsearch.ASAtom.description)
}

// repeated uint32 path = 3 [packed = true];
int ASAtom::path_size() const {
  return path_.size();
}
void ASAtom::clear_path() {
  path_.Clear();
}
::google::protobuf::uint32 ASAtom::path(int index) const {
  // @@protoc_insertion_point(field_get:zsearch.ASAtom.path)
  return path_.Get(index);
}
void ASAtom::set_path(int index, ::google::protobuf::uint32 value) {
  path_.Set(index, value);
  // @@protoc_insertion_point(field_set:zsearch.ASAtom.path)
}
void ASAtom::add_path(::google::protobuf::uint32 value) {
  path_.Add(value);
  // @@protoc_insertion_point(field_add:zsearch.ASAtom.path)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ASAtom::path() const {
  // @@protoc_insertion_point(field_list:zsearch.ASAtom.path)
  return path_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ASAtom::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:zsearch.ASAtom.path)
  return &path_;
}

// .zsearch.RegionalRegistrar rir = 4;
void ASAtom::clear_rir() {
  rir_ = 0;
}
::zsearch::RegionalRegistrar ASAtom::rir() const {
  // @@protoc_insertion_point(field_get:zsearch.ASAtom.rir)
  return static_cast< ::zsearch::RegionalRegistrar >(rir_);
}
void ASAtom::set_rir(::zsearch::RegionalRegistrar value) {
  
  rir_ = value;
  // @@protoc_insertion_point(field_set:zsearch.ASAtom.rir)
}

// string bgp_prefix = 5;
void ASAtom::clear_bgp_prefix() {
  bgp_prefix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ASAtom::bgp_prefix() const {
  // @@protoc_insertion_point(field_get:zsearch.ASAtom.bgp_prefix)
  return bgp_prefix_.GetNoArena();
}
void ASAtom::set_bgp_prefix(const ::std::string& value) {
  
  bgp_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.ASAtom.bgp_prefix)
}
#if LANG_CXX11
void ASAtom::set_bgp_prefix(::std::string&& value) {
  
  bgp_prefix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.ASAtom.bgp_prefix)
}
#endif
void ASAtom::set_bgp_prefix(const char* value) {
  
  bgp_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.ASAtom.bgp_prefix)
}
void ASAtom::set_bgp_prefix(const char* value, size_t size) {
  
  bgp_prefix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.ASAtom.bgp_prefix)
}
::std::string* ASAtom::mutable_bgp_prefix() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.ASAtom.bgp_prefix)
  return bgp_prefix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ASAtom::release_bgp_prefix() {
  // @@protoc_insertion_point(field_release:zsearch.ASAtom.bgp_prefix)
  
  return bgp_prefix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ASAtom::set_allocated_bgp_prefix(::std::string* bgp_prefix) {
  if (bgp_prefix != NULL) {
    
  } else {
    
  }
  bgp_prefix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bgp_prefix);
  // @@protoc_insertion_point(field_set_allocated:zsearch.ASAtom.bgp_prefix)
}

// string name = 6;
void ASAtom::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ASAtom::name() const {
  // @@protoc_insertion_point(field_get:zsearch.ASAtom.name)
  return name_.GetNoArena();
}
void ASAtom::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.ASAtom.name)
}
#if LANG_CXX11
void ASAtom::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.ASAtom.name)
}
#endif
void ASAtom::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.ASAtom.name)
}
void ASAtom::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.ASAtom.name)
}
::std::string* ASAtom::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.ASAtom.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ASAtom::release_name() {
  // @@protoc_insertion_point(field_release:zsearch.ASAtom.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ASAtom::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:zsearch.ASAtom.name)
}

// string country_code = 7;
void ASAtom::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ASAtom::country_code() const {
  // @@protoc_insertion_point(field_get:zsearch.ASAtom.country_code)
  return country_code_.GetNoArena();
}
void ASAtom::set_country_code(const ::std::string& value) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.ASAtom.country_code)
}
#if LANG_CXX11
void ASAtom::set_country_code(::std::string&& value) {
  
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.ASAtom.country_code)
}
#endif
void ASAtom::set_country_code(const char* value) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.ASAtom.country_code)
}
void ASAtom::set_country_code(const char* value, size_t size) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.ASAtom.country_code)
}
::std::string* ASAtom::mutable_country_code() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.ASAtom.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ASAtom::release_country_code() {
  // @@protoc_insertion_point(field_release:zsearch.ASAtom.country_code)
  
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ASAtom::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    
  } else {
    
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:zsearch.ASAtom.country_code)
}

// string organization = 8;
void ASAtom::clear_organization() {
  organization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ASAtom::organization() const {
  // @@protoc_insertion_point(field_get:zsearch.ASAtom.organization)
  return organization_.GetNoArena();
}
void ASAtom::set_organization(const ::std::string& value) {
  
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zsearch.ASAtom.organization)
}
#if LANG_CXX11
void ASAtom::set_organization(::std::string&& value) {
  
  organization_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:zsearch.ASAtom.organization)
}
#endif
void ASAtom::set_organization(const char* value) {
  
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zsearch.ASAtom.organization)
}
void ASAtom::set_organization(const char* value, size_t size) {
  
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zsearch.ASAtom.organization)
}
::std::string* ASAtom::mutable_organization() {
  
  // @@protoc_insertion_point(field_mutable:zsearch.ASAtom.organization)
  return organization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ASAtom::release_organization() {
  // @@protoc_insertion_point(field_release:zsearch.ASAtom.organization)
  
  return organization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ASAtom::set_allocated_organization(::std::string* organization) {
  if (organization != NULL) {
    
  } else {
    
  }
  organization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organization);
  // @@protoc_insertion_point(field_set_allocated:zsearch.ASAtom.organization)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace zsearch

// @@protoc_insertion_point(global_scope)
