// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "search.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zsearch {

namespace protobuf_search_2eproto {


namespace {


}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = { ~0u };
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;
namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "search.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      NULL, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void TableStruct::Shutdown() {
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::zsearch::protobuf_anonstore_2eproto::InitDefaults();
  ::zsearch::protobuf_hoststore_2eproto::InitDefaults();
  ::zsearch::protobuf_rpc_2eproto::InitDefaults();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014search.proto\022\007zsearch\032\017anonstore.proto"
      "\032\017hoststore.proto\032\trpc.proto2\200\t\n\014AdminSe"
      "rvice\0225\n\010Shutdown\022\020.zsearch.Command\032\025.zs"
      "earch.CommandReply\"\000\0223\n\006Status\022\020.zsearch"
      ".Command\032\025.zsearch.CommandReply\"\000\0227\n\nSta"
      "tistics\022\020.zsearch.Command\032\025.zsearch.Comm"
      "andReply\"\000\0226\n\tPruneIPv4\022\020.zsearch.Comman"
      "d\032\025.zsearch.CommandReply\"\000\0228\n\013PruneDomai"
      "n\022\020.zsearch.Command\032\025.zsearch.CommandRep"
      "ly\"\000\0229\n\014UpdateASData\022\020.zsearch.Command\032\025"
      ".zsearch.CommandReply\"\000\022\?\n\022UpdateLocatio"
      "nData\022\020.zsearch.Command\032\025.zsearch.Comman"
      "dReply\"\000\022A\n\024ValidateCertificates\022\020.zsear"
      "ch.Command\032\025.zsearch.CommandReply\"\000\022A\n\024F"
      "ixCertificateSource\022\020.zsearch.Command\032\025."
      "zsearch.CommandReply\"\000\022;\n\016DumpIPv4ToJSON"
      "\022\020.zsearch.Command\032\025.zsearch.CommandRepl"
      "y\"\000\022=\n\020DumpDomainToJSON\022\020.zsearch.Comman"
      "d\032\025.zsearch.CommandReply\"\000\022C\n\026DumpCertif"
      "icatesToJSON\022\020.zsearch.Command\032\025.zsearch"
      ".CommandReply\"\000\022;\n\016DumpKeysToJSON\022\020.zsea"
      "rch.Command\032\025.zsearch.CommandReply\"\000\022A\n\024"
      "RegenerateIPv4Deltas\022\020.zsearch.Command\032\025"
      ".zsearch.CommandReply\"\000\022C\n\026RegenerateDom"
      "ainDeltas\022\020.zsearch.Command\032\025.zsearch.Co"
      "mmandReply\"\000\022H\n\033RegenerateCertificateDel"
      "tas\022\020.zsearch.Command\032\025.zsearch.CommandR"
      "eply\"\000\022T\n RegenerateSingleCertificateDel"
      "ta\022\027.zsearch.AnonymousQuery\032\025.zsearch.Co"
      "mmandReply\"\000\0221\n\004Ping\022\020.zsearch.Command\032\025"
      ".zsearch.CommandReply\"\0002\213\013\n\014QueryService"
      "\022E\n\021GetHostIPv4Record\022\022.zsearch.HostQuer"
      "y\032\032.zsearch.HostQueryResponse\"\000\0226\n\021PutHo"
      "stIPv4Record\022\017.zsearch.Record\032\016.zsearch."
      "Delta\"\000\0229\n\021DelHostIPv4Record\022\022.zsearch.H"
      "ostQuery\032\016.zsearch.Delta\"\000\022E\n\021GetAllIPv4"
      "Records\022\022.zsearch.HostQuery\032\032.zsearch.Ho"
      "stQueryResponse\"\000\0228\n\020GetHostIPv4Delta\022\022."
      "zsearch.HostQuery\032\016.zsearch.Delta\"\000\022G\n\023G"
      "etHostDomainRecord\022\022.zsearch.HostQuery\032\032"
      ".zsearch.HostQueryResponse\"\000\0228\n\023PutHostD"
      "omainRecord\022\017.zsearch.Record\032\016.zsearch.D"
      "elta\"\000\022;\n\023DelHostDomainRecord\022\022.zsearch."
      "HostQuery\032\016.zsearch.Delta\"\000\022G\n\023GetAllDom"
      "ainRecords\022\022.zsearch.HostQuery\032\032.zsearch"
      ".HostQueryResponse\"\000\022:\n\022GetHostDomainDel"
      "ta\022\022.zsearch.HostQuery\032\016.zsearch.Delta\"\000"
      "\022L\n\016GetCertificate\022\027.zsearch.AnonymousQu"
      "ery\032\037.zsearch.AnonymousQueryResponse\"\000\022H"
      "\n\021UpsertCertificate\022\030.zsearch.AnonymousR"
      "ecord\032\027.zsearch.AnonymousDelta\"\000\022K\n\024Upse"
      "rtRawCertificate\022\030.zsearch.AnonymousReco"
      "rd\032\027.zsearch.AnonymousDelta\"\000\022Q\n\023GetCryp"
      "tographicKey\022\027.zsearch.AnonymousQuery\032\037."
      "zsearch.AnonymousQueryResponse\"\000\022M\n\026Upse"
      "rtCryptographicKey\022\030.zsearch.AnonymousRe"
      "cord\032\027.zsearch.AnonymousDelta\"\000\022@\n\021GetPu"
      "blicLocation\022\022.zsearch.HostQuery\032\025.zsear"
      "ch.LocationAtom\"\000\022D\n\025GetRestrictedLocati"
      "on\022\022.zsearch.HostQuery\032\025.zsearch.Locatio"
      "nAtom\"\000\0221\n\010GetWHOIS\022\022.zsearch.HostQuery\032"
      "\017.zsearch.Record\"\000\0228\n\017GetUserMetadata\022\022."
      "zsearch.HostQuery\032\017.zsearch.Record\"\000\022;\n\017"
      "PutUserMetadata\022\017.zsearch.Record\032\025.zsear"
      "ch.CommandReply\"\000\022B\n\014GetRootStore\022\027.zsea"
      "rch.RootStoreQuery\032\027.zsearch.RootStoreRe"
      "ply\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2653);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "search.proto", &protobuf_RegisterTypes);
  ::zsearch::protobuf_anonstore_2eproto::AddDescriptors();
  ::zsearch::protobuf_hoststore_2eproto::AddDescriptors();
  ::zsearch::protobuf_rpc_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_search_2eproto


// @@protoc_insertion_point(namespace_scope)

}  // namespace zsearch

// @@protoc_insertion_point(global_scope)
