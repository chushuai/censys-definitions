// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "search.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace censys_definitions {

namespace protobuf_search_2eproto {


namespace {


}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = { ~0u };
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;
namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "search.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      NULL, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void TableStruct::Shutdown() {
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::censys_definitions::protobuf_anonstore_2eproto::InitDefaults();
  ::censys_definitions::protobuf_hoststore_2eproto::InitDefaults();
  ::censys_definitions::protobuf_rpc_2eproto::InitDefaults();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014search.proto\022\022censys_definitions\032\017anon"
      "store.proto\032\017hoststore.proto\032\trpc.proto2"
      "\214\014\n\014AdminService\022K\n\010Shutdown\022\033.censys_de"
      "finitions.Command\032 .censys_definitions.C"
      "ommandReply\"\000\022I\n\006Status\022\033.censys_definit"
      "ions.Command\032 .censys_definitions.Comman"
      "dReply\"\000\022M\n\nStatistics\022\033.censys_definiti"
      "ons.Command\032 .censys_definitions.Command"
      "Reply\"\000\022L\n\tPruneIPv4\022\033.censys_definition"
      "s.Command\032 .censys_definitions.CommandRe"
      "ply\"\000\022N\n\013PruneDomain\022\033.censys_definition"
      "s.Command\032 .censys_definitions.CommandRe"
      "ply\"\000\022O\n\014UpdateASData\022\033.censys_definitio"
      "ns.Command\032 .censys_definitions.CommandR"
      "eply\"\000\022U\n\022UpdateLocationData\022\033.censys_de"
      "finitions.Command\032 .censys_definitions.C"
      "ommandReply\"\000\022W\n\024ValidateCertificates\022\033."
      "censys_definitions.Command\032 .censys_defi"
      "nitions.CommandReply\"\000\022W\n\024FixCertificate"
      "Source\022\033.censys_definitions.Command\032 .ce"
      "nsys_definitions.CommandReply\"\000\022Q\n\016DumpI"
      "Pv4ToJSON\022\033.censys_definitions.Command\032 "
      ".censys_definitions.CommandReply\"\000\022S\n\020Du"
      "mpDomainToJSON\022\033.censys_definitions.Comm"
      "and\032 .censys_definitions.CommandReply\"\000\022"
      "Y\n\026DumpCertificatesToJSON\022\033.censys_defin"
      "itions.Command\032 .censys_definitions.Comm"
      "andReply\"\000\022Q\n\016DumpKeysToJSON\022\033.censys_de"
      "finitions.Command\032 .censys_definitions.C"
      "ommandReply\"\000\022W\n\024RegenerateIPv4Deltas\022\033."
      "censys_definitions.Command\032 .censys_defi"
      "nitions.CommandReply\"\000\022Y\n\026RegenerateDoma"
      "inDeltas\022\033.censys_definitions.Command\032 ."
      "censys_definitions.CommandReply\"\000\022^\n\033Reg"
      "enerateCertificateDeltas\022\033.censys_defini"
      "tions.Command\032 .censys_definitions.Comma"
      "ndReply\"\000\022j\n RegenerateSingleCertificate"
      "Delta\022\".censys_definitions.AnonymousQuer"
      "y\032 .censys_definitions.CommandReply\"\000\022G\n"
      "\004Ping\022\033.censys_definitions.Command\032 .cen"
      "sys_definitions.CommandReply\"\0002\331\016\n\014Query"
      "Service\022[\n\021GetHostIPv4Record\022\035.censys_de"
      "finitions.HostQuery\032%.censys_definitions"
      ".HostQueryResponse\"\000\022L\n\021PutHostIPv4Recor"
      "d\022\032.censys_definitions.Record\032\031.censys_d"
      "efinitions.Delta\"\000\022O\n\021DelHostIPv4Record\022"
      "\035.censys_definitions.HostQuery\032\031.censys_"
      "definitions.Delta\"\000\022[\n\021GetAllIPv4Records"
      "\022\035.censys_definitions.HostQuery\032%.censys"
      "_definitions.HostQueryResponse\"\000\022N\n\020GetH"
      "ostIPv4Delta\022\035.censys_definitions.HostQu"
      "ery\032\031.censys_definitions.Delta\"\000\022]\n\023GetH"
      "ostDomainRecord\022\035.censys_definitions.Hos"
      "tQuery\032%.censys_definitions.HostQueryRes"
      "ponse\"\000\022N\n\023PutHostDomainRecord\022\032.censys_"
      "definitions.Record\032\031.censys_definitions."
      "Delta\"\000\022Q\n\023DelHostDomainRecord\022\035.censys_"
      "definitions.HostQuery\032\031.censys_definitio"
      "ns.Delta\"\000\022]\n\023GetAllDomainRecords\022\035.cens"
      "ys_definitions.HostQuery\032%.censys_defini"
      "tions.HostQueryResponse\"\000\022P\n\022GetHostDoma"
      "inDelta\022\035.censys_definitions.HostQuery\032\031"
      ".censys_definitions.Delta\"\000\022b\n\016GetCertif"
      "icate\022\".censys_definitions.AnonymousQuer"
      "y\032*.censys_definitions.AnonymousQueryRes"
      "ponse\"\000\022^\n\021UpsertCertificate\022#.censys_de"
      "finitions.AnonymousRecord\032\".censys_defin"
      "itions.AnonymousDelta\"\000\022a\n\024UpsertRawCert"
      "ificate\022#.censys_definitions.AnonymousRe"
      "cord\032\".censys_definitions.AnonymousDelta"
      "\"\000\022g\n\023GetCryptographicKey\022\".censys_defin"
      "itions.AnonymousQuery\032*.censys_definitio"
      "ns.AnonymousQueryResponse\"\000\022c\n\026UpsertCry"
      "ptographicKey\022#.censys_definitions.Anony"
      "mousRecord\032\".censys_definitions.Anonymou"
      "sDelta\"\000\022V\n\021GetPublicLocation\022\035.censys_d"
      "efinitions.HostQuery\032 .censys_definition"
      "s.LocationAtom\"\000\022Z\n\025GetRestrictedLocatio"
      "n\022\035.censys_definitions.HostQuery\032 .censy"
      "s_definitions.LocationAtom\"\000\022G\n\010GetWHOIS"
      "\022\035.censys_definitions.HostQuery\032\032.censys"
      "_definitions.Record\"\000\022N\n\017GetUserMetadata"
      "\022\035.censys_definitions.HostQuery\032\032.censys"
      "_definitions.Record\"\000\022Q\n\017PutUserMetadata"
      "\022\032.censys_definitions.Record\032 .censys_de"
      "finitions.CommandReply\"\000\022X\n\014GetRootStore"
      "\022\".censys_definitions.RootStoreQuery\032\".c"
      "ensys_definitions.RootStoreReply\"\000b\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3522);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "search.proto", &protobuf_RegisterTypes);
  ::censys_definitions::protobuf_anonstore_2eproto::AddDescriptors();
  ::censys_definitions::protobuf_hoststore_2eproto::AddDescriptors();
  ::censys_definitions::protobuf_rpc_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_search_2eproto


// @@protoc_insertion_point(namespace_scope)

}  // namespace censys_definitions

// @@protoc_insertion_point(global_scope)
