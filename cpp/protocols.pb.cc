// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocols.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocols.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace zsearch {

namespace protobuf_protocols_2eproto {


namespace {

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = { ~0u };
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;
namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "protocols.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void TableStruct::Shutdown() {
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017protocols.proto\022\007zsearch*\341\003\n\010Protocol\022"
      "\022\n\016PROTO_RESERVED\020\000\022\020\n\014PROTO_SYSTEM\020\001\022\016\n"
      "\nPROTO_HTTP\020\002\022\017\n\013PROTO_HTTPS\020\003\022\016\n\nPROTO_"
      "IMAP\020\004\022\017\n\013PROTO_IMAPS\020\005\022\016\n\nPROTO_SMTP\020\006\022"
      "\017\n\013PROTO_SMTPS\020\007\022\016\n\nPROTO_POP3\020\010\022\017\n\013PROT"
      "O_POP3S\020\t\022\020\n\014PROTO_MODBUS\020\n\022\r\n\tPROTO_FTP"
      "\020\013\022\r\n\tPROTO_SSH\020\014\022\r\n\tPROTO_DNS\020\r\022\r\n\tPROT"
      "O_NTP\020\016\022\020\n\014PROTO_TELNET\020\017\022\016\n\nPROTO_UPNP\020"
      "\020\022\016\n\nPROTO_CWMP\020\021\022\020\n\014PROTO_HTTP_2\020\022\022\020\n\014P"
      "ROTO_BACNET\020\023\022\016\n\nPROTO_DNP3\020\024\022\r\n\tPROTO_F"
      "OX\020\025\022\014\n\010PROTO_S7\020\026\022\020\n\014PROTO_GLOBAL\020\027\022\020\n\014"
      "PROTO_LOOKUP\020\030\022\022\n\016PROTO_HTTP_WWW\020\032\022\023\n\017PR"
      "OTO_HTTPS_WWW\020\033\022\r\n\tPROTO_SMB\020\034*\347\n\n\013Subpr"
      "otocol\022\025\n\021SUBPROTO_RESERVED\020\000\022\024\n\020SUBPROT"
      "O_DELETED\020\001\022\024\n\020SUBPROTO_GENERIC\020\002\022\023\n\017SUB"
      "PROTO_BANNER\020\003\022\020\n\014SUBPROTO_TLS\020\004\022\024\n\020SUBP"
      "ROTO_TLS_1_0\020\005\022\024\n\020SUBPROTO_TLS_1_1\020\006\022\024\n\020"
      "SUBPROTO_TLS_1_2\020\007\022\024\n\020SUBPROTO_TLS_1_3\020\010"
      "\022\027\n\023SUBPROTO_HEARTBLEED\020\t\022\024\n\020SUBPROTO_CI"
      "PHERS\020\n\022\022\n\016SUBPROTO_SSL_2\020\013\022\022\n\016SUBPROTO_"
      "SSL_3\020\014\022\020\n\014SUBPROTO_GET\020\r\022\025\n\021SUBPROTO_ST"
      "ARTTLS\020\016\022\023\n\017SUBPROTO_EXPORT\020\017\022\027\n\023SUBPROT"
      "O_RSA_EXPORT\020\020\022\027\n\023SUBPROTO_DHE_EXPORT\020\021\022"
      "\020\n\014SUBPROTO_DHE\020\022\022\022\n\016SUBPROTO_ECDHE\020\023\022\020\n"
      "\014SUBPROTO_SNI\020\024\022\023\n\017SUBPROTO_NO_SNI\020\025\022\021\n\r"
      "SUBPROTO_QUIC\020\026\022\021\n\rSUBPROTO_SPDY\020\027\022\020\n\014SU"
      "BPROTO_RSA\020\030\022\020\n\014SUBPROTO_DSA\020\031\022\022\n\016SUBPRO"
      "TO_ECDSA\020\032\022\026\n\022SUBPROTO_DEVICE_ID\020\033\022\032\n\026SU"
      "BPROTO_OPEN_RESOLVER\020\034\022\027\n\023SUBPROTO_OPEN_"
      "PROXY\020\035\022\027\n\023SUBPROTO_OPEN_RELAY\020\036\022\021\n\rSUBP"
      "ROTO_TIME\020\037\022\031\n\025SUBPROTO_HACKING_TEAM\020 \022\034"
      "\n\030SUBPROTO_EXTENDED_RANDOM\020!\022\026\n\022SUBPROTO"
      "_DISCOVERY\020\"\022\023\n\017SUBPROTO_GTLD_A\020#\022\023\n\017SUB"
      "PROTO_LOOKUP\020$\022\023\n\017SUBPROTO_STATUS\020%\022\020\n\014S"
      "UBPROTO_SZL\020&\022\017\n\013SUBPROTO_V2\020\'\022!\n\034SUBPRO"
      "TO_SYS_PUBLIC_LOCATION\020\300\001\022\024\n\017SUBPROTO_SY"
      "S_AS\020\301\001\022\026\n\021SUBPROTO_SYS_TAGS\020\302\001\022\032\n\025SUBPR"
      "OTO_SYS_METADATA\020\303\001\022\027\n\022SUBPROTO_SYS_WHOI"
      "S\020\304\001\022\032\n\025SUBPROTO_SYS_USERDATA\020\305\001\022\033\n\026SUBP"
      "ROTO_SYS_BLACKLIST\020\306\001\022\034\n\027SUBPROTO_SYS_AL"
      "EXA_RANK\020\307\001\022%\n SUBPROTO_SYS_RESTRICTED_L"
      "OCATION\020\310\001\022\031\n\024SUBPROTO_SYS_VERSION\020\311\001\022 \n"
      "\033SUBPROTO_SYS_QUANTCAST_RANK\020\312\001\022%\n SUBPR"
      "OTO_SYS_CISCO_UMBRELLA_RANK\020\313\001\022\035\n\030SUBPRO"
      "TO_SYS_REVERSE_DNS\020\314\001\022\021\n\014SUBPROTO_SPF\020\334\001"
      "\022\023\n\016SUBPROTO_DMARC\020\335\001\022\022\n\rSUBPROTO_DKIM\020\336"
      "\001\022\017\n\nSUBPROTO_A\020\337\001\022\020\n\013SUBPROTO_MX\020\340\001\022\022\n\r"
      "SUBPROTO_AXFR\020\341\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1904);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocols.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_protocols_2eproto

const ::google::protobuf::EnumDescriptor* Protocol_descriptor() {
  protobuf_protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocols_2eproto::file_level_enum_descriptors[0];
}
bool Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Subprotocol_descriptor() {
  protobuf_protocols_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocols_2eproto::file_level_enum_descriptors[1];
}
bool Subprotocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace zsearch

// @@protoc_insertion_point(global_scope)
