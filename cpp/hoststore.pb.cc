// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hoststore.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hoststore.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace censys_definitions {
class WHOISAtomDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WHOISAtom> {
} _WHOISAtom_default_instance_;
class LocationAtomDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LocationAtom> {
} _LocationAtom_default_instance_;
class ProtocolAtomDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ProtocolAtom> {
} _ProtocolAtom_default_instance_;
class AnonymousKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AnonymousKey> {
} _AnonymousKey_default_instance_;
class RecordDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Record> {
  public:
  const ::censys_definitions::ProtocolAtom* atom_;
  const ::censys_definitions::LocationAtom* private_location_;
  const ::censys_definitions::ASAtom* as_atom_;
  const ::censys_definitions::WHOISAtom* whois_;
  const ::censys_definitions::UserdataAtom* userdata_;
  const ::censys_definitions::LocationAtom* public_location_;
  ::google::protobuf::uint32 alexa_rank_;
  ::google::protobuf::uint32 quantcast_rank_;
  ::google::protobuf::uint32 cisco_umbrella_rank_;
} _Record_default_instance_;
class DeltaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Delta> {
} _Delta_default_instance_;

namespace protobuf_hoststore_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WHOISAtom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationAtom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationAtom, continent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationAtom, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationAtom, country_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationAtom, city_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationAtom, postal_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationAtom, timezone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationAtom, province_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationAtom, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationAtom, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationAtom, registered_country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationAtom, registered_country_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolAtom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolAtom, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolAtom, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolAtom, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousKey, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousKey, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnonymousKey, subprotocol_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, subprotocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, scanid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, sha256fp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, first_seen_at_scan_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, last_seen_at_scan_id_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Record_default_instance_), atom_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Record_default_instance_), private_location_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Record_default_instance_), as_atom_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Record_default_instance_), whois_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Record_default_instance_), userdata_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Record_default_instance_), public_location_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Record_default_instance_), alexa_rank_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Record_default_instance_), quantcast_rank_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Record_default_instance_), cisco_umbrella_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, data_oneof_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, delta_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Delta, records_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(WHOISAtom)},
  { 4, -1, sizeof(LocationAtom)},
  { 19, -1, sizeof(ProtocolAtom)},
  { 26, -1, sizeof(AnonymousKey)},
  { 33, -1, sizeof(Record)},
  { 58, -1, sizeof(Delta)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_WHOISAtom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LocationAtom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProtocolAtom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AnonymousKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Record_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Delta_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "hoststore.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _WHOISAtom_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LocationAtom_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ProtocolAtom_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _AnonymousKey_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Record_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Delta_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::censys_definitions::protobuf_common_2eproto::InitDefaults();
  _WHOISAtom_default_instance_.DefaultConstruct();
  _LocationAtom_default_instance_.DefaultConstruct();
  _ProtocolAtom_default_instance_.DefaultConstruct();
  _AnonymousKey_default_instance_.DefaultConstruct();
  _Record_default_instance_.DefaultConstruct();
  _Delta_default_instance_.DefaultConstruct();
  _Record_default_instance_.atom_ = const_cast< ::censys_definitions::ProtocolAtom*>(
      ::censys_definitions::ProtocolAtom::internal_default_instance());
  _Record_default_instance_.private_location_ = const_cast< ::censys_definitions::LocationAtom*>(
      ::censys_definitions::LocationAtom::internal_default_instance());
  _Record_default_instance_.as_atom_ = const_cast< ::censys_definitions::ASAtom*>(
      ::censys_definitions::ASAtom::internal_default_instance());
  _Record_default_instance_.whois_ = const_cast< ::censys_definitions::WHOISAtom*>(
      ::censys_definitions::WHOISAtom::internal_default_instance());
  _Record_default_instance_.userdata_ = const_cast< ::censys_definitions::UserdataAtom*>(
      ::censys_definitions::UserdataAtom::internal_default_instance());
  _Record_default_instance_.public_location_ = const_cast< ::censys_definitions::LocationAtom*>(
      ::censys_definitions::LocationAtom::internal_default_instance());
  _Record_default_instance_.alexa_rank_ = 0u;
  _Record_default_instance_.quantcast_rank_ = 0u;
  _Record_default_instance_.cisco_umbrella_rank_ = 0u;
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017hoststore.proto\022\022censys_definitions\032\014c"
      "ommon.proto\"\013\n\tWHOISAtom\"\361\001\n\014LocationAto"
      "m\022\021\n\tcontinent\030\001 \001(\t\022\017\n\007country\030\002 \001(\t\022\024\n"
      "\014country_code\030\003 \001(\t\022\014\n\004city\030\004 \001(\t\022\023\n\013pos"
      "tal_code\030\005 \001(\t\022\020\n\010timezone\030\006 \001(\t\022\020\n\010prov"
      "ince\030\007 \001(\t\022\020\n\010latitude\030\010 \001(\001\022\021\n\tlongitud"
      "e\030\t \001(\001\022\032\n\022registered_country\030\n \001(\t\022\037\n\027r"
      "egistered_country_code\030\013 \001(\t\"[\n\014Protocol"
      "Atom\022/\n\010metadata\030\001 \003(\0132\035.censys_definiti"
      "ons.Metadatum\022\014\n\004tags\030\002 \003(\t\022\014\n\004data\030\003 \001("
      "\t\"C\n\014AnonymousKey\022\014\n\004port\030\001 \001(\r\022\020\n\010proto"
      "col\030\002 \001(\r\022\023\n\013subprotocol\030\003 \001(\r\"\373\004\n\006Recor"
      "d\022\n\n\002ip\030\001 \001(\007\022\014\n\004port\030\002 \001(\r\022\020\n\010protocol\030"
      "\003 \001(\r\022\023\n\013subprotocol\030\004 \001(\r\022\016\n\006domain\030\005 \001"
      "(\t\022\021\n\ttimestamp\030\006 \001(\007\022\016\n\006scanid\030\007 \001(\r\022\020\n"
      "\010sha256fp\030\010 \001(\014\022\035\n\025first_seen_at_scan_id"
      "\030\t \001(\r\022\034\n\024last_seen_at_scan_id\030\n \001(\r\0220\n\004"
      "atom\030\013 \001(\0132 .censys_definitions.Protocol"
      "AtomH\000\022<\n\020private_location\030\014 \001(\0132 .censy"
      "s_definitions.LocationAtomH\000\022-\n\007as_atom\030"
      "\r \001(\0132\032.censys_definitions.ASAtomH\000\022.\n\005w"
      "hois\030\016 \001(\0132\035.censys_definitions.WHOISAto"
      "mH\000\0224\n\010userdata\030\017 \001(\0132 .censys_definitio"
      "ns.UserdataAtomH\000\022;\n\017public_location\030\021 \001"
      "(\0132 .censys_definitions.LocationAtomH\000\022\024"
      "\n\nalexa_rank\030\020 \001(\rH\000\022\030\n\016quantcast_rank\030\023"
      " \001(\rH\000\022\035\n\023cisco_umbrella_rank\030\024 \001(\rH\000\022\017\n"
      "\007version\030\022 \001(\004B\014\n\ndata_oneof\"\224\001\n\005Delta\0221"
      "\n\ndelta_type\030\001 \001(\0162\035.censys_definitions."
      "DeltaType\022\n\n\002ip\030\002 \001(\007\022\016\n\006domain\030\003 \001(\t\022\017\n"
      "\007version\030\004 \001(\004\022+\n\007records\030\005 \003(\0132\032.censys"
      "_definitions.Recordb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1267);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hoststore.proto", &protobuf_RegisterTypes);
  ::censys_definitions::protobuf_common_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_hoststore_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WHOISAtom::WHOISAtom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hoststore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:censys_definitions.WHOISAtom)
}
WHOISAtom::WHOISAtom(const WHOISAtom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:censys_definitions.WHOISAtom)
}

void WHOISAtom::SharedCtor() {
  _cached_size_ = 0;
}

WHOISAtom::~WHOISAtom() {
  // @@protoc_insertion_point(destructor:censys_definitions.WHOISAtom)
  SharedDtor();
}

void WHOISAtom::SharedDtor() {
}

void WHOISAtom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WHOISAtom::descriptor() {
  protobuf_hoststore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hoststore_2eproto::file_level_metadata[0].descriptor;
}

const WHOISAtom& WHOISAtom::default_instance() {
  protobuf_hoststore_2eproto::InitDefaults();
  return *internal_default_instance();
}

WHOISAtom* WHOISAtom::New(::google::protobuf::Arena* arena) const {
  WHOISAtom* n = new WHOISAtom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WHOISAtom::Clear() {
// @@protoc_insertion_point(message_clear_start:censys_definitions.WHOISAtom)
}

bool WHOISAtom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:censys_definitions.WHOISAtom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:censys_definitions.WHOISAtom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:censys_definitions.WHOISAtom)
  return false;
#undef DO_
}

void WHOISAtom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:censys_definitions.WHOISAtom)
  // @@protoc_insertion_point(serialize_end:censys_definitions.WHOISAtom)
}

::google::protobuf::uint8* WHOISAtom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:censys_definitions.WHOISAtom)
  // @@protoc_insertion_point(serialize_to_array_end:censys_definitions.WHOISAtom)
  return target;
}

size_t WHOISAtom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:censys_definitions.WHOISAtom)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WHOISAtom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:censys_definitions.WHOISAtom)
  GOOGLE_DCHECK_NE(&from, this);
  const WHOISAtom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WHOISAtom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:censys_definitions.WHOISAtom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:censys_definitions.WHOISAtom)
    MergeFrom(*source);
  }
}

void WHOISAtom::MergeFrom(const WHOISAtom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:censys_definitions.WHOISAtom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void WHOISAtom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:censys_definitions.WHOISAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WHOISAtom::CopyFrom(const WHOISAtom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:censys_definitions.WHOISAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WHOISAtom::IsInitialized() const {
  return true;
}

void WHOISAtom::Swap(WHOISAtom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WHOISAtom::InternalSwap(WHOISAtom* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WHOISAtom::GetMetadata() const {
  protobuf_hoststore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hoststore_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WHOISAtom

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationAtom::kContinentFieldNumber;
const int LocationAtom::kCountryFieldNumber;
const int LocationAtom::kCountryCodeFieldNumber;
const int LocationAtom::kCityFieldNumber;
const int LocationAtom::kPostalCodeFieldNumber;
const int LocationAtom::kTimezoneFieldNumber;
const int LocationAtom::kProvinceFieldNumber;
const int LocationAtom::kLatitudeFieldNumber;
const int LocationAtom::kLongitudeFieldNumber;
const int LocationAtom::kRegisteredCountryFieldNumber;
const int LocationAtom::kRegisteredCountryCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationAtom::LocationAtom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hoststore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:censys_definitions.LocationAtom)
}
LocationAtom::LocationAtom(const LocationAtom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  continent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.continent().size() > 0) {
    continent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.continent_);
  }
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.country().size() > 0) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.country_code().size() > 0) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.city().size() > 0) {
    city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  postal_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.postal_code().size() > 0) {
    postal_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postal_code_);
  }
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.timezone().size() > 0) {
    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.province().size() > 0) {
    province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
  }
  registered_country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.registered_country().size() > 0) {
    registered_country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.registered_country_);
  }
  registered_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.registered_country_code().size() > 0) {
    registered_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.registered_country_code_);
  }
  ::memcpy(&latitude_, &from.latitude_,
    reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:censys_definitions.LocationAtom)
}

void LocationAtom::SharedCtor() {
  continent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postal_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  registered_country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  registered_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&latitude_, 0, reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_) + sizeof(longitude_));
  _cached_size_ = 0;
}

LocationAtom::~LocationAtom() {
  // @@protoc_insertion_point(destructor:censys_definitions.LocationAtom)
  SharedDtor();
}

void LocationAtom::SharedDtor() {
  continent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postal_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  registered_country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  registered_country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LocationAtom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocationAtom::descriptor() {
  protobuf_hoststore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hoststore_2eproto::file_level_metadata[1].descriptor;
}

const LocationAtom& LocationAtom::default_instance() {
  protobuf_hoststore_2eproto::InitDefaults();
  return *internal_default_instance();
}

LocationAtom* LocationAtom::New(::google::protobuf::Arena* arena) const {
  LocationAtom* n = new LocationAtom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocationAtom::Clear() {
// @@protoc_insertion_point(message_clear_start:censys_definitions.LocationAtom)
  continent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postal_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  registered_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  registered_country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&latitude_, 0, reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_) + sizeof(longitude_));
}

bool LocationAtom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:censys_definitions.LocationAtom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string continent = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_continent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->continent().data(), this->continent().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "censys_definitions.LocationAtom.continent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string country = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "censys_definitions.LocationAtom.country"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string country_code = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "censys_definitions.LocationAtom.country_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string city = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->city().data(), this->city().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "censys_definitions.LocationAtom.city"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string postal_code = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postal_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->postal_code().data(), this->postal_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "censys_definitions.LocationAtom.postal_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string timezone = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timezone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timezone().data(), this->timezone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "censys_definitions.LocationAtom.timezone"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string province = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->province().data(), this->province().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "censys_definitions.LocationAtom.province"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 8;
      case 8: {
        if (tag == 65u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude = 9;
      case 9: {
        if (tag == 73u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string registered_country = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_registered_country()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->registered_country().data(), this->registered_country().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "censys_definitions.LocationAtom.registered_country"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string registered_country_code = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_registered_country_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->registered_country_code().data(), this->registered_country_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "censys_definitions.LocationAtom.registered_country_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:censys_definitions.LocationAtom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:censys_definitions.LocationAtom)
  return false;
#undef DO_
}

void LocationAtom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:censys_definitions.LocationAtom)
  // string continent = 1;
  if (this->continent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->continent().data(), this->continent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.continent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->continent(), output);
  }

  // string country = 2;
  if (this->country().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->country(), output);
  }

  // string country_code = 3;
  if (this->country_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->country_code(), output);
  }

  // string city = 4;
  if (this->city().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.city");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->city(), output);
  }

  // string postal_code = 5;
  if (this->postal_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.postal_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->postal_code(), output);
  }

  // string timezone = 6;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.timezone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->timezone(), output);
  }

  // string province = 7;
  if (this->province().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.province");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->province(), output);
  }

  // double latitude = 8;
  if (this->latitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->latitude(), output);
  }

  // double longitude = 9;
  if (this->longitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->longitude(), output);
  }

  // string registered_country = 10;
  if (this->registered_country().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->registered_country().data(), this->registered_country().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.registered_country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->registered_country(), output);
  }

  // string registered_country_code = 11;
  if (this->registered_country_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->registered_country_code().data(), this->registered_country_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.registered_country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->registered_country_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:censys_definitions.LocationAtom)
}

::google::protobuf::uint8* LocationAtom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:censys_definitions.LocationAtom)
  // string continent = 1;
  if (this->continent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->continent().data(), this->continent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.continent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->continent(), target);
  }

  // string country = 2;
  if (this->country().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->country(), target);
  }

  // string country_code = 3;
  if (this->country_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country_code(), target);
  }

  // string city = 4;
  if (this->city().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->city().data(), this->city().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.city");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->city(), target);
  }

  // string postal_code = 5;
  if (this->postal_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->postal_code().data(), this->postal_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.postal_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->postal_code(), target);
  }

  // string timezone = 6;
  if (this->timezone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timezone().data(), this->timezone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.timezone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->timezone(), target);
  }

  // string province = 7;
  if (this->province().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->province().data(), this->province().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.province");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->province(), target);
  }

  // double latitude = 8;
  if (this->latitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->latitude(), target);
  }

  // double longitude = 9;
  if (this->longitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->longitude(), target);
  }

  // string registered_country = 10;
  if (this->registered_country().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->registered_country().data(), this->registered_country().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.registered_country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->registered_country(), target);
  }

  // string registered_country_code = 11;
  if (this->registered_country_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->registered_country_code().data(), this->registered_country_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.LocationAtom.registered_country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->registered_country_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:censys_definitions.LocationAtom)
  return target;
}

size_t LocationAtom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:censys_definitions.LocationAtom)
  size_t total_size = 0;

  // string continent = 1;
  if (this->continent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->continent());
  }

  // string country = 2;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->country());
  }

  // string country_code = 3;
  if (this->country_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->country_code());
  }

  // string city = 4;
  if (this->city().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->city());
  }

  // string postal_code = 5;
  if (this->postal_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->postal_code());
  }

  // string timezone = 6;
  if (this->timezone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timezone());
  }

  // string province = 7;
  if (this->province().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->province());
  }

  // string registered_country = 10;
  if (this->registered_country().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->registered_country());
  }

  // string registered_country_code = 11;
  if (this->registered_country_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->registered_country_code());
  }

  // double latitude = 8;
  if (this->latitude() != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 9;
  if (this->longitude() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationAtom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:censys_definitions.LocationAtom)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationAtom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocationAtom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:censys_definitions.LocationAtom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:censys_definitions.LocationAtom)
    MergeFrom(*source);
  }
}

void LocationAtom::MergeFrom(const LocationAtom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:censys_definitions.LocationAtom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.continent().size() > 0) {

    continent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.continent_);
  }
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.country_code().size() > 0) {

    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  if (from.city().size() > 0) {

    city_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.city_);
  }
  if (from.postal_code().size() > 0) {

    postal_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postal_code_);
  }
  if (from.timezone().size() > 0) {

    timezone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timezone_);
  }
  if (from.province().size() > 0) {

    province_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.province_);
  }
  if (from.registered_country().size() > 0) {

    registered_country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.registered_country_);
  }
  if (from.registered_country_code().size() > 0) {

    registered_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.registered_country_code_);
  }
  if (from.latitude() != 0) {
    set_latitude(from.latitude());
  }
  if (from.longitude() != 0) {
    set_longitude(from.longitude());
  }
}

void LocationAtom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:censys_definitions.LocationAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationAtom::CopyFrom(const LocationAtom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:censys_definitions.LocationAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationAtom::IsInitialized() const {
  return true;
}

void LocationAtom::Swap(LocationAtom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationAtom::InternalSwap(LocationAtom* other) {
  continent_.Swap(&other->continent_);
  country_.Swap(&other->country_);
  country_code_.Swap(&other->country_code_);
  city_.Swap(&other->city_);
  postal_code_.Swap(&other->postal_code_);
  timezone_.Swap(&other->timezone_);
  province_.Swap(&other->province_);
  registered_country_.Swap(&other->registered_country_);
  registered_country_code_.Swap(&other->registered_country_code_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocationAtom::GetMetadata() const {
  protobuf_hoststore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hoststore_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocationAtom

// string continent = 1;
void LocationAtom::clear_continent() {
  continent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LocationAtom::continent() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.continent)
  return continent_.GetNoArena();
}
void LocationAtom::set_continent(const ::std::string& value) {
  
  continent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.continent)
}
#if LANG_CXX11
void LocationAtom::set_continent(::std::string&& value) {
  
  continent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.continent)
}
#endif
void LocationAtom::set_continent(const char* value) {
  
  continent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.continent)
}
void LocationAtom::set_continent(const char* value, size_t size) {
  
  continent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.continent)
}
::std::string* LocationAtom::mutable_continent() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.continent)
  return continent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LocationAtom::release_continent() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.continent)
  
  return continent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LocationAtom::set_allocated_continent(::std::string* continent) {
  if (continent != NULL) {
    
  } else {
    
  }
  continent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), continent);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.continent)
}

// string country = 2;
void LocationAtom::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LocationAtom::country() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.country)
  return country_.GetNoArena();
}
void LocationAtom::set_country(const ::std::string& value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.country)
}
#if LANG_CXX11
void LocationAtom::set_country(::std::string&& value) {
  
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.country)
}
#endif
void LocationAtom::set_country(const char* value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.country)
}
void LocationAtom::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.country)
}
::std::string* LocationAtom::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LocationAtom::release_country() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.country)
  
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LocationAtom::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.country)
}

// string country_code = 3;
void LocationAtom::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LocationAtom::country_code() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.country_code)
  return country_code_.GetNoArena();
}
void LocationAtom::set_country_code(const ::std::string& value) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.country_code)
}
#if LANG_CXX11
void LocationAtom::set_country_code(::std::string&& value) {
  
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.country_code)
}
#endif
void LocationAtom::set_country_code(const char* value) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.country_code)
}
void LocationAtom::set_country_code(const char* value, size_t size) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.country_code)
}
::std::string* LocationAtom::mutable_country_code() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LocationAtom::release_country_code() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.country_code)
  
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LocationAtom::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    
  } else {
    
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.country_code)
}

// string city = 4;
void LocationAtom::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LocationAtom::city() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.city)
  return city_.GetNoArena();
}
void LocationAtom::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.city)
}
#if LANG_CXX11
void LocationAtom::set_city(::std::string&& value) {
  
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.city)
}
#endif
void LocationAtom::set_city(const char* value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.city)
}
void LocationAtom::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.city)
}
::std::string* LocationAtom::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LocationAtom::release_city() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LocationAtom::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.city)
}

// string postal_code = 5;
void LocationAtom::clear_postal_code() {
  postal_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LocationAtom::postal_code() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.postal_code)
  return postal_code_.GetNoArena();
}
void LocationAtom::set_postal_code(const ::std::string& value) {
  
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.postal_code)
}
#if LANG_CXX11
void LocationAtom::set_postal_code(::std::string&& value) {
  
  postal_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.postal_code)
}
#endif
void LocationAtom::set_postal_code(const char* value) {
  
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.postal_code)
}
void LocationAtom::set_postal_code(const char* value, size_t size) {
  
  postal_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.postal_code)
}
::std::string* LocationAtom::mutable_postal_code() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.postal_code)
  return postal_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LocationAtom::release_postal_code() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.postal_code)
  
  return postal_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LocationAtom::set_allocated_postal_code(::std::string* postal_code) {
  if (postal_code != NULL) {
    
  } else {
    
  }
  postal_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), postal_code);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.postal_code)
}

// string timezone = 6;
void LocationAtom::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LocationAtom::timezone() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.timezone)
  return timezone_.GetNoArena();
}
void LocationAtom::set_timezone(const ::std::string& value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.timezone)
}
#if LANG_CXX11
void LocationAtom::set_timezone(::std::string&& value) {
  
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.timezone)
}
#endif
void LocationAtom::set_timezone(const char* value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.timezone)
}
void LocationAtom::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.timezone)
}
::std::string* LocationAtom::mutable_timezone() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LocationAtom::release_timezone() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.timezone)
  
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LocationAtom::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.timezone)
}

// string province = 7;
void LocationAtom::clear_province() {
  province_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LocationAtom::province() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.province)
  return province_.GetNoArena();
}
void LocationAtom::set_province(const ::std::string& value) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.province)
}
#if LANG_CXX11
void LocationAtom::set_province(::std::string&& value) {
  
  province_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.province)
}
#endif
void LocationAtom::set_province(const char* value) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.province)
}
void LocationAtom::set_province(const char* value, size_t size) {
  
  province_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.province)
}
::std::string* LocationAtom::mutable_province() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.province)
  return province_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LocationAtom::release_province() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.province)
  
  return province_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LocationAtom::set_allocated_province(::std::string* province) {
  if (province != NULL) {
    
  } else {
    
  }
  province_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), province);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.province)
}

// double latitude = 8;
void LocationAtom::clear_latitude() {
  latitude_ = 0;
}
double LocationAtom::latitude() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.latitude)
  return latitude_;
}
void LocationAtom::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.latitude)
}

// double longitude = 9;
void LocationAtom::clear_longitude() {
  longitude_ = 0;
}
double LocationAtom::longitude() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.longitude)
  return longitude_;
}
void LocationAtom::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.longitude)
}

// string registered_country = 10;
void LocationAtom::clear_registered_country() {
  registered_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LocationAtom::registered_country() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.registered_country)
  return registered_country_.GetNoArena();
}
void LocationAtom::set_registered_country(const ::std::string& value) {
  
  registered_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.registered_country)
}
#if LANG_CXX11
void LocationAtom::set_registered_country(::std::string&& value) {
  
  registered_country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.registered_country)
}
#endif
void LocationAtom::set_registered_country(const char* value) {
  
  registered_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.registered_country)
}
void LocationAtom::set_registered_country(const char* value, size_t size) {
  
  registered_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.registered_country)
}
::std::string* LocationAtom::mutable_registered_country() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.registered_country)
  return registered_country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LocationAtom::release_registered_country() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.registered_country)
  
  return registered_country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LocationAtom::set_allocated_registered_country(::std::string* registered_country) {
  if (registered_country != NULL) {
    
  } else {
    
  }
  registered_country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registered_country);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.registered_country)
}

// string registered_country_code = 11;
void LocationAtom::clear_registered_country_code() {
  registered_country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LocationAtom::registered_country_code() const {
  // @@protoc_insertion_point(field_get:censys_definitions.LocationAtom.registered_country_code)
  return registered_country_code_.GetNoArena();
}
void LocationAtom::set_registered_country_code(const ::std::string& value) {
  
  registered_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.LocationAtom.registered_country_code)
}
#if LANG_CXX11
void LocationAtom::set_registered_country_code(::std::string&& value) {
  
  registered_country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.LocationAtom.registered_country_code)
}
#endif
void LocationAtom::set_registered_country_code(const char* value) {
  
  registered_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.LocationAtom.registered_country_code)
}
void LocationAtom::set_registered_country_code(const char* value, size_t size) {
  
  registered_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.LocationAtom.registered_country_code)
}
::std::string* LocationAtom::mutable_registered_country_code() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.LocationAtom.registered_country_code)
  return registered_country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LocationAtom::release_registered_country_code() {
  // @@protoc_insertion_point(field_release:censys_definitions.LocationAtom.registered_country_code)
  
  return registered_country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LocationAtom::set_allocated_registered_country_code(::std::string* registered_country_code) {
  if (registered_country_code != NULL) {
    
  } else {
    
  }
  registered_country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), registered_country_code);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.LocationAtom.registered_country_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProtocolAtom::kMetadataFieldNumber;
const int ProtocolAtom::kTagsFieldNumber;
const int ProtocolAtom::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProtocolAtom::ProtocolAtom()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hoststore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:censys_definitions.ProtocolAtom)
}
ProtocolAtom::ProtocolAtom(const ProtocolAtom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      metadata_(from.metadata_),
      tags_(from.tags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:censys_definitions.ProtocolAtom)
}

void ProtocolAtom::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ProtocolAtom::~ProtocolAtom() {
  // @@protoc_insertion_point(destructor:censys_definitions.ProtocolAtom)
  SharedDtor();
}

void ProtocolAtom::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProtocolAtom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtocolAtom::descriptor() {
  protobuf_hoststore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hoststore_2eproto::file_level_metadata[2].descriptor;
}

const ProtocolAtom& ProtocolAtom::default_instance() {
  protobuf_hoststore_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProtocolAtom* ProtocolAtom::New(::google::protobuf::Arena* arena) const {
  ProtocolAtom* n = new ProtocolAtom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProtocolAtom::Clear() {
// @@protoc_insertion_point(message_clear_start:censys_definitions.ProtocolAtom)
  metadata_.Clear();
  tags_.Clear();
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ProtocolAtom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:censys_definitions.ProtocolAtom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .censys_definitions.Metadatum metadata = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated string tags = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "censys_definitions.ProtocolAtom.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "censys_definitions.ProtocolAtom.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:censys_definitions.ProtocolAtom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:censys_definitions.ProtocolAtom)
  return false;
#undef DO_
}

void ProtocolAtom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:censys_definitions.ProtocolAtom)
  // repeated .censys_definitions.Metadatum metadata = 1;
  for (unsigned int i = 0, n = this->metadata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->metadata(i), output);
  }

  // repeated string tags = 2;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.ProtocolAtom.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tags(i), output);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.ProtocolAtom.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:censys_definitions.ProtocolAtom)
}

::google::protobuf::uint8* ProtocolAtom::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:censys_definitions.ProtocolAtom)
  // repeated .censys_definitions.Metadatum metadata = 1;
  for (unsigned int i = 0, n = this->metadata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->metadata(i), false, target);
  }

  // repeated string tags = 2;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.ProtocolAtom.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->tags(i), target);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.ProtocolAtom.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:censys_definitions.ProtocolAtom)
  return target;
}

size_t ProtocolAtom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:censys_definitions.ProtocolAtom)
  size_t total_size = 0;

  // repeated .censys_definitions.Metadatum metadata = 1;
  {
    unsigned int count = this->metadata_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata(i));
    }
  }

  // repeated string tags = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // string data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtocolAtom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:censys_definitions.ProtocolAtom)
  GOOGLE_DCHECK_NE(&from, this);
  const ProtocolAtom* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProtocolAtom>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:censys_definitions.ProtocolAtom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:censys_definitions.ProtocolAtom)
    MergeFrom(*source);
  }
}

void ProtocolAtom::MergeFrom(const ProtocolAtom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:censys_definitions.ProtocolAtom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  metadata_.MergeFrom(from.metadata_);
  tags_.MergeFrom(from.tags_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ProtocolAtom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:censys_definitions.ProtocolAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolAtom::CopyFrom(const ProtocolAtom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:censys_definitions.ProtocolAtom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolAtom::IsInitialized() const {
  return true;
}

void ProtocolAtom::Swap(ProtocolAtom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProtocolAtom::InternalSwap(ProtocolAtom* other) {
  metadata_.UnsafeArenaSwap(&other->metadata_);
  tags_.UnsafeArenaSwap(&other->tags_);
  data_.Swap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProtocolAtom::GetMetadata() const {
  protobuf_hoststore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hoststore_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProtocolAtom

// repeated .censys_definitions.Metadatum metadata = 1;
int ProtocolAtom::metadata_size() const {
  return metadata_.size();
}
void ProtocolAtom::clear_metadata() {
  metadata_.Clear();
}
const ::censys_definitions::Metadatum& ProtocolAtom::metadata(int index) const {
  // @@protoc_insertion_point(field_get:censys_definitions.ProtocolAtom.metadata)
  return metadata_.Get(index);
}
::censys_definitions::Metadatum* ProtocolAtom::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:censys_definitions.ProtocolAtom.metadata)
  return metadata_.Mutable(index);
}
::censys_definitions::Metadatum* ProtocolAtom::add_metadata() {
  // @@protoc_insertion_point(field_add:censys_definitions.ProtocolAtom.metadata)
  return metadata_.Add();
}
::google::protobuf::RepeatedPtrField< ::censys_definitions::Metadatum >*
ProtocolAtom::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:censys_definitions.ProtocolAtom.metadata)
  return &metadata_;
}
const ::google::protobuf::RepeatedPtrField< ::censys_definitions::Metadatum >&
ProtocolAtom::metadata() const {
  // @@protoc_insertion_point(field_list:censys_definitions.ProtocolAtom.metadata)
  return metadata_;
}

// repeated string tags = 2;
int ProtocolAtom::tags_size() const {
  return tags_.size();
}
void ProtocolAtom::clear_tags() {
  tags_.Clear();
}
const ::std::string& ProtocolAtom::tags(int index) const {
  // @@protoc_insertion_point(field_get:censys_definitions.ProtocolAtom.tags)
  return tags_.Get(index);
}
::std::string* ProtocolAtom::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:censys_definitions.ProtocolAtom.tags)
  return tags_.Mutable(index);
}
void ProtocolAtom::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:censys_definitions.ProtocolAtom.tags)
  tags_.Mutable(index)->assign(value);
}
void ProtocolAtom::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:censys_definitions.ProtocolAtom.tags)
}
void ProtocolAtom::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.ProtocolAtom.tags)
}
::std::string* ProtocolAtom::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:censys_definitions.ProtocolAtom.tags)
  return tags_.Add();
}
void ProtocolAtom::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:censys_definitions.ProtocolAtom.tags)
}
void ProtocolAtom::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:censys_definitions.ProtocolAtom.tags)
}
void ProtocolAtom::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:censys_definitions.ProtocolAtom.tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProtocolAtom::tags() const {
  // @@protoc_insertion_point(field_list:censys_definitions.ProtocolAtom.tags)
  return tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ProtocolAtom::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:censys_definitions.ProtocolAtom.tags)
  return &tags_;
}

// string data = 3;
void ProtocolAtom::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ProtocolAtom::data() const {
  // @@protoc_insertion_point(field_get:censys_definitions.ProtocolAtom.data)
  return data_.GetNoArena();
}
void ProtocolAtom::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.ProtocolAtom.data)
}
#if LANG_CXX11
void ProtocolAtom::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.ProtocolAtom.data)
}
#endif
void ProtocolAtom::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.ProtocolAtom.data)
}
void ProtocolAtom::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.ProtocolAtom.data)
}
::std::string* ProtocolAtom::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.ProtocolAtom.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProtocolAtom::release_data() {
  // @@protoc_insertion_point(field_release:censys_definitions.ProtocolAtom.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProtocolAtom::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.ProtocolAtom.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AnonymousKey::kPortFieldNumber;
const int AnonymousKey::kProtocolFieldNumber;
const int AnonymousKey::kSubprotocolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AnonymousKey::AnonymousKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hoststore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:censys_definitions.AnonymousKey)
}
AnonymousKey::AnonymousKey(const AnonymousKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&port_, &from.port_,
    reinterpret_cast<char*>(&subprotocol_) -
    reinterpret_cast<char*>(&port_) + sizeof(subprotocol_));
  // @@protoc_insertion_point(copy_constructor:censys_definitions.AnonymousKey)
}

void AnonymousKey::SharedCtor() {
  ::memset(&port_, 0, reinterpret_cast<char*>(&subprotocol_) -
    reinterpret_cast<char*>(&port_) + sizeof(subprotocol_));
  _cached_size_ = 0;
}

AnonymousKey::~AnonymousKey() {
  // @@protoc_insertion_point(destructor:censys_definitions.AnonymousKey)
  SharedDtor();
}

void AnonymousKey::SharedDtor() {
}

void AnonymousKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnonymousKey::descriptor() {
  protobuf_hoststore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hoststore_2eproto::file_level_metadata[3].descriptor;
}

const AnonymousKey& AnonymousKey::default_instance() {
  protobuf_hoststore_2eproto::InitDefaults();
  return *internal_default_instance();
}

AnonymousKey* AnonymousKey::New(::google::protobuf::Arena* arena) const {
  AnonymousKey* n = new AnonymousKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AnonymousKey::Clear() {
// @@protoc_insertion_point(message_clear_start:censys_definitions.AnonymousKey)
  ::memset(&port_, 0, reinterpret_cast<char*>(&subprotocol_) -
    reinterpret_cast<char*>(&port_) + sizeof(subprotocol_));
}

bool AnonymousKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:censys_definitions.AnonymousKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 port = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 protocol = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 subprotocol = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subprotocol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:censys_definitions.AnonymousKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:censys_definitions.AnonymousKey)
  return false;
#undef DO_
}

void AnonymousKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:censys_definitions.AnonymousKey)
  // uint32 port = 1;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->port(), output);
  }

  // uint32 protocol = 2;
  if (this->protocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->protocol(), output);
  }

  // uint32 subprotocol = 3;
  if (this->subprotocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->subprotocol(), output);
  }

  // @@protoc_insertion_point(serialize_end:censys_definitions.AnonymousKey)
}

::google::protobuf::uint8* AnonymousKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:censys_definitions.AnonymousKey)
  // uint32 port = 1;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->port(), target);
  }

  // uint32 protocol = 2;
  if (this->protocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->protocol(), target);
  }

  // uint32 subprotocol = 3;
  if (this->subprotocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->subprotocol(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:censys_definitions.AnonymousKey)
  return target;
}

size_t AnonymousKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:censys_definitions.AnonymousKey)
  size_t total_size = 0;

  // uint32 port = 1;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 protocol = 2;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->protocol());
  }

  // uint32 subprotocol = 3;
  if (this->subprotocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->subprotocol());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnonymousKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:censys_definitions.AnonymousKey)
  GOOGLE_DCHECK_NE(&from, this);
  const AnonymousKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AnonymousKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:censys_definitions.AnonymousKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:censys_definitions.AnonymousKey)
    MergeFrom(*source);
  }
}

void AnonymousKey::MergeFrom(const AnonymousKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:censys_definitions.AnonymousKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.protocol() != 0) {
    set_protocol(from.protocol());
  }
  if (from.subprotocol() != 0) {
    set_subprotocol(from.subprotocol());
  }
}

void AnonymousKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:censys_definitions.AnonymousKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnonymousKey::CopyFrom(const AnonymousKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:censys_definitions.AnonymousKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnonymousKey::IsInitialized() const {
  return true;
}

void AnonymousKey::Swap(AnonymousKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AnonymousKey::InternalSwap(AnonymousKey* other) {
  std::swap(port_, other->port_);
  std::swap(protocol_, other->protocol_);
  std::swap(subprotocol_, other->subprotocol_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AnonymousKey::GetMetadata() const {
  protobuf_hoststore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hoststore_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AnonymousKey

// uint32 port = 1;
void AnonymousKey::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 AnonymousKey::port() const {
  // @@protoc_insertion_point(field_get:censys_definitions.AnonymousKey.port)
  return port_;
}
void AnonymousKey::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.AnonymousKey.port)
}

// uint32 protocol = 2;
void AnonymousKey::clear_protocol() {
  protocol_ = 0u;
}
::google::protobuf::uint32 AnonymousKey::protocol() const {
  // @@protoc_insertion_point(field_get:censys_definitions.AnonymousKey.protocol)
  return protocol_;
}
void AnonymousKey::set_protocol(::google::protobuf::uint32 value) {
  
  protocol_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.AnonymousKey.protocol)
}

// uint32 subprotocol = 3;
void AnonymousKey::clear_subprotocol() {
  subprotocol_ = 0u;
}
::google::protobuf::uint32 AnonymousKey::subprotocol() const {
  // @@protoc_insertion_point(field_get:censys_definitions.AnonymousKey.subprotocol)
  return subprotocol_;
}
void AnonymousKey::set_subprotocol(::google::protobuf::uint32 value) {
  
  subprotocol_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.AnonymousKey.subprotocol)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Record::kIpFieldNumber;
const int Record::kPortFieldNumber;
const int Record::kProtocolFieldNumber;
const int Record::kSubprotocolFieldNumber;
const int Record::kDomainFieldNumber;
const int Record::kTimestampFieldNumber;
const int Record::kScanidFieldNumber;
const int Record::kSha256FpFieldNumber;
const int Record::kFirstSeenAtScanIdFieldNumber;
const int Record::kLastSeenAtScanIdFieldNumber;
const int Record::kAtomFieldNumber;
const int Record::kPrivateLocationFieldNumber;
const int Record::kAsAtomFieldNumber;
const int Record::kWhoisFieldNumber;
const int Record::kUserdataFieldNumber;
const int Record::kPublicLocationFieldNumber;
const int Record::kAlexaRankFieldNumber;
const int Record::kQuantcastRankFieldNumber;
const int Record::kCiscoUmbrellaRankFieldNumber;
const int Record::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Record::Record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hoststore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:censys_definitions.Record)
}
Record::Record(const Record& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  sha256fp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sha256fp().size() > 0) {
    sha256fp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256fp_);
  }
  ::memcpy(&ip_, &from.ip_,
    reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&ip_) + sizeof(version_));
  clear_has_data_oneof();
  switch (from.data_oneof_case()) {
    case kAtom: {
      mutable_atom()->::censys_definitions::ProtocolAtom::MergeFrom(from.atom());
      break;
    }
    case kPrivateLocation: {
      mutable_private_location()->::censys_definitions::LocationAtom::MergeFrom(from.private_location());
      break;
    }
    case kAsAtom: {
      mutable_as_atom()->::censys_definitions::ASAtom::MergeFrom(from.as_atom());
      break;
    }
    case kWhois: {
      mutable_whois()->::censys_definitions::WHOISAtom::MergeFrom(from.whois());
      break;
    }
    case kUserdata: {
      mutable_userdata()->::censys_definitions::UserdataAtom::MergeFrom(from.userdata());
      break;
    }
    case kPublicLocation: {
      mutable_public_location()->::censys_definitions::LocationAtom::MergeFrom(from.public_location());
      break;
    }
    case kAlexaRank: {
      set_alexa_rank(from.alexa_rank());
      break;
    }
    case kQuantcastRank: {
      set_quantcast_rank(from.quantcast_rank());
      break;
    }
    case kCiscoUmbrellaRank: {
      set_cisco_umbrella_rank(from.cisco_umbrella_rank());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:censys_definitions.Record)
}

void Record::SharedCtor() {
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha256fp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ip_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&ip_) + sizeof(version_));
  clear_has_data_oneof();
  _cached_size_ = 0;
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:censys_definitions.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha256fp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_data_oneof()) {
    clear_data_oneof();
  }
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  protobuf_hoststore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hoststore_2eproto::file_level_metadata[4].descriptor;
}

const Record& Record::default_instance() {
  protobuf_hoststore_2eproto::InitDefaults();
  return *internal_default_instance();
}

Record* Record::New(::google::protobuf::Arena* arena) const {
  Record* n = new Record;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Record::clear_data_oneof() {
// @@protoc_insertion_point(one_of_clear_start:censys_definitions.Record)
  switch (data_oneof_case()) {
    case kAtom: {
      delete data_oneof_.atom_;
      break;
    }
    case kPrivateLocation: {
      delete data_oneof_.private_location_;
      break;
    }
    case kAsAtom: {
      delete data_oneof_.as_atom_;
      break;
    }
    case kWhois: {
      delete data_oneof_.whois_;
      break;
    }
    case kUserdata: {
      delete data_oneof_.userdata_;
      break;
    }
    case kPublicLocation: {
      delete data_oneof_.public_location_;
      break;
    }
    case kAlexaRank: {
      // No need to clear
      break;
    }
    case kQuantcastRank: {
      // No need to clear
      break;
    }
    case kCiscoUmbrellaRank: {
      // No need to clear
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}


void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:censys_definitions.Record)
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha256fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ip_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&ip_) + sizeof(version_));
  clear_data_oneof();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:censys_definitions.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed32 ip = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 protocol = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 subprotocol = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subprotocol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "censys_definitions.Record.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 timestamp = 6;
      case 6: {
        if (tag == 53u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scanid = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scanid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sha256fp = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha256fp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 first_seen_at_scan_id = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_seen_at_scan_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 last_seen_at_scan_id = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_seen_at_scan_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .censys_definitions.ProtocolAtom atom = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .censys_definitions.LocationAtom private_location = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_private_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .censys_definitions.ASAtom as_atom = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_as_atom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .censys_definitions.WHOISAtom whois = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_whois()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .censys_definitions.UserdataAtom userdata = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 alexa_rank = 16;
      case 16: {
        if (tag == 128u) {
          clear_data_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_oneof_.alexa_rank_)));
          set_has_alexa_rank();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .censys_definitions.LocationAtom public_location = 17;
      case 17: {
        if (tag == 138u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_public_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 version = 18;
      case 18: {
        if (tag == 144u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 quantcast_rank = 19;
      case 19: {
        if (tag == 152u) {
          clear_data_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_oneof_.quantcast_rank_)));
          set_has_quantcast_rank();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cisco_umbrella_rank = 20;
      case 20: {
        if (tag == 160u) {
          clear_data_oneof();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_oneof_.cisco_umbrella_rank_)));
          set_has_cisco_umbrella_rank();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:censys_definitions.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:censys_definitions.Record)
  return false;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:censys_definitions.Record)
  // fixed32 ip = 1;
  if (this->ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->ip(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // uint32 protocol = 3;
  if (this->protocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->protocol(), output);
  }

  // uint32 subprotocol = 4;
  if (this->subprotocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->subprotocol(), output);
  }

  // string domain = 5;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.Record.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->domain(), output);
  }

  // fixed32 timestamp = 6;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->timestamp(), output);
  }

  // uint32 scanid = 7;
  if (this->scanid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->scanid(), output);
  }

  // bytes sha256fp = 8;
  if (this->sha256fp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->sha256fp(), output);
  }

  // uint32 first_seen_at_scan_id = 9;
  if (this->first_seen_at_scan_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->first_seen_at_scan_id(), output);
  }

  // uint32 last_seen_at_scan_id = 10;
  if (this->last_seen_at_scan_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->last_seen_at_scan_id(), output);
  }

  // .censys_definitions.ProtocolAtom atom = 11;
  if (has_atom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *data_oneof_.atom_, output);
  }

  // .censys_definitions.LocationAtom private_location = 12;
  if (has_private_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *data_oneof_.private_location_, output);
  }

  // .censys_definitions.ASAtom as_atom = 13;
  if (has_as_atom()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *data_oneof_.as_atom_, output);
  }

  // .censys_definitions.WHOISAtom whois = 14;
  if (has_whois()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *data_oneof_.whois_, output);
  }

  // .censys_definitions.UserdataAtom userdata = 15;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *data_oneof_.userdata_, output);
  }

  // uint32 alexa_rank = 16;
  if (has_alexa_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->alexa_rank(), output);
  }

  // .censys_definitions.LocationAtom public_location = 17;
  if (has_public_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *data_oneof_.public_location_, output);
  }

  // uint64 version = 18;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->version(), output);
  }

  // uint32 quantcast_rank = 19;
  if (has_quantcast_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->quantcast_rank(), output);
  }

  // uint32 cisco_umbrella_rank = 20;
  if (has_cisco_umbrella_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->cisco_umbrella_rank(), output);
  }

  // @@protoc_insertion_point(serialize_end:censys_definitions.Record)
}

::google::protobuf::uint8* Record::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:censys_definitions.Record)
  // fixed32 ip = 1;
  if (this->ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->ip(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // uint32 protocol = 3;
  if (this->protocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->protocol(), target);
  }

  // uint32 subprotocol = 4;
  if (this->subprotocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->subprotocol(), target);
  }

  // string domain = 5;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.Record.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->domain(), target);
  }

  // fixed32 timestamp = 6;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->timestamp(), target);
  }

  // uint32 scanid = 7;
  if (this->scanid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->scanid(), target);
  }

  // bytes sha256fp = 8;
  if (this->sha256fp().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->sha256fp(), target);
  }

  // uint32 first_seen_at_scan_id = 9;
  if (this->first_seen_at_scan_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->first_seen_at_scan_id(), target);
  }

  // uint32 last_seen_at_scan_id = 10;
  if (this->last_seen_at_scan_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->last_seen_at_scan_id(), target);
  }

  // .censys_definitions.ProtocolAtom atom = 11;
  if (has_atom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *data_oneof_.atom_, false, target);
  }

  // .censys_definitions.LocationAtom private_location = 12;
  if (has_private_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *data_oneof_.private_location_, false, target);
  }

  // .censys_definitions.ASAtom as_atom = 13;
  if (has_as_atom()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *data_oneof_.as_atom_, false, target);
  }

  // .censys_definitions.WHOISAtom whois = 14;
  if (has_whois()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *data_oneof_.whois_, false, target);
  }

  // .censys_definitions.UserdataAtom userdata = 15;
  if (has_userdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *data_oneof_.userdata_, false, target);
  }

  // uint32 alexa_rank = 16;
  if (has_alexa_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->alexa_rank(), target);
  }

  // .censys_definitions.LocationAtom public_location = 17;
  if (has_public_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *data_oneof_.public_location_, false, target);
  }

  // uint64 version = 18;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->version(), target);
  }

  // uint32 quantcast_rank = 19;
  if (has_quantcast_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->quantcast_rank(), target);
  }

  // uint32 cisco_umbrella_rank = 20;
  if (has_cisco_umbrella_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->cisco_umbrella_rank(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:censys_definitions.Record)
  return target;
}

size_t Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:censys_definitions.Record)
  size_t total_size = 0;

  // string domain = 5;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // bytes sha256fp = 8;
  if (this->sha256fp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sha256fp());
  }

  // fixed32 ip = 1;
  if (this->ip() != 0) {
    total_size += 1 + 4;
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 protocol = 3;
  if (this->protocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->protocol());
  }

  // uint32 subprotocol = 4;
  if (this->subprotocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->subprotocol());
  }

  // fixed32 timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 + 4;
  }

  // uint32 scanid = 7;
  if (this->scanid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scanid());
  }

  // uint32 first_seen_at_scan_id = 9;
  if (this->first_seen_at_scan_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->first_seen_at_scan_id());
  }

  // uint32 last_seen_at_scan_id = 10;
  if (this->last_seen_at_scan_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_seen_at_scan_id());
  }

  // uint64 version = 18;
  if (this->version() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  switch (data_oneof_case()) {
    // .censys_definitions.ProtocolAtom atom = 11;
    case kAtom: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_oneof_.atom_);
      break;
    }
    // .censys_definitions.LocationAtom private_location = 12;
    case kPrivateLocation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_oneof_.private_location_);
      break;
    }
    // .censys_definitions.ASAtom as_atom = 13;
    case kAsAtom: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_oneof_.as_atom_);
      break;
    }
    // .censys_definitions.WHOISAtom whois = 14;
    case kWhois: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_oneof_.whois_);
      break;
    }
    // .censys_definitions.UserdataAtom userdata = 15;
    case kUserdata: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_oneof_.userdata_);
      break;
    }
    // .censys_definitions.LocationAtom public_location = 17;
    case kPublicLocation: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_oneof_.public_location_);
      break;
    }
    // uint32 alexa_rank = 16;
    case kAlexaRank: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->alexa_rank());
      break;
    }
    // uint32 quantcast_rank = 19;
    case kQuantcastRank: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantcast_rank());
      break;
    }
    // uint32 cisco_umbrella_rank = 20;
    case kCiscoUmbrellaRank: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cisco_umbrella_rank());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:censys_definitions.Record)
  GOOGLE_DCHECK_NE(&from, this);
  const Record* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:censys_definitions.Record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:censys_definitions.Record)
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:censys_definitions.Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.sha256fp().size() > 0) {

    sha256fp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256fp_);
  }
  if (from.ip() != 0) {
    set_ip(from.ip());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.protocol() != 0) {
    set_protocol(from.protocol());
  }
  if (from.subprotocol() != 0) {
    set_subprotocol(from.subprotocol());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.scanid() != 0) {
    set_scanid(from.scanid());
  }
  if (from.first_seen_at_scan_id() != 0) {
    set_first_seen_at_scan_id(from.first_seen_at_scan_id());
  }
  if (from.last_seen_at_scan_id() != 0) {
    set_last_seen_at_scan_id(from.last_seen_at_scan_id());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
  switch (from.data_oneof_case()) {
    case kAtom: {
      mutable_atom()->::censys_definitions::ProtocolAtom::MergeFrom(from.atom());
      break;
    }
    case kPrivateLocation: {
      mutable_private_location()->::censys_definitions::LocationAtom::MergeFrom(from.private_location());
      break;
    }
    case kAsAtom: {
      mutable_as_atom()->::censys_definitions::ASAtom::MergeFrom(from.as_atom());
      break;
    }
    case kWhois: {
      mutable_whois()->::censys_definitions::WHOISAtom::MergeFrom(from.whois());
      break;
    }
    case kUserdata: {
      mutable_userdata()->::censys_definitions::UserdataAtom::MergeFrom(from.userdata());
      break;
    }
    case kPublicLocation: {
      mutable_public_location()->::censys_definitions::LocationAtom::MergeFrom(from.public_location());
      break;
    }
    case kAlexaRank: {
      set_alexa_rank(from.alexa_rank());
      break;
    }
    case kQuantcastRank: {
      set_quantcast_rank(from.quantcast_rank());
      break;
    }
    case kCiscoUmbrellaRank: {
      set_cisco_umbrella_rank(from.cisco_umbrella_rank());
      break;
    }
    case DATA_ONEOF_NOT_SET: {
      break;
    }
  }
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:censys_definitions.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:censys_definitions.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  return true;
}

void Record::Swap(Record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Record::InternalSwap(Record* other) {
  domain_.Swap(&other->domain_);
  sha256fp_.Swap(&other->sha256fp_);
  std::swap(ip_, other->ip_);
  std::swap(port_, other->port_);
  std::swap(protocol_, other->protocol_);
  std::swap(subprotocol_, other->subprotocol_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(scanid_, other->scanid_);
  std::swap(first_seen_at_scan_id_, other->first_seen_at_scan_id_);
  std::swap(last_seen_at_scan_id_, other->last_seen_at_scan_id_);
  std::swap(version_, other->version_);
  std::swap(data_oneof_, other->data_oneof_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_hoststore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hoststore_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Record

// fixed32 ip = 1;
void Record::clear_ip() {
  ip_ = 0u;
}
::google::protobuf::uint32 Record::ip() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.ip)
  return ip_;
}
void Record::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.ip)
}

// uint32 port = 2;
void Record::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 Record::port() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.port)
  return port_;
}
void Record::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.port)
}

// uint32 protocol = 3;
void Record::clear_protocol() {
  protocol_ = 0u;
}
::google::protobuf::uint32 Record::protocol() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.protocol)
  return protocol_;
}
void Record::set_protocol(::google::protobuf::uint32 value) {
  
  protocol_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.protocol)
}

// uint32 subprotocol = 4;
void Record::clear_subprotocol() {
  subprotocol_ = 0u;
}
::google::protobuf::uint32 Record::subprotocol() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.subprotocol)
  return subprotocol_;
}
void Record::set_subprotocol(::google::protobuf::uint32 value) {
  
  subprotocol_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.subprotocol)
}

// string domain = 5;
void Record::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Record::domain() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.domain)
  return domain_.GetNoArena();
}
void Record::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.Record.domain)
}
#if LANG_CXX11
void Record::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.Record.domain)
}
#endif
void Record::set_domain(const char* value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.Record.domain)
}
void Record::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.Record.domain)
}
::std::string* Record::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.Record.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Record::release_domain() {
  // @@protoc_insertion_point(field_release:censys_definitions.Record.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Record::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Record.domain)
}

// fixed32 timestamp = 6;
void Record::clear_timestamp() {
  timestamp_ = 0u;
}
::google::protobuf::uint32 Record::timestamp() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.timestamp)
  return timestamp_;
}
void Record::set_timestamp(::google::protobuf::uint32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.timestamp)
}

// uint32 scanid = 7;
void Record::clear_scanid() {
  scanid_ = 0u;
}
::google::protobuf::uint32 Record::scanid() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.scanid)
  return scanid_;
}
void Record::set_scanid(::google::protobuf::uint32 value) {
  
  scanid_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.scanid)
}

// bytes sha256fp = 8;
void Record::clear_sha256fp() {
  sha256fp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Record::sha256fp() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.sha256fp)
  return sha256fp_.GetNoArena();
}
void Record::set_sha256fp(const ::std::string& value) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.Record.sha256fp)
}
#if LANG_CXX11
void Record::set_sha256fp(::std::string&& value) {
  
  sha256fp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.Record.sha256fp)
}
#endif
void Record::set_sha256fp(const char* value) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.Record.sha256fp)
}
void Record::set_sha256fp(const void* value, size_t size) {
  
  sha256fp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.Record.sha256fp)
}
::std::string* Record::mutable_sha256fp() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.Record.sha256fp)
  return sha256fp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Record::release_sha256fp() {
  // @@protoc_insertion_point(field_release:censys_definitions.Record.sha256fp)
  
  return sha256fp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Record::set_allocated_sha256fp(::std::string* sha256fp) {
  if (sha256fp != NULL) {
    
  } else {
    
  }
  sha256fp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha256fp);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Record.sha256fp)
}

// uint32 first_seen_at_scan_id = 9;
void Record::clear_first_seen_at_scan_id() {
  first_seen_at_scan_id_ = 0u;
}
::google::protobuf::uint32 Record::first_seen_at_scan_id() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.first_seen_at_scan_id)
  return first_seen_at_scan_id_;
}
void Record::set_first_seen_at_scan_id(::google::protobuf::uint32 value) {
  
  first_seen_at_scan_id_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.first_seen_at_scan_id)
}

// uint32 last_seen_at_scan_id = 10;
void Record::clear_last_seen_at_scan_id() {
  last_seen_at_scan_id_ = 0u;
}
::google::protobuf::uint32 Record::last_seen_at_scan_id() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.last_seen_at_scan_id)
  return last_seen_at_scan_id_;
}
void Record::set_last_seen_at_scan_id(::google::protobuf::uint32 value) {
  
  last_seen_at_scan_id_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.last_seen_at_scan_id)
}

// .censys_definitions.ProtocolAtom atom = 11;
bool Record::has_atom() const {
  return data_oneof_case() == kAtom;
}
void Record::set_has_atom() {
  _oneof_case_[0] = kAtom;
}
void Record::clear_atom() {
  if (has_atom()) {
    delete data_oneof_.atom_;
    clear_has_data_oneof();
  }
}
 const ::censys_definitions::ProtocolAtom& Record::atom() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.atom)
  return has_atom()
      ? *data_oneof_.atom_
      : ::censys_definitions::ProtocolAtom::default_instance();
}
::censys_definitions::ProtocolAtom* Record::mutable_atom() {
  if (!has_atom()) {
    clear_data_oneof();
    set_has_atom();
    data_oneof_.atom_ = new ::censys_definitions::ProtocolAtom;
  }
  // @@protoc_insertion_point(field_mutable:censys_definitions.Record.atom)
  return data_oneof_.atom_;
}
::censys_definitions::ProtocolAtom* Record::release_atom() {
  // @@protoc_insertion_point(field_release:censys_definitions.Record.atom)
  if (has_atom()) {
    clear_has_data_oneof();
    ::censys_definitions::ProtocolAtom* temp = data_oneof_.atom_;
    data_oneof_.atom_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Record::set_allocated_atom(::censys_definitions::ProtocolAtom* atom) {
  clear_data_oneof();
  if (atom) {
    set_has_atom();
    data_oneof_.atom_ = atom;
  }
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Record.atom)
}

// .censys_definitions.LocationAtom private_location = 12;
bool Record::has_private_location() const {
  return data_oneof_case() == kPrivateLocation;
}
void Record::set_has_private_location() {
  _oneof_case_[0] = kPrivateLocation;
}
void Record::clear_private_location() {
  if (has_private_location()) {
    delete data_oneof_.private_location_;
    clear_has_data_oneof();
  }
}
 const ::censys_definitions::LocationAtom& Record::private_location() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.private_location)
  return has_private_location()
      ? *data_oneof_.private_location_
      : ::censys_definitions::LocationAtom::default_instance();
}
::censys_definitions::LocationAtom* Record::mutable_private_location() {
  if (!has_private_location()) {
    clear_data_oneof();
    set_has_private_location();
    data_oneof_.private_location_ = new ::censys_definitions::LocationAtom;
  }
  // @@protoc_insertion_point(field_mutable:censys_definitions.Record.private_location)
  return data_oneof_.private_location_;
}
::censys_definitions::LocationAtom* Record::release_private_location() {
  // @@protoc_insertion_point(field_release:censys_definitions.Record.private_location)
  if (has_private_location()) {
    clear_has_data_oneof();
    ::censys_definitions::LocationAtom* temp = data_oneof_.private_location_;
    data_oneof_.private_location_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Record::set_allocated_private_location(::censys_definitions::LocationAtom* private_location) {
  clear_data_oneof();
  if (private_location) {
    set_has_private_location();
    data_oneof_.private_location_ = private_location;
  }
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Record.private_location)
}

// .censys_definitions.ASAtom as_atom = 13;
bool Record::has_as_atom() const {
  return data_oneof_case() == kAsAtom;
}
void Record::set_has_as_atom() {
  _oneof_case_[0] = kAsAtom;
}
void Record::clear_as_atom() {
  if (has_as_atom()) {
    delete data_oneof_.as_atom_;
    clear_has_data_oneof();
  }
}
 const ::censys_definitions::ASAtom& Record::as_atom() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.as_atom)
  return has_as_atom()
      ? *data_oneof_.as_atom_
      : ::censys_definitions::ASAtom::default_instance();
}
::censys_definitions::ASAtom* Record::mutable_as_atom() {
  if (!has_as_atom()) {
    clear_data_oneof();
    set_has_as_atom();
    data_oneof_.as_atom_ = new ::censys_definitions::ASAtom;
  }
  // @@protoc_insertion_point(field_mutable:censys_definitions.Record.as_atom)
  return data_oneof_.as_atom_;
}
::censys_definitions::ASAtom* Record::release_as_atom() {
  // @@protoc_insertion_point(field_release:censys_definitions.Record.as_atom)
  if (has_as_atom()) {
    clear_has_data_oneof();
    ::censys_definitions::ASAtom* temp = data_oneof_.as_atom_;
    data_oneof_.as_atom_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Record::set_allocated_as_atom(::censys_definitions::ASAtom* as_atom) {
  clear_data_oneof();
  if (as_atom) {
    set_has_as_atom();
    data_oneof_.as_atom_ = as_atom;
  }
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Record.as_atom)
}

// .censys_definitions.WHOISAtom whois = 14;
bool Record::has_whois() const {
  return data_oneof_case() == kWhois;
}
void Record::set_has_whois() {
  _oneof_case_[0] = kWhois;
}
void Record::clear_whois() {
  if (has_whois()) {
    delete data_oneof_.whois_;
    clear_has_data_oneof();
  }
}
 const ::censys_definitions::WHOISAtom& Record::whois() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.whois)
  return has_whois()
      ? *data_oneof_.whois_
      : ::censys_definitions::WHOISAtom::default_instance();
}
::censys_definitions::WHOISAtom* Record::mutable_whois() {
  if (!has_whois()) {
    clear_data_oneof();
    set_has_whois();
    data_oneof_.whois_ = new ::censys_definitions::WHOISAtom;
  }
  // @@protoc_insertion_point(field_mutable:censys_definitions.Record.whois)
  return data_oneof_.whois_;
}
::censys_definitions::WHOISAtom* Record::release_whois() {
  // @@protoc_insertion_point(field_release:censys_definitions.Record.whois)
  if (has_whois()) {
    clear_has_data_oneof();
    ::censys_definitions::WHOISAtom* temp = data_oneof_.whois_;
    data_oneof_.whois_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Record::set_allocated_whois(::censys_definitions::WHOISAtom* whois) {
  clear_data_oneof();
  if (whois) {
    set_has_whois();
    data_oneof_.whois_ = whois;
  }
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Record.whois)
}

// .censys_definitions.UserdataAtom userdata = 15;
bool Record::has_userdata() const {
  return data_oneof_case() == kUserdata;
}
void Record::set_has_userdata() {
  _oneof_case_[0] = kUserdata;
}
void Record::clear_userdata() {
  if (has_userdata()) {
    delete data_oneof_.userdata_;
    clear_has_data_oneof();
  }
}
 const ::censys_definitions::UserdataAtom& Record::userdata() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.userdata)
  return has_userdata()
      ? *data_oneof_.userdata_
      : ::censys_definitions::UserdataAtom::default_instance();
}
::censys_definitions::UserdataAtom* Record::mutable_userdata() {
  if (!has_userdata()) {
    clear_data_oneof();
    set_has_userdata();
    data_oneof_.userdata_ = new ::censys_definitions::UserdataAtom;
  }
  // @@protoc_insertion_point(field_mutable:censys_definitions.Record.userdata)
  return data_oneof_.userdata_;
}
::censys_definitions::UserdataAtom* Record::release_userdata() {
  // @@protoc_insertion_point(field_release:censys_definitions.Record.userdata)
  if (has_userdata()) {
    clear_has_data_oneof();
    ::censys_definitions::UserdataAtom* temp = data_oneof_.userdata_;
    data_oneof_.userdata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Record::set_allocated_userdata(::censys_definitions::UserdataAtom* userdata) {
  clear_data_oneof();
  if (userdata) {
    set_has_userdata();
    data_oneof_.userdata_ = userdata;
  }
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Record.userdata)
}

// .censys_definitions.LocationAtom public_location = 17;
bool Record::has_public_location() const {
  return data_oneof_case() == kPublicLocation;
}
void Record::set_has_public_location() {
  _oneof_case_[0] = kPublicLocation;
}
void Record::clear_public_location() {
  if (has_public_location()) {
    delete data_oneof_.public_location_;
    clear_has_data_oneof();
  }
}
 const ::censys_definitions::LocationAtom& Record::public_location() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.public_location)
  return has_public_location()
      ? *data_oneof_.public_location_
      : ::censys_definitions::LocationAtom::default_instance();
}
::censys_definitions::LocationAtom* Record::mutable_public_location() {
  if (!has_public_location()) {
    clear_data_oneof();
    set_has_public_location();
    data_oneof_.public_location_ = new ::censys_definitions::LocationAtom;
  }
  // @@protoc_insertion_point(field_mutable:censys_definitions.Record.public_location)
  return data_oneof_.public_location_;
}
::censys_definitions::LocationAtom* Record::release_public_location() {
  // @@protoc_insertion_point(field_release:censys_definitions.Record.public_location)
  if (has_public_location()) {
    clear_has_data_oneof();
    ::censys_definitions::LocationAtom* temp = data_oneof_.public_location_;
    data_oneof_.public_location_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Record::set_allocated_public_location(::censys_definitions::LocationAtom* public_location) {
  clear_data_oneof();
  if (public_location) {
    set_has_public_location();
    data_oneof_.public_location_ = public_location;
  }
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Record.public_location)
}

// uint32 alexa_rank = 16;
bool Record::has_alexa_rank() const {
  return data_oneof_case() == kAlexaRank;
}
void Record::set_has_alexa_rank() {
  _oneof_case_[0] = kAlexaRank;
}
void Record::clear_alexa_rank() {
  if (has_alexa_rank()) {
    data_oneof_.alexa_rank_ = 0u;
    clear_has_data_oneof();
  }
}
::google::protobuf::uint32 Record::alexa_rank() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.alexa_rank)
  if (has_alexa_rank()) {
    return data_oneof_.alexa_rank_;
  }
  return 0u;
}
void Record::set_alexa_rank(::google::protobuf::uint32 value) {
  if (!has_alexa_rank()) {
    clear_data_oneof();
    set_has_alexa_rank();
  }
  data_oneof_.alexa_rank_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.alexa_rank)
}

// uint32 quantcast_rank = 19;
bool Record::has_quantcast_rank() const {
  return data_oneof_case() == kQuantcastRank;
}
void Record::set_has_quantcast_rank() {
  _oneof_case_[0] = kQuantcastRank;
}
void Record::clear_quantcast_rank() {
  if (has_quantcast_rank()) {
    data_oneof_.quantcast_rank_ = 0u;
    clear_has_data_oneof();
  }
}
::google::protobuf::uint32 Record::quantcast_rank() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.quantcast_rank)
  if (has_quantcast_rank()) {
    return data_oneof_.quantcast_rank_;
  }
  return 0u;
}
void Record::set_quantcast_rank(::google::protobuf::uint32 value) {
  if (!has_quantcast_rank()) {
    clear_data_oneof();
    set_has_quantcast_rank();
  }
  data_oneof_.quantcast_rank_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.quantcast_rank)
}

// uint32 cisco_umbrella_rank = 20;
bool Record::has_cisco_umbrella_rank() const {
  return data_oneof_case() == kCiscoUmbrellaRank;
}
void Record::set_has_cisco_umbrella_rank() {
  _oneof_case_[0] = kCiscoUmbrellaRank;
}
void Record::clear_cisco_umbrella_rank() {
  if (has_cisco_umbrella_rank()) {
    data_oneof_.cisco_umbrella_rank_ = 0u;
    clear_has_data_oneof();
  }
}
::google::protobuf::uint32 Record::cisco_umbrella_rank() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.cisco_umbrella_rank)
  if (has_cisco_umbrella_rank()) {
    return data_oneof_.cisco_umbrella_rank_;
  }
  return 0u;
}
void Record::set_cisco_umbrella_rank(::google::protobuf::uint32 value) {
  if (!has_cisco_umbrella_rank()) {
    clear_data_oneof();
    set_has_cisco_umbrella_rank();
  }
  data_oneof_.cisco_umbrella_rank_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.cisco_umbrella_rank)
}

// uint64 version = 18;
void Record::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Record::version() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Record.version)
  return version_;
}
void Record::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Record.version)
}

bool Record::has_data_oneof() const {
  return data_oneof_case() != DATA_ONEOF_NOT_SET;
}
void Record::clear_has_data_oneof() {
  _oneof_case_[0] = DATA_ONEOF_NOT_SET;
}
Record::DataOneofCase Record::data_oneof_case() const {
  return Record::DataOneofCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Delta::kDeltaTypeFieldNumber;
const int Delta::kIpFieldNumber;
const int Delta::kDomainFieldNumber;
const int Delta::kVersionFieldNumber;
const int Delta::kRecordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Delta::Delta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_hoststore_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:censys_definitions.Delta)
}
Delta::Delta(const Delta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      records_(from.records_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  ::memcpy(&delta_type_, &from.delta_type_,
    reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&delta_type_) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:censys_definitions.Delta)
}

void Delta::SharedCtor() {
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&delta_type_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&delta_type_) + sizeof(version_));
  _cached_size_ = 0;
}

Delta::~Delta() {
  // @@protoc_insertion_point(destructor:censys_definitions.Delta)
  SharedDtor();
}

void Delta::SharedDtor() {
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Delta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Delta::descriptor() {
  protobuf_hoststore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hoststore_2eproto::file_level_metadata[5].descriptor;
}

const Delta& Delta::default_instance() {
  protobuf_hoststore_2eproto::InitDefaults();
  return *internal_default_instance();
}

Delta* Delta::New(::google::protobuf::Arena* arena) const {
  Delta* n = new Delta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Delta::Clear() {
// @@protoc_insertion_point(message_clear_start:censys_definitions.Delta)
  records_.Clear();
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&delta_type_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&delta_type_) + sizeof(version_));
}

bool Delta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:censys_definitions.Delta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .censys_definitions.DeltaType delta_type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_delta_type(static_cast< ::censys_definitions::DeltaType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 ip = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "censys_definitions.Delta.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 version = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .censys_definitions.Record records = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:censys_definitions.Delta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:censys_definitions.Delta)
  return false;
#undef DO_
}

void Delta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:censys_definitions.Delta)
  // .censys_definitions.DeltaType delta_type = 1;
  if (this->delta_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->delta_type(), output);
  }

  // fixed32 ip = 2;
  if (this->ip() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ip(), output);
  }

  // string domain = 3;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.Delta.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->domain(), output);
  }

  // uint64 version = 4;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->version(), output);
  }

  // repeated .censys_definitions.Record records = 5;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->records(i), output);
  }

  // @@protoc_insertion_point(serialize_end:censys_definitions.Delta)
}

::google::protobuf::uint8* Delta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:censys_definitions.Delta)
  // .censys_definitions.DeltaType delta_type = 1;
  if (this->delta_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->delta_type(), target);
  }

  // fixed32 ip = 2;
  if (this->ip() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ip(), target);
  }

  // string domain = 3;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "censys_definitions.Delta.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }

  // uint64 version = 4;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->version(), target);
  }

  // repeated .censys_definitions.Record records = 5;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->records(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:censys_definitions.Delta)
  return target;
}

size_t Delta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:censys_definitions.Delta)
  size_t total_size = 0;

  // repeated .censys_definitions.Record records = 5;
  {
    unsigned int count = this->records_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->records(i));
    }
  }

  // string domain = 3;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // .censys_definitions.DeltaType delta_type = 1;
  if (this->delta_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->delta_type());
  }

  // fixed32 ip = 2;
  if (this->ip() != 0) {
    total_size += 1 + 4;
  }

  // uint64 version = 4;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Delta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:censys_definitions.Delta)
  GOOGLE_DCHECK_NE(&from, this);
  const Delta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Delta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:censys_definitions.Delta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:censys_definitions.Delta)
    MergeFrom(*source);
  }
}

void Delta::MergeFrom(const Delta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:censys_definitions.Delta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  records_.MergeFrom(from.records_);
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.delta_type() != 0) {
    set_delta_type(from.delta_type());
  }
  if (from.ip() != 0) {
    set_ip(from.ip());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void Delta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:censys_definitions.Delta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Delta::CopyFrom(const Delta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:censys_definitions.Delta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Delta::IsInitialized() const {
  return true;
}

void Delta::Swap(Delta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Delta::InternalSwap(Delta* other) {
  records_.UnsafeArenaSwap(&other->records_);
  domain_.Swap(&other->domain_);
  std::swap(delta_type_, other->delta_type_);
  std::swap(ip_, other->ip_);
  std::swap(version_, other->version_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Delta::GetMetadata() const {
  protobuf_hoststore_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_hoststore_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Delta

// .censys_definitions.DeltaType delta_type = 1;
void Delta::clear_delta_type() {
  delta_type_ = 0;
}
::censys_definitions::DeltaType Delta::delta_type() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Delta.delta_type)
  return static_cast< ::censys_definitions::DeltaType >(delta_type_);
}
void Delta::set_delta_type(::censys_definitions::DeltaType value) {
  
  delta_type_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Delta.delta_type)
}

// fixed32 ip = 2;
void Delta::clear_ip() {
  ip_ = 0u;
}
::google::protobuf::uint32 Delta::ip() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Delta.ip)
  return ip_;
}
void Delta::set_ip(::google::protobuf::uint32 value) {
  
  ip_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Delta.ip)
}

// string domain = 3;
void Delta::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Delta::domain() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Delta.domain)
  return domain_.GetNoArena();
}
void Delta::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.Delta.domain)
}
#if LANG_CXX11
void Delta::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.Delta.domain)
}
#endif
void Delta::set_domain(const char* value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.Delta.domain)
}
void Delta::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.Delta.domain)
}
::std::string* Delta::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.Delta.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Delta::release_domain() {
  // @@protoc_insertion_point(field_release:censys_definitions.Delta.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Delta::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.Delta.domain)
}

// uint64 version = 4;
void Delta::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Delta::version() const {
  // @@protoc_insertion_point(field_get:censys_definitions.Delta.version)
  return version_;
}
void Delta::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.Delta.version)
}

// repeated .censys_definitions.Record records = 5;
int Delta::records_size() const {
  return records_.size();
}
void Delta::clear_records() {
  records_.Clear();
}
const ::censys_definitions::Record& Delta::records(int index) const {
  // @@protoc_insertion_point(field_get:censys_definitions.Delta.records)
  return records_.Get(index);
}
::censys_definitions::Record* Delta::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:censys_definitions.Delta.records)
  return records_.Mutable(index);
}
::censys_definitions::Record* Delta::add_records() {
  // @@protoc_insertion_point(field_add:censys_definitions.Delta.records)
  return records_.Add();
}
::google::protobuf::RepeatedPtrField< ::censys_definitions::Record >*
Delta::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:censys_definitions.Delta.records)
  return &records_;
}
const ::google::protobuf::RepeatedPtrField< ::censys_definitions::Record >&
Delta::records() const {
  // @@protoc_insertion_point(field_list:censys_definitions.Delta.records)
  return records_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace censys_definitions

// @@protoc_insertion_point(global_scope)
