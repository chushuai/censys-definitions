// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pubkey.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pubkey.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace censys_definitions {
class RSACryptographicKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RSACryptographicKey> {
} _RSACryptographicKey_default_instance_;
class DSACryptographicKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DSACryptographicKey> {
} _DSACryptographicKey_default_instance_;
class ECCCryptographicKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ECCCryptographicKey> {
} _ECCCryptographicKey_default_instance_;
class CryptographicKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CryptographicKey> {
  public:
  const ::censys_definitions::RSACryptographicKey* rsa_;
  const ::censys_definitions::DSACryptographicKey* dsa_;
  const ::censys_definitions::ECCCryptographicKey* ecc_;
} _CryptographicKey_default_instance_;

namespace protobuf_pubkey_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSACryptographicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSACryptographicKey, modulus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSACryptographicKey, exponent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSACryptographicKey, p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSACryptographicKey, q_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSACryptographicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSACryptographicKey, p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSACryptographicKey, q_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSACryptographicKey, g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSACryptographicKey, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSACryptographicKey, x_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECCCryptographicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECCCryptographicKey, curve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECCCryptographicKey, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECCCryptographicKey, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECCCryptographicKey, private__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptographicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptographicKey, _oneof_case_[0]),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptographicKey, type_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CryptographicKey_default_instance_), rsa_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CryptographicKey_default_instance_), dsa_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CryptographicKey_default_instance_), ecc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptographicKey, broken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptographicKey, common_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptographicKey, debian_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CryptographicKey, key_oneof_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(RSACryptographicKey)},
  { 8, -1, sizeof(DSACryptographicKey)},
  { 17, -1, sizeof(ECCCryptographicKey)},
  { 25, -1, sizeof(CryptographicKey)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RSACryptographicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DSACryptographicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ECCCryptographicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CryptographicKey_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "pubkey.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _RSACryptographicKey_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _DSACryptographicKey_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ECCCryptographicKey_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CryptographicKey_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::censys_definitions::protobuf_common_2eproto::InitDefaults();
  _RSACryptographicKey_default_instance_.DefaultConstruct();
  _DSACryptographicKey_default_instance_.DefaultConstruct();
  _ECCCryptographicKey_default_instance_.DefaultConstruct();
  _CryptographicKey_default_instance_.DefaultConstruct();
  _CryptographicKey_default_instance_.rsa_ = const_cast< ::censys_definitions::RSACryptographicKey*>(
      ::censys_definitions::RSACryptographicKey::internal_default_instance());
  _CryptographicKey_default_instance_.dsa_ = const_cast< ::censys_definitions::DSACryptographicKey*>(
      ::censys_definitions::DSACryptographicKey::internal_default_instance());
  _CryptographicKey_default_instance_.ecc_ = const_cast< ::censys_definitions::ECCCryptographicKey*>(
      ::censys_definitions::ECCCryptographicKey::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014pubkey.proto\022\022censys_definitions\032\014comm"
      "on.proto\"N\n\023RSACryptographicKey\022\017\n\007modul"
      "us\030\001 \001(\014\022\020\n\010exponent\030\002 \001(\014\022\t\n\001p\030\003 \001(\014\022\t\n"
      "\001q\030\004 \001(\014\"L\n\023DSACryptographicKey\022\t\n\001p\030\001 \001"
      "(\014\022\t\n\001q\030\002 \001(\014\022\t\n\001g\030\003 \001(\014\022\t\n\001y\030\004 \001(\014\022\t\n\001x"
      "\030\005 \001(\014\"K\n\023ECCCryptographicKey\022\r\n\005curve\030\001"
      " \001(\r\022\t\n\001x\030\002 \001(\014\022\t\n\001y\030\003 \001(\014\022\017\n\007private\030\004 "
      "\001(\014\"\364\002\n\020CryptographicKey\022:\n\004type\030\001 \001(\0162,"
      ".censys_definitions.CryptographicKey.Key"
      "Type\0226\n\003rsa\030\002 \001(\0132\'.censys_definitions.R"
      "SACryptographicKeyH\000\0226\n\003dsa\030\003 \001(\0132\'.cens"
      "ys_definitions.DSACryptographicKeyH\000\0226\n\003"
      "ecc\030\004 \001(\0132\'.censys_definitions.ECCCrypto"
      "graphicKeyH\000\022\016\n\006broken\030\005 \001(\010\022\016\n\006common\030\006"
      " \001(\010\022\016\n\006debian\030\007 \001(\010\"\?\n\007KeyType\022\014\n\010RESER"
      "VED\020\000\022\013\n\007UNKNOWN\020\001\022\007\n\003RSA\020\002\022\007\n\003DSA\020\003\022\007\n\003"
      "ECC\020\004B\013\n\tkey_oneofb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 666);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pubkey.proto", &protobuf_RegisterTypes);
  ::censys_definitions::protobuf_common_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_pubkey_2eproto

const ::google::protobuf::EnumDescriptor* CryptographicKey_KeyType_descriptor() {
  protobuf_pubkey_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pubkey_2eproto::file_level_enum_descriptors[0];
}
bool CryptographicKey_KeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CryptographicKey_KeyType CryptographicKey::RESERVED;
const CryptographicKey_KeyType CryptographicKey::UNKNOWN;
const CryptographicKey_KeyType CryptographicKey::RSA;
const CryptographicKey_KeyType CryptographicKey::DSA;
const CryptographicKey_KeyType CryptographicKey::ECC;
const CryptographicKey_KeyType CryptographicKey::KeyType_MIN;
const CryptographicKey_KeyType CryptographicKey::KeyType_MAX;
const int CryptographicKey::KeyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RSACryptographicKey::kModulusFieldNumber;
const int RSACryptographicKey::kExponentFieldNumber;
const int RSACryptographicKey::kPFieldNumber;
const int RSACryptographicKey::kQFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RSACryptographicKey::RSACryptographicKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pubkey_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:censys_definitions.RSACryptographicKey)
}
RSACryptographicKey::RSACryptographicKey(const RSACryptographicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modulus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modulus().size() > 0) {
    modulus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modulus_);
  }
  exponent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exponent().size() > 0) {
    exponent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exponent_);
  }
  p_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.p().size() > 0) {
    p_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.p_);
  }
  q_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.q().size() > 0) {
    q_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.q_);
  }
  // @@protoc_insertion_point(copy_constructor:censys_definitions.RSACryptographicKey)
}

void RSACryptographicKey::SharedCtor() {
  modulus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exponent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  p_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  q_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RSACryptographicKey::~RSACryptographicKey() {
  // @@protoc_insertion_point(destructor:censys_definitions.RSACryptographicKey)
  SharedDtor();
}

void RSACryptographicKey::SharedDtor() {
  modulus_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exponent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  p_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  q_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RSACryptographicKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSACryptographicKey::descriptor() {
  protobuf_pubkey_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pubkey_2eproto::file_level_metadata[0].descriptor;
}

const RSACryptographicKey& RSACryptographicKey::default_instance() {
  protobuf_pubkey_2eproto::InitDefaults();
  return *internal_default_instance();
}

RSACryptographicKey* RSACryptographicKey::New(::google::protobuf::Arena* arena) const {
  RSACryptographicKey* n = new RSACryptographicKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RSACryptographicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:censys_definitions.RSACryptographicKey)
  modulus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exponent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  p_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  q_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RSACryptographicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:censys_definitions.RSACryptographicKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes modulus = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_modulus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes exponent = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_exponent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes p = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes q = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_q()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:censys_definitions.RSACryptographicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:censys_definitions.RSACryptographicKey)
  return false;
#undef DO_
}

void RSACryptographicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:censys_definitions.RSACryptographicKey)
  // bytes modulus = 1;
  if (this->modulus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->modulus(), output);
  }

  // bytes exponent = 2;
  if (this->exponent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->exponent(), output);
  }

  // bytes p = 3;
  if (this->p().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->p(), output);
  }

  // bytes q = 4;
  if (this->q().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->q(), output);
  }

  // @@protoc_insertion_point(serialize_end:censys_definitions.RSACryptographicKey)
}

::google::protobuf::uint8* RSACryptographicKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:censys_definitions.RSACryptographicKey)
  // bytes modulus = 1;
  if (this->modulus().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->modulus(), target);
  }

  // bytes exponent = 2;
  if (this->exponent().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->exponent(), target);
  }

  // bytes p = 3;
  if (this->p().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->p(), target);
  }

  // bytes q = 4;
  if (this->q().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->q(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:censys_definitions.RSACryptographicKey)
  return target;
}

size_t RSACryptographicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:censys_definitions.RSACryptographicKey)
  size_t total_size = 0;

  // bytes modulus = 1;
  if (this->modulus().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->modulus());
  }

  // bytes exponent = 2;
  if (this->exponent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->exponent());
  }

  // bytes p = 3;
  if (this->p().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->p());
  }

  // bytes q = 4;
  if (this->q().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->q());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSACryptographicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:censys_definitions.RSACryptographicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const RSACryptographicKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RSACryptographicKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:censys_definitions.RSACryptographicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:censys_definitions.RSACryptographicKey)
    MergeFrom(*source);
  }
}

void RSACryptographicKey::MergeFrom(const RSACryptographicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:censys_definitions.RSACryptographicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.modulus().size() > 0) {

    modulus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modulus_);
  }
  if (from.exponent().size() > 0) {

    exponent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exponent_);
  }
  if (from.p().size() > 0) {

    p_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.p_);
  }
  if (from.q().size() > 0) {

    q_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.q_);
  }
}

void RSACryptographicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:censys_definitions.RSACryptographicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSACryptographicKey::CopyFrom(const RSACryptographicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:censys_definitions.RSACryptographicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSACryptographicKey::IsInitialized() const {
  return true;
}

void RSACryptographicKey::Swap(RSACryptographicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RSACryptographicKey::InternalSwap(RSACryptographicKey* other) {
  modulus_.Swap(&other->modulus_);
  exponent_.Swap(&other->exponent_);
  p_.Swap(&other->p_);
  q_.Swap(&other->q_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RSACryptographicKey::GetMetadata() const {
  protobuf_pubkey_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pubkey_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RSACryptographicKey

// bytes modulus = 1;
void RSACryptographicKey::clear_modulus() {
  modulus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RSACryptographicKey::modulus() const {
  // @@protoc_insertion_point(field_get:censys_definitions.RSACryptographicKey.modulus)
  return modulus_.GetNoArena();
}
void RSACryptographicKey::set_modulus(const ::std::string& value) {
  
  modulus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.RSACryptographicKey.modulus)
}
#if LANG_CXX11
void RSACryptographicKey::set_modulus(::std::string&& value) {
  
  modulus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.RSACryptographicKey.modulus)
}
#endif
void RSACryptographicKey::set_modulus(const char* value) {
  
  modulus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.RSACryptographicKey.modulus)
}
void RSACryptographicKey::set_modulus(const void* value, size_t size) {
  
  modulus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.RSACryptographicKey.modulus)
}
::std::string* RSACryptographicKey::mutable_modulus() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.RSACryptographicKey.modulus)
  return modulus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RSACryptographicKey::release_modulus() {
  // @@protoc_insertion_point(field_release:censys_definitions.RSACryptographicKey.modulus)
  
  return modulus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RSACryptographicKey::set_allocated_modulus(::std::string* modulus) {
  if (modulus != NULL) {
    
  } else {
    
  }
  modulus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modulus);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.RSACryptographicKey.modulus)
}

// bytes exponent = 2;
void RSACryptographicKey::clear_exponent() {
  exponent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RSACryptographicKey::exponent() const {
  // @@protoc_insertion_point(field_get:censys_definitions.RSACryptographicKey.exponent)
  return exponent_.GetNoArena();
}
void RSACryptographicKey::set_exponent(const ::std::string& value) {
  
  exponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.RSACryptographicKey.exponent)
}
#if LANG_CXX11
void RSACryptographicKey::set_exponent(::std::string&& value) {
  
  exponent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.RSACryptographicKey.exponent)
}
#endif
void RSACryptographicKey::set_exponent(const char* value) {
  
  exponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.RSACryptographicKey.exponent)
}
void RSACryptographicKey::set_exponent(const void* value, size_t size) {
  
  exponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.RSACryptographicKey.exponent)
}
::std::string* RSACryptographicKey::mutable_exponent() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.RSACryptographicKey.exponent)
  return exponent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RSACryptographicKey::release_exponent() {
  // @@protoc_insertion_point(field_release:censys_definitions.RSACryptographicKey.exponent)
  
  return exponent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RSACryptographicKey::set_allocated_exponent(::std::string* exponent) {
  if (exponent != NULL) {
    
  } else {
    
  }
  exponent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exponent);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.RSACryptographicKey.exponent)
}

// bytes p = 3;
void RSACryptographicKey::clear_p() {
  p_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RSACryptographicKey::p() const {
  // @@protoc_insertion_point(field_get:censys_definitions.RSACryptographicKey.p)
  return p_.GetNoArena();
}
void RSACryptographicKey::set_p(const ::std::string& value) {
  
  p_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.RSACryptographicKey.p)
}
#if LANG_CXX11
void RSACryptographicKey::set_p(::std::string&& value) {
  
  p_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.RSACryptographicKey.p)
}
#endif
void RSACryptographicKey::set_p(const char* value) {
  
  p_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.RSACryptographicKey.p)
}
void RSACryptographicKey::set_p(const void* value, size_t size) {
  
  p_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.RSACryptographicKey.p)
}
::std::string* RSACryptographicKey::mutable_p() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.RSACryptographicKey.p)
  return p_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RSACryptographicKey::release_p() {
  // @@protoc_insertion_point(field_release:censys_definitions.RSACryptographicKey.p)
  
  return p_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RSACryptographicKey::set_allocated_p(::std::string* p) {
  if (p != NULL) {
    
  } else {
    
  }
  p_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), p);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.RSACryptographicKey.p)
}

// bytes q = 4;
void RSACryptographicKey::clear_q() {
  q_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RSACryptographicKey::q() const {
  // @@protoc_insertion_point(field_get:censys_definitions.RSACryptographicKey.q)
  return q_.GetNoArena();
}
void RSACryptographicKey::set_q(const ::std::string& value) {
  
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.RSACryptographicKey.q)
}
#if LANG_CXX11
void RSACryptographicKey::set_q(::std::string&& value) {
  
  q_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.RSACryptographicKey.q)
}
#endif
void RSACryptographicKey::set_q(const char* value) {
  
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.RSACryptographicKey.q)
}
void RSACryptographicKey::set_q(const void* value, size_t size) {
  
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.RSACryptographicKey.q)
}
::std::string* RSACryptographicKey::mutable_q() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.RSACryptographicKey.q)
  return q_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RSACryptographicKey::release_q() {
  // @@protoc_insertion_point(field_release:censys_definitions.RSACryptographicKey.q)
  
  return q_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RSACryptographicKey::set_allocated_q(::std::string* q) {
  if (q != NULL) {
    
  } else {
    
  }
  q_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), q);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.RSACryptographicKey.q)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DSACryptographicKey::kPFieldNumber;
const int DSACryptographicKey::kQFieldNumber;
const int DSACryptographicKey::kGFieldNumber;
const int DSACryptographicKey::kYFieldNumber;
const int DSACryptographicKey::kXFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DSACryptographicKey::DSACryptographicKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pubkey_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:censys_definitions.DSACryptographicKey)
}
DSACryptographicKey::DSACryptographicKey(const DSACryptographicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  p_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.p().size() > 0) {
    p_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.p_);
  }
  q_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.q().size() > 0) {
    q_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.q_);
  }
  g_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.g().size() > 0) {
    g_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_);
  }
  y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.y().size() > 0) {
    y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.y_);
  }
  x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.x().size() > 0) {
    x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x_);
  }
  // @@protoc_insertion_point(copy_constructor:censys_definitions.DSACryptographicKey)
}

void DSACryptographicKey::SharedCtor() {
  p_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  q_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DSACryptographicKey::~DSACryptographicKey() {
  // @@protoc_insertion_point(destructor:censys_definitions.DSACryptographicKey)
  SharedDtor();
}

void DSACryptographicKey::SharedDtor() {
  p_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  q_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  y_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DSACryptographicKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DSACryptographicKey::descriptor() {
  protobuf_pubkey_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pubkey_2eproto::file_level_metadata[1].descriptor;
}

const DSACryptographicKey& DSACryptographicKey::default_instance() {
  protobuf_pubkey_2eproto::InitDefaults();
  return *internal_default_instance();
}

DSACryptographicKey* DSACryptographicKey::New(::google::protobuf::Arena* arena) const {
  DSACryptographicKey* n = new DSACryptographicKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DSACryptographicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:censys_definitions.DSACryptographicKey)
  p_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  q_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  g_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DSACryptographicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:censys_definitions.DSACryptographicKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes p = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_p()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes q = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_q()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes g = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_g()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes y = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes x = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:censys_definitions.DSACryptographicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:censys_definitions.DSACryptographicKey)
  return false;
#undef DO_
}

void DSACryptographicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:censys_definitions.DSACryptographicKey)
  // bytes p = 1;
  if (this->p().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->p(), output);
  }

  // bytes q = 2;
  if (this->q().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->q(), output);
  }

  // bytes g = 3;
  if (this->g().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->g(), output);
  }

  // bytes y = 4;
  if (this->y().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->y(), output);
  }

  // bytes x = 5;
  if (this->x().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->x(), output);
  }

  // @@protoc_insertion_point(serialize_end:censys_definitions.DSACryptographicKey)
}

::google::protobuf::uint8* DSACryptographicKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:censys_definitions.DSACryptographicKey)
  // bytes p = 1;
  if (this->p().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->p(), target);
  }

  // bytes q = 2;
  if (this->q().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->q(), target);
  }

  // bytes g = 3;
  if (this->g().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->g(), target);
  }

  // bytes y = 4;
  if (this->y().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->y(), target);
  }

  // bytes x = 5;
  if (this->x().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->x(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:censys_definitions.DSACryptographicKey)
  return target;
}

size_t DSACryptographicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:censys_definitions.DSACryptographicKey)
  size_t total_size = 0;

  // bytes p = 1;
  if (this->p().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->p());
  }

  // bytes q = 2;
  if (this->q().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->q());
  }

  // bytes g = 3;
  if (this->g().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->g());
  }

  // bytes y = 4;
  if (this->y().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->y());
  }

  // bytes x = 5;
  if (this->x().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->x());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DSACryptographicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:censys_definitions.DSACryptographicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const DSACryptographicKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DSACryptographicKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:censys_definitions.DSACryptographicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:censys_definitions.DSACryptographicKey)
    MergeFrom(*source);
  }
}

void DSACryptographicKey::MergeFrom(const DSACryptographicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:censys_definitions.DSACryptographicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.p().size() > 0) {

    p_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.p_);
  }
  if (from.q().size() > 0) {

    q_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.q_);
  }
  if (from.g().size() > 0) {

    g_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.g_);
  }
  if (from.y().size() > 0) {

    y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.y_);
  }
  if (from.x().size() > 0) {

    x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x_);
  }
}

void DSACryptographicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:censys_definitions.DSACryptographicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DSACryptographicKey::CopyFrom(const DSACryptographicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:censys_definitions.DSACryptographicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSACryptographicKey::IsInitialized() const {
  return true;
}

void DSACryptographicKey::Swap(DSACryptographicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DSACryptographicKey::InternalSwap(DSACryptographicKey* other) {
  p_.Swap(&other->p_);
  q_.Swap(&other->q_);
  g_.Swap(&other->g_);
  y_.Swap(&other->y_);
  x_.Swap(&other->x_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DSACryptographicKey::GetMetadata() const {
  protobuf_pubkey_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pubkey_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DSACryptographicKey

// bytes p = 1;
void DSACryptographicKey::clear_p() {
  p_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DSACryptographicKey::p() const {
  // @@protoc_insertion_point(field_get:censys_definitions.DSACryptographicKey.p)
  return p_.GetNoArena();
}
void DSACryptographicKey::set_p(const ::std::string& value) {
  
  p_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.DSACryptographicKey.p)
}
#if LANG_CXX11
void DSACryptographicKey::set_p(::std::string&& value) {
  
  p_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.DSACryptographicKey.p)
}
#endif
void DSACryptographicKey::set_p(const char* value) {
  
  p_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.DSACryptographicKey.p)
}
void DSACryptographicKey::set_p(const void* value, size_t size) {
  
  p_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.DSACryptographicKey.p)
}
::std::string* DSACryptographicKey::mutable_p() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.DSACryptographicKey.p)
  return p_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DSACryptographicKey::release_p() {
  // @@protoc_insertion_point(field_release:censys_definitions.DSACryptographicKey.p)
  
  return p_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DSACryptographicKey::set_allocated_p(::std::string* p) {
  if (p != NULL) {
    
  } else {
    
  }
  p_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), p);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.DSACryptographicKey.p)
}

// bytes q = 2;
void DSACryptographicKey::clear_q() {
  q_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DSACryptographicKey::q() const {
  // @@protoc_insertion_point(field_get:censys_definitions.DSACryptographicKey.q)
  return q_.GetNoArena();
}
void DSACryptographicKey::set_q(const ::std::string& value) {
  
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.DSACryptographicKey.q)
}
#if LANG_CXX11
void DSACryptographicKey::set_q(::std::string&& value) {
  
  q_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.DSACryptographicKey.q)
}
#endif
void DSACryptographicKey::set_q(const char* value) {
  
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.DSACryptographicKey.q)
}
void DSACryptographicKey::set_q(const void* value, size_t size) {
  
  q_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.DSACryptographicKey.q)
}
::std::string* DSACryptographicKey::mutable_q() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.DSACryptographicKey.q)
  return q_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DSACryptographicKey::release_q() {
  // @@protoc_insertion_point(field_release:censys_definitions.DSACryptographicKey.q)
  
  return q_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DSACryptographicKey::set_allocated_q(::std::string* q) {
  if (q != NULL) {
    
  } else {
    
  }
  q_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), q);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.DSACryptographicKey.q)
}

// bytes g = 3;
void DSACryptographicKey::clear_g() {
  g_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DSACryptographicKey::g() const {
  // @@protoc_insertion_point(field_get:censys_definitions.DSACryptographicKey.g)
  return g_.GetNoArena();
}
void DSACryptographicKey::set_g(const ::std::string& value) {
  
  g_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.DSACryptographicKey.g)
}
#if LANG_CXX11
void DSACryptographicKey::set_g(::std::string&& value) {
  
  g_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.DSACryptographicKey.g)
}
#endif
void DSACryptographicKey::set_g(const char* value) {
  
  g_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.DSACryptographicKey.g)
}
void DSACryptographicKey::set_g(const void* value, size_t size) {
  
  g_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.DSACryptographicKey.g)
}
::std::string* DSACryptographicKey::mutable_g() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.DSACryptographicKey.g)
  return g_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DSACryptographicKey::release_g() {
  // @@protoc_insertion_point(field_release:censys_definitions.DSACryptographicKey.g)
  
  return g_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DSACryptographicKey::set_allocated_g(::std::string* g) {
  if (g != NULL) {
    
  } else {
    
  }
  g_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), g);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.DSACryptographicKey.g)
}

// bytes y = 4;
void DSACryptographicKey::clear_y() {
  y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DSACryptographicKey::y() const {
  // @@protoc_insertion_point(field_get:censys_definitions.DSACryptographicKey.y)
  return y_.GetNoArena();
}
void DSACryptographicKey::set_y(const ::std::string& value) {
  
  y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.DSACryptographicKey.y)
}
#if LANG_CXX11
void DSACryptographicKey::set_y(::std::string&& value) {
  
  y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.DSACryptographicKey.y)
}
#endif
void DSACryptographicKey::set_y(const char* value) {
  
  y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.DSACryptographicKey.y)
}
void DSACryptographicKey::set_y(const void* value, size_t size) {
  
  y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.DSACryptographicKey.y)
}
::std::string* DSACryptographicKey::mutable_y() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.DSACryptographicKey.y)
  return y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DSACryptographicKey::release_y() {
  // @@protoc_insertion_point(field_release:censys_definitions.DSACryptographicKey.y)
  
  return y_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DSACryptographicKey::set_allocated_y(::std::string* y) {
  if (y != NULL) {
    
  } else {
    
  }
  y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), y);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.DSACryptographicKey.y)
}

// bytes x = 5;
void DSACryptographicKey::clear_x() {
  x_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DSACryptographicKey::x() const {
  // @@protoc_insertion_point(field_get:censys_definitions.DSACryptographicKey.x)
  return x_.GetNoArena();
}
void DSACryptographicKey::set_x(const ::std::string& value) {
  
  x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.DSACryptographicKey.x)
}
#if LANG_CXX11
void DSACryptographicKey::set_x(::std::string&& value) {
  
  x_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.DSACryptographicKey.x)
}
#endif
void DSACryptographicKey::set_x(const char* value) {
  
  x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.DSACryptographicKey.x)
}
void DSACryptographicKey::set_x(const void* value, size_t size) {
  
  x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.DSACryptographicKey.x)
}
::std::string* DSACryptographicKey::mutable_x() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.DSACryptographicKey.x)
  return x_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DSACryptographicKey::release_x() {
  // @@protoc_insertion_point(field_release:censys_definitions.DSACryptographicKey.x)
  
  return x_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DSACryptographicKey::set_allocated_x(::std::string* x) {
  if (x != NULL) {
    
  } else {
    
  }
  x_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), x);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.DSACryptographicKey.x)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ECCCryptographicKey::kCurveFieldNumber;
const int ECCCryptographicKey::kXFieldNumber;
const int ECCCryptographicKey::kYFieldNumber;
const int ECCCryptographicKey::kPrivateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ECCCryptographicKey::ECCCryptographicKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pubkey_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:censys_definitions.ECCCryptographicKey)
}
ECCCryptographicKey::ECCCryptographicKey(const ECCCryptographicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.x().size() > 0) {
    x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x_);
  }
  y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.y().size() > 0) {
    y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.y_);
  }
  private__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.private_().size() > 0) {
    private__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private__);
  }
  curve_ = from.curve_;
  // @@protoc_insertion_point(copy_constructor:censys_definitions.ECCCryptographicKey)
}

void ECCCryptographicKey::SharedCtor() {
  x_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  y_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curve_ = 0u;
  _cached_size_ = 0;
}

ECCCryptographicKey::~ECCCryptographicKey() {
  // @@protoc_insertion_point(destructor:censys_definitions.ECCCryptographicKey)
  SharedDtor();
}

void ECCCryptographicKey::SharedDtor() {
  x_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  y_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ECCCryptographicKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ECCCryptographicKey::descriptor() {
  protobuf_pubkey_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pubkey_2eproto::file_level_metadata[2].descriptor;
}

const ECCCryptographicKey& ECCCryptographicKey::default_instance() {
  protobuf_pubkey_2eproto::InitDefaults();
  return *internal_default_instance();
}

ECCCryptographicKey* ECCCryptographicKey::New(::google::protobuf::Arena* arena) const {
  ECCCryptographicKey* n = new ECCCryptographicKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ECCCryptographicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:censys_definitions.ECCCryptographicKey)
  x_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curve_ = 0u;
}

bool ECCCryptographicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:censys_definitions.ECCCryptographicKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 curve = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes x = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes y = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes private = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_private_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:censys_definitions.ECCCryptographicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:censys_definitions.ECCCryptographicKey)
  return false;
#undef DO_
}

void ECCCryptographicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:censys_definitions.ECCCryptographicKey)
  // uint32 curve = 1;
  if (this->curve() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curve(), output);
  }

  // bytes x = 2;
  if (this->x().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->x(), output);
  }

  // bytes y = 3;
  if (this->y().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->y(), output);
  }

  // bytes private = 4;
  if (this->private_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->private_(), output);
  }

  // @@protoc_insertion_point(serialize_end:censys_definitions.ECCCryptographicKey)
}

::google::protobuf::uint8* ECCCryptographicKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:censys_definitions.ECCCryptographicKey)
  // uint32 curve = 1;
  if (this->curve() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curve(), target);
  }

  // bytes x = 2;
  if (this->x().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->x(), target);
  }

  // bytes y = 3;
  if (this->y().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->y(), target);
  }

  // bytes private = 4;
  if (this->private_().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->private_(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:censys_definitions.ECCCryptographicKey)
  return target;
}

size_t ECCCryptographicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:censys_definitions.ECCCryptographicKey)
  size_t total_size = 0;

  // bytes x = 2;
  if (this->x().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->x());
  }

  // bytes y = 3;
  if (this->y().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->y());
  }

  // bytes private = 4;
  if (this->private_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->private_());
  }

  // uint32 curve = 1;
  if (this->curve() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curve());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ECCCryptographicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:censys_definitions.ECCCryptographicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ECCCryptographicKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ECCCryptographicKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:censys_definitions.ECCCryptographicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:censys_definitions.ECCCryptographicKey)
    MergeFrom(*source);
  }
}

void ECCCryptographicKey::MergeFrom(const ECCCryptographicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:censys_definitions.ECCCryptographicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.x().size() > 0) {

    x_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x_);
  }
  if (from.y().size() > 0) {

    y_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.y_);
  }
  if (from.private_().size() > 0) {

    private__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private__);
  }
  if (from.curve() != 0) {
    set_curve(from.curve());
  }
}

void ECCCryptographicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:censys_definitions.ECCCryptographicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ECCCryptographicKey::CopyFrom(const ECCCryptographicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:censys_definitions.ECCCryptographicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECCCryptographicKey::IsInitialized() const {
  return true;
}

void ECCCryptographicKey::Swap(ECCCryptographicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ECCCryptographicKey::InternalSwap(ECCCryptographicKey* other) {
  x_.Swap(&other->x_);
  y_.Swap(&other->y_);
  private__.Swap(&other->private__);
  std::swap(curve_, other->curve_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ECCCryptographicKey::GetMetadata() const {
  protobuf_pubkey_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pubkey_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ECCCryptographicKey

// uint32 curve = 1;
void ECCCryptographicKey::clear_curve() {
  curve_ = 0u;
}
::google::protobuf::uint32 ECCCryptographicKey::curve() const {
  // @@protoc_insertion_point(field_get:censys_definitions.ECCCryptographicKey.curve)
  return curve_;
}
void ECCCryptographicKey::set_curve(::google::protobuf::uint32 value) {
  
  curve_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.ECCCryptographicKey.curve)
}

// bytes x = 2;
void ECCCryptographicKey::clear_x() {
  x_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ECCCryptographicKey::x() const {
  // @@protoc_insertion_point(field_get:censys_definitions.ECCCryptographicKey.x)
  return x_.GetNoArena();
}
void ECCCryptographicKey::set_x(const ::std::string& value) {
  
  x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.ECCCryptographicKey.x)
}
#if LANG_CXX11
void ECCCryptographicKey::set_x(::std::string&& value) {
  
  x_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.ECCCryptographicKey.x)
}
#endif
void ECCCryptographicKey::set_x(const char* value) {
  
  x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.ECCCryptographicKey.x)
}
void ECCCryptographicKey::set_x(const void* value, size_t size) {
  
  x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.ECCCryptographicKey.x)
}
::std::string* ECCCryptographicKey::mutable_x() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.ECCCryptographicKey.x)
  return x_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ECCCryptographicKey::release_x() {
  // @@protoc_insertion_point(field_release:censys_definitions.ECCCryptographicKey.x)
  
  return x_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ECCCryptographicKey::set_allocated_x(::std::string* x) {
  if (x != NULL) {
    
  } else {
    
  }
  x_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), x);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.ECCCryptographicKey.x)
}

// bytes y = 3;
void ECCCryptographicKey::clear_y() {
  y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ECCCryptographicKey::y() const {
  // @@protoc_insertion_point(field_get:censys_definitions.ECCCryptographicKey.y)
  return y_.GetNoArena();
}
void ECCCryptographicKey::set_y(const ::std::string& value) {
  
  y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.ECCCryptographicKey.y)
}
#if LANG_CXX11
void ECCCryptographicKey::set_y(::std::string&& value) {
  
  y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.ECCCryptographicKey.y)
}
#endif
void ECCCryptographicKey::set_y(const char* value) {
  
  y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.ECCCryptographicKey.y)
}
void ECCCryptographicKey::set_y(const void* value, size_t size) {
  
  y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.ECCCryptographicKey.y)
}
::std::string* ECCCryptographicKey::mutable_y() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.ECCCryptographicKey.y)
  return y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ECCCryptographicKey::release_y() {
  // @@protoc_insertion_point(field_release:censys_definitions.ECCCryptographicKey.y)
  
  return y_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ECCCryptographicKey::set_allocated_y(::std::string* y) {
  if (y != NULL) {
    
  } else {
    
  }
  y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), y);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.ECCCryptographicKey.y)
}

// bytes private = 4;
void ECCCryptographicKey::clear_private_() {
  private__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ECCCryptographicKey::private_() const {
  // @@protoc_insertion_point(field_get:censys_definitions.ECCCryptographicKey.private)
  return private__.GetNoArena();
}
void ECCCryptographicKey::set_private_(const ::std::string& value) {
  
  private__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:censys_definitions.ECCCryptographicKey.private)
}
#if LANG_CXX11
void ECCCryptographicKey::set_private_(::std::string&& value) {
  
  private__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:censys_definitions.ECCCryptographicKey.private)
}
#endif
void ECCCryptographicKey::set_private_(const char* value) {
  
  private__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:censys_definitions.ECCCryptographicKey.private)
}
void ECCCryptographicKey::set_private_(const void* value, size_t size) {
  
  private__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:censys_definitions.ECCCryptographicKey.private)
}
::std::string* ECCCryptographicKey::mutable_private_() {
  
  // @@protoc_insertion_point(field_mutable:censys_definitions.ECCCryptographicKey.private)
  return private__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ECCCryptographicKey::release_private_() {
  // @@protoc_insertion_point(field_release:censys_definitions.ECCCryptographicKey.private)
  
  return private__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ECCCryptographicKey::set_allocated_private_(::std::string* private_) {
  if (private_ != NULL) {
    
  } else {
    
  }
  private__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_);
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.ECCCryptographicKey.private)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CryptographicKey::kTypeFieldNumber;
const int CryptographicKey::kRsaFieldNumber;
const int CryptographicKey::kDsaFieldNumber;
const int CryptographicKey::kEccFieldNumber;
const int CryptographicKey::kBrokenFieldNumber;
const int CryptographicKey::kCommonFieldNumber;
const int CryptographicKey::kDebianFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CryptographicKey::CryptographicKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_pubkey_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:censys_definitions.CryptographicKey)
}
CryptographicKey::CryptographicKey(const CryptographicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&debian_) -
    reinterpret_cast<char*>(&type_) + sizeof(debian_));
  clear_has_key_oneof();
  switch (from.key_oneof_case()) {
    case kRsa: {
      mutable_rsa()->::censys_definitions::RSACryptographicKey::MergeFrom(from.rsa());
      break;
    }
    case kDsa: {
      mutable_dsa()->::censys_definitions::DSACryptographicKey::MergeFrom(from.dsa());
      break;
    }
    case kEcc: {
      mutable_ecc()->::censys_definitions::ECCCryptographicKey::MergeFrom(from.ecc());
      break;
    }
    case KEY_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:censys_definitions.CryptographicKey)
}

void CryptographicKey::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&debian_) -
    reinterpret_cast<char*>(&type_) + sizeof(debian_));
  clear_has_key_oneof();
  _cached_size_ = 0;
}

CryptographicKey::~CryptographicKey() {
  // @@protoc_insertion_point(destructor:censys_definitions.CryptographicKey)
  SharedDtor();
}

void CryptographicKey::SharedDtor() {
  if (has_key_oneof()) {
    clear_key_oneof();
  }
}

void CryptographicKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CryptographicKey::descriptor() {
  protobuf_pubkey_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pubkey_2eproto::file_level_metadata[3].descriptor;
}

const CryptographicKey& CryptographicKey::default_instance() {
  protobuf_pubkey_2eproto::InitDefaults();
  return *internal_default_instance();
}

CryptographicKey* CryptographicKey::New(::google::protobuf::Arena* arena) const {
  CryptographicKey* n = new CryptographicKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CryptographicKey::clear_key_oneof() {
// @@protoc_insertion_point(one_of_clear_start:censys_definitions.CryptographicKey)
  switch (key_oneof_case()) {
    case kRsa: {
      delete key_oneof_.rsa_;
      break;
    }
    case kDsa: {
      delete key_oneof_.dsa_;
      break;
    }
    case kEcc: {
      delete key_oneof_.ecc_;
      break;
    }
    case KEY_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KEY_ONEOF_NOT_SET;
}


void CryptographicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:censys_definitions.CryptographicKey)
  ::memset(&type_, 0, reinterpret_cast<char*>(&debian_) -
    reinterpret_cast<char*>(&type_) + sizeof(debian_));
  clear_key_oneof();
}

bool CryptographicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:censys_definitions.CryptographicKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .censys_definitions.CryptographicKey.KeyType type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::censys_definitions::CryptographicKey_KeyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .censys_definitions.RSACryptographicKey rsa = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsa()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .censys_definitions.DSACryptographicKey dsa = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dsa()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .censys_definitions.ECCCryptographicKey ecc = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ecc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool broken = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool common = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &common_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool debian = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debian_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:censys_definitions.CryptographicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:censys_definitions.CryptographicKey)
  return false;
#undef DO_
}

void CryptographicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:censys_definitions.CryptographicKey)
  // .censys_definitions.CryptographicKey.KeyType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .censys_definitions.RSACryptographicKey rsa = 2;
  if (has_rsa()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *key_oneof_.rsa_, output);
  }

  // .censys_definitions.DSACryptographicKey dsa = 3;
  if (has_dsa()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *key_oneof_.dsa_, output);
  }

  // .censys_definitions.ECCCryptographicKey ecc = 4;
  if (has_ecc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *key_oneof_.ecc_, output);
  }

  // bool broken = 5;
  if (this->broken() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->broken(), output);
  }

  // bool common = 6;
  if (this->common() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->common(), output);
  }

  // bool debian = 7;
  if (this->debian() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->debian(), output);
  }

  // @@protoc_insertion_point(serialize_end:censys_definitions.CryptographicKey)
}

::google::protobuf::uint8* CryptographicKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:censys_definitions.CryptographicKey)
  // .censys_definitions.CryptographicKey.KeyType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .censys_definitions.RSACryptographicKey rsa = 2;
  if (has_rsa()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *key_oneof_.rsa_, false, target);
  }

  // .censys_definitions.DSACryptographicKey dsa = 3;
  if (has_dsa()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *key_oneof_.dsa_, false, target);
  }

  // .censys_definitions.ECCCryptographicKey ecc = 4;
  if (has_ecc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *key_oneof_.ecc_, false, target);
  }

  // bool broken = 5;
  if (this->broken() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->broken(), target);
  }

  // bool common = 6;
  if (this->common() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->common(), target);
  }

  // bool debian = 7;
  if (this->debian() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->debian(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:censys_definitions.CryptographicKey)
  return target;
}

size_t CryptographicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:censys_definitions.CryptographicKey)
  size_t total_size = 0;

  // .censys_definitions.CryptographicKey.KeyType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool broken = 5;
  if (this->broken() != 0) {
    total_size += 1 + 1;
  }

  // bool common = 6;
  if (this->common() != 0) {
    total_size += 1 + 1;
  }

  // bool debian = 7;
  if (this->debian() != 0) {
    total_size += 1 + 1;
  }

  switch (key_oneof_case()) {
    // .censys_definitions.RSACryptographicKey rsa = 2;
    case kRsa: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *key_oneof_.rsa_);
      break;
    }
    // .censys_definitions.DSACryptographicKey dsa = 3;
    case kDsa: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *key_oneof_.dsa_);
      break;
    }
    // .censys_definitions.ECCCryptographicKey ecc = 4;
    case kEcc: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *key_oneof_.ecc_);
      break;
    }
    case KEY_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CryptographicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:censys_definitions.CryptographicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CryptographicKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CryptographicKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:censys_definitions.CryptographicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:censys_definitions.CryptographicKey)
    MergeFrom(*source);
  }
}

void CryptographicKey::MergeFrom(const CryptographicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:censys_definitions.CryptographicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.broken() != 0) {
    set_broken(from.broken());
  }
  if (from.common() != 0) {
    set_common(from.common());
  }
  if (from.debian() != 0) {
    set_debian(from.debian());
  }
  switch (from.key_oneof_case()) {
    case kRsa: {
      mutable_rsa()->::censys_definitions::RSACryptographicKey::MergeFrom(from.rsa());
      break;
    }
    case kDsa: {
      mutable_dsa()->::censys_definitions::DSACryptographicKey::MergeFrom(from.dsa());
      break;
    }
    case kEcc: {
      mutable_ecc()->::censys_definitions::ECCCryptographicKey::MergeFrom(from.ecc());
      break;
    }
    case KEY_ONEOF_NOT_SET: {
      break;
    }
  }
}

void CryptographicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:censys_definitions.CryptographicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CryptographicKey::CopyFrom(const CryptographicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:censys_definitions.CryptographicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CryptographicKey::IsInitialized() const {
  return true;
}

void CryptographicKey::Swap(CryptographicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CryptographicKey::InternalSwap(CryptographicKey* other) {
  std::swap(type_, other->type_);
  std::swap(broken_, other->broken_);
  std::swap(common_, other->common_);
  std::swap(debian_, other->debian_);
  std::swap(key_oneof_, other->key_oneof_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CryptographicKey::GetMetadata() const {
  protobuf_pubkey_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_pubkey_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CryptographicKey

// .censys_definitions.CryptographicKey.KeyType type = 1;
void CryptographicKey::clear_type() {
  type_ = 0;
}
::censys_definitions::CryptographicKey_KeyType CryptographicKey::type() const {
  // @@protoc_insertion_point(field_get:censys_definitions.CryptographicKey.type)
  return static_cast< ::censys_definitions::CryptographicKey_KeyType >(type_);
}
void CryptographicKey::set_type(::censys_definitions::CryptographicKey_KeyType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.CryptographicKey.type)
}

// .censys_definitions.RSACryptographicKey rsa = 2;
bool CryptographicKey::has_rsa() const {
  return key_oneof_case() == kRsa;
}
void CryptographicKey::set_has_rsa() {
  _oneof_case_[0] = kRsa;
}
void CryptographicKey::clear_rsa() {
  if (has_rsa()) {
    delete key_oneof_.rsa_;
    clear_has_key_oneof();
  }
}
 const ::censys_definitions::RSACryptographicKey& CryptographicKey::rsa() const {
  // @@protoc_insertion_point(field_get:censys_definitions.CryptographicKey.rsa)
  return has_rsa()
      ? *key_oneof_.rsa_
      : ::censys_definitions::RSACryptographicKey::default_instance();
}
::censys_definitions::RSACryptographicKey* CryptographicKey::mutable_rsa() {
  if (!has_rsa()) {
    clear_key_oneof();
    set_has_rsa();
    key_oneof_.rsa_ = new ::censys_definitions::RSACryptographicKey;
  }
  // @@protoc_insertion_point(field_mutable:censys_definitions.CryptographicKey.rsa)
  return key_oneof_.rsa_;
}
::censys_definitions::RSACryptographicKey* CryptographicKey::release_rsa() {
  // @@protoc_insertion_point(field_release:censys_definitions.CryptographicKey.rsa)
  if (has_rsa()) {
    clear_has_key_oneof();
    ::censys_definitions::RSACryptographicKey* temp = key_oneof_.rsa_;
    key_oneof_.rsa_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CryptographicKey::set_allocated_rsa(::censys_definitions::RSACryptographicKey* rsa) {
  clear_key_oneof();
  if (rsa) {
    set_has_rsa();
    key_oneof_.rsa_ = rsa;
  }
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.CryptographicKey.rsa)
}

// .censys_definitions.DSACryptographicKey dsa = 3;
bool CryptographicKey::has_dsa() const {
  return key_oneof_case() == kDsa;
}
void CryptographicKey::set_has_dsa() {
  _oneof_case_[0] = kDsa;
}
void CryptographicKey::clear_dsa() {
  if (has_dsa()) {
    delete key_oneof_.dsa_;
    clear_has_key_oneof();
  }
}
 const ::censys_definitions::DSACryptographicKey& CryptographicKey::dsa() const {
  // @@protoc_insertion_point(field_get:censys_definitions.CryptographicKey.dsa)
  return has_dsa()
      ? *key_oneof_.dsa_
      : ::censys_definitions::DSACryptographicKey::default_instance();
}
::censys_definitions::DSACryptographicKey* CryptographicKey::mutable_dsa() {
  if (!has_dsa()) {
    clear_key_oneof();
    set_has_dsa();
    key_oneof_.dsa_ = new ::censys_definitions::DSACryptographicKey;
  }
  // @@protoc_insertion_point(field_mutable:censys_definitions.CryptographicKey.dsa)
  return key_oneof_.dsa_;
}
::censys_definitions::DSACryptographicKey* CryptographicKey::release_dsa() {
  // @@protoc_insertion_point(field_release:censys_definitions.CryptographicKey.dsa)
  if (has_dsa()) {
    clear_has_key_oneof();
    ::censys_definitions::DSACryptographicKey* temp = key_oneof_.dsa_;
    key_oneof_.dsa_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CryptographicKey::set_allocated_dsa(::censys_definitions::DSACryptographicKey* dsa) {
  clear_key_oneof();
  if (dsa) {
    set_has_dsa();
    key_oneof_.dsa_ = dsa;
  }
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.CryptographicKey.dsa)
}

// .censys_definitions.ECCCryptographicKey ecc = 4;
bool CryptographicKey::has_ecc() const {
  return key_oneof_case() == kEcc;
}
void CryptographicKey::set_has_ecc() {
  _oneof_case_[0] = kEcc;
}
void CryptographicKey::clear_ecc() {
  if (has_ecc()) {
    delete key_oneof_.ecc_;
    clear_has_key_oneof();
  }
}
 const ::censys_definitions::ECCCryptographicKey& CryptographicKey::ecc() const {
  // @@protoc_insertion_point(field_get:censys_definitions.CryptographicKey.ecc)
  return has_ecc()
      ? *key_oneof_.ecc_
      : ::censys_definitions::ECCCryptographicKey::default_instance();
}
::censys_definitions::ECCCryptographicKey* CryptographicKey::mutable_ecc() {
  if (!has_ecc()) {
    clear_key_oneof();
    set_has_ecc();
    key_oneof_.ecc_ = new ::censys_definitions::ECCCryptographicKey;
  }
  // @@protoc_insertion_point(field_mutable:censys_definitions.CryptographicKey.ecc)
  return key_oneof_.ecc_;
}
::censys_definitions::ECCCryptographicKey* CryptographicKey::release_ecc() {
  // @@protoc_insertion_point(field_release:censys_definitions.CryptographicKey.ecc)
  if (has_ecc()) {
    clear_has_key_oneof();
    ::censys_definitions::ECCCryptographicKey* temp = key_oneof_.ecc_;
    key_oneof_.ecc_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CryptographicKey::set_allocated_ecc(::censys_definitions::ECCCryptographicKey* ecc) {
  clear_key_oneof();
  if (ecc) {
    set_has_ecc();
    key_oneof_.ecc_ = ecc;
  }
  // @@protoc_insertion_point(field_set_allocated:censys_definitions.CryptographicKey.ecc)
}

// bool broken = 5;
void CryptographicKey::clear_broken() {
  broken_ = false;
}
bool CryptographicKey::broken() const {
  // @@protoc_insertion_point(field_get:censys_definitions.CryptographicKey.broken)
  return broken_;
}
void CryptographicKey::set_broken(bool value) {
  
  broken_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.CryptographicKey.broken)
}

// bool common = 6;
void CryptographicKey::clear_common() {
  common_ = false;
}
bool CryptographicKey::common() const {
  // @@protoc_insertion_point(field_get:censys_definitions.CryptographicKey.common)
  return common_;
}
void CryptographicKey::set_common(bool value) {
  
  common_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.CryptographicKey.common)
}

// bool debian = 7;
void CryptographicKey::clear_debian() {
  debian_ = false;
}
bool CryptographicKey::debian() const {
  // @@protoc_insertion_point(field_get:censys_definitions.CryptographicKey.debian)
  return debian_;
}
void CryptographicKey::set_debian(bool value) {
  
  debian_ = value;
  // @@protoc_insertion_point(field_set:censys_definitions.CryptographicKey.debian)
}

bool CryptographicKey::has_key_oneof() const {
  return key_oneof_case() != KEY_ONEOF_NOT_SET;
}
void CryptographicKey::clear_has_key_oneof() {
  _oneof_case_[0] = KEY_ONEOF_NOT_SET;
}
CryptographicKey::KeyOneofCase CryptographicKey::key_oneof_case() const {
  return CryptographicKey::KeyOneofCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace censys_definitions

// @@protoc_insertion_point(global_scope)
