// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: search.proto
#ifndef GRPC_search_2eproto__INCLUDED
#define GRPC_search_2eproto__INCLUDED

#include "search.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace zsearch {

// Two gRPC interfaces. One from
//
class AdminService final {
 public:
  static constexpr char const* service_full_name() {
    return "zsearch.AdminService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncShutdown(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncShutdownRaw(context, request, cq));
    }
    virtual ::grpc::Status Status(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncStatus(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status Statistics(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncStatistics(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncStatisticsRaw(context, request, cq));
    }
    virtual ::grpc::Status PruneIPv4(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncPruneIPv4(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncPruneIPv4Raw(context, request, cq));
    }
    virtual ::grpc::Status PruneDomain(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncPruneDomain(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncPruneDomainRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateASData(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncUpdateASData(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncUpdateASDataRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateLocationData(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncUpdateLocationData(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncUpdateLocationDataRaw(context, request, cq));
    }
    virtual ::grpc::Status ValidateCertificates(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncValidateCertificates(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncValidateCertificatesRaw(context, request, cq));
    }
    virtual ::grpc::Status FixCertificateSource(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncFixCertificateSource(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncFixCertificateSourceRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpIPv4ToJSON(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncDumpIPv4ToJSON(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncDumpIPv4ToJSONRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpDomainToJSON(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncDumpDomainToJSON(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncDumpDomainToJSONRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpCertificatesToJSON(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncDumpCertificatesToJSON(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncDumpCertificatesToJSONRaw(context, request, cq));
    }
    virtual ::grpc::Status DumpKeysToJSON(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncDumpKeysToJSON(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncDumpKeysToJSONRaw(context, request, cq));
    }
    virtual ::grpc::Status RegenerateIPv4Deltas(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncRegenerateIPv4Deltas(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncRegenerateIPv4DeltasRaw(context, request, cq));
    }
    virtual ::grpc::Status RegenerateDomainDeltas(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncRegenerateDomainDeltas(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncRegenerateDomainDeltasRaw(context, request, cq));
    }
    virtual ::grpc::Status RegenerateCertificateDeltas(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncRegenerateCertificateDeltas(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncRegenerateCertificateDeltasRaw(context, request, cq));
    }
    virtual ::grpc::Status RegenerateSingleCertificateDelta(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncRegenerateSingleCertificateDelta(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncRegenerateSingleCertificateDeltaRaw(context, request, cq));
    }
    virtual ::grpc::Status ReprocessCertificates(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncReprocessCertificates(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncReprocessCertificatesRaw(context, request, cq));
    }
    virtual ::grpc::Status ReprocessSingleCertificate(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncReprocessSingleCertificate(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncReprocessSingleCertificateRaw(context, request, cq));
    }
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncPing(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncPingRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncStatusRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncStatisticsRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncPruneIPv4Raw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncPruneDomainRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncUpdateASDataRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncUpdateLocationDataRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncValidateCertificatesRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncFixCertificateSourceRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncDumpIPv4ToJSONRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncDumpDomainToJSONRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncDumpCertificatesToJSONRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncDumpKeysToJSONRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncRegenerateIPv4DeltasRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncRegenerateDomainDeltasRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncRegenerateCertificateDeltasRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncRegenerateSingleCertificateDeltaRaw(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncReprocessCertificatesRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncReprocessSingleCertificateRaw(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncPingRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncShutdown(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncShutdownRaw(context, request, cq));
    }
    ::grpc::Status Status(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncStatus(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncStatusRaw(context, request, cq));
    }
    ::grpc::Status Statistics(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncStatistics(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncStatisticsRaw(context, request, cq));
    }
    ::grpc::Status PruneIPv4(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncPruneIPv4(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncPruneIPv4Raw(context, request, cq));
    }
    ::grpc::Status PruneDomain(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncPruneDomain(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncPruneDomainRaw(context, request, cq));
    }
    ::grpc::Status UpdateASData(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncUpdateASData(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncUpdateASDataRaw(context, request, cq));
    }
    ::grpc::Status UpdateLocationData(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncUpdateLocationData(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncUpdateLocationDataRaw(context, request, cq));
    }
    ::grpc::Status ValidateCertificates(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncValidateCertificates(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncValidateCertificatesRaw(context, request, cq));
    }
    ::grpc::Status FixCertificateSource(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncFixCertificateSource(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncFixCertificateSourceRaw(context, request, cq));
    }
    ::grpc::Status DumpIPv4ToJSON(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncDumpIPv4ToJSON(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncDumpIPv4ToJSONRaw(context, request, cq));
    }
    ::grpc::Status DumpDomainToJSON(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncDumpDomainToJSON(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncDumpDomainToJSONRaw(context, request, cq));
    }
    ::grpc::Status DumpCertificatesToJSON(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncDumpCertificatesToJSON(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncDumpCertificatesToJSONRaw(context, request, cq));
    }
    ::grpc::Status DumpKeysToJSON(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncDumpKeysToJSON(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncDumpKeysToJSONRaw(context, request, cq));
    }
    ::grpc::Status RegenerateIPv4Deltas(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncRegenerateIPv4Deltas(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncRegenerateIPv4DeltasRaw(context, request, cq));
    }
    ::grpc::Status RegenerateDomainDeltas(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncRegenerateDomainDeltas(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncRegenerateDomainDeltasRaw(context, request, cq));
    }
    ::grpc::Status RegenerateCertificateDeltas(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncRegenerateCertificateDeltas(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncRegenerateCertificateDeltasRaw(context, request, cq));
    }
    ::grpc::Status RegenerateSingleCertificateDelta(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncRegenerateSingleCertificateDelta(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncRegenerateSingleCertificateDeltaRaw(context, request, cq));
    }
    ::grpc::Status ReprocessCertificates(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncReprocessCertificates(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncReprocessCertificatesRaw(context, request, cq));
    }
    ::grpc::Status ReprocessSingleCertificate(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncReprocessSingleCertificate(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncReprocessSingleCertificateRaw(context, request, cq));
    }
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::zsearch::Command& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncPing(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncPingRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncStatusRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncStatisticsRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncPruneIPv4Raw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncPruneDomainRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncUpdateASDataRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncUpdateLocationDataRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncValidateCertificatesRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncFixCertificateSourceRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncDumpIPv4ToJSONRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncDumpDomainToJSONRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncDumpCertificatesToJSONRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncDumpKeysToJSONRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncRegenerateIPv4DeltasRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncRegenerateDomainDeltasRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncRegenerateCertificateDeltasRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncRegenerateSingleCertificateDeltaRaw(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncReprocessCertificatesRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncReprocessSingleCertificateRaw(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncPingRaw(::grpc::ClientContext* context, const ::zsearch::Command& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_Shutdown_;
    const ::grpc::RpcMethod rpcmethod_Status_;
    const ::grpc::RpcMethod rpcmethod_Statistics_;
    const ::grpc::RpcMethod rpcmethod_PruneIPv4_;
    const ::grpc::RpcMethod rpcmethod_PruneDomain_;
    const ::grpc::RpcMethod rpcmethod_UpdateASData_;
    const ::grpc::RpcMethod rpcmethod_UpdateLocationData_;
    const ::grpc::RpcMethod rpcmethod_ValidateCertificates_;
    const ::grpc::RpcMethod rpcmethod_FixCertificateSource_;
    const ::grpc::RpcMethod rpcmethod_DumpIPv4ToJSON_;
    const ::grpc::RpcMethod rpcmethod_DumpDomainToJSON_;
    const ::grpc::RpcMethod rpcmethod_DumpCertificatesToJSON_;
    const ::grpc::RpcMethod rpcmethod_DumpKeysToJSON_;
    const ::grpc::RpcMethod rpcmethod_RegenerateIPv4Deltas_;
    const ::grpc::RpcMethod rpcmethod_RegenerateDomainDeltas_;
    const ::grpc::RpcMethod rpcmethod_RegenerateCertificateDeltas_;
    const ::grpc::RpcMethod rpcmethod_RegenerateSingleCertificateDelta_;
    const ::grpc::RpcMethod rpcmethod_ReprocessCertificates_;
    const ::grpc::RpcMethod rpcmethod_ReprocessSingleCertificate_;
    const ::grpc::RpcMethod rpcmethod_Ping_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status Status(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status Statistics(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status PruneIPv4(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status PruneDomain(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status UpdateASData(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status UpdateLocationData(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status ValidateCertificates(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status FixCertificateSource(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status DumpIPv4ToJSON(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status DumpDomainToJSON(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status DumpCertificatesToJSON(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status DumpKeysToJSON(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status RegenerateIPv4Deltas(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status RegenerateDomainDeltas(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status RegenerateCertificateDeltas(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status RegenerateSingleCertificateDelta(::grpc::ServerContext* context, const ::zsearch::AnonymousQuery* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status ReprocessCertificates(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status ReprocessSingleCertificate(::grpc::ServerContext* context, const ::zsearch::AnonymousQuery* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Shutdown() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Status() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Statistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Statistics() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Statistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Statistics(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatistics(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PruneIPv4 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PruneIPv4() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PruneIPv4() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PruneIPv4(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPruneIPv4(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PruneDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PruneDomain() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_PruneDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PruneDomain(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPruneDomain(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateASData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateASData() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdateASData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateASData(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateASData(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateLocationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateLocationData() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UpdateLocationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLocationData(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateLocationData(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateCertificates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ValidateCertificates() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ValidateCertificates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateCertificates(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateCertificates(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FixCertificateSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FixCertificateSource() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_FixCertificateSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FixCertificateSource(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFixCertificateSource(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpIPv4ToJSON : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpIPv4ToJSON() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DumpIPv4ToJSON() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpIPv4ToJSON(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpIPv4ToJSON(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpDomainToJSON : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpDomainToJSON() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_DumpDomainToJSON() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpDomainToJSON(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpDomainToJSON(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpCertificatesToJSON : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpCertificatesToJSON() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_DumpCertificatesToJSON() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpCertificatesToJSON(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpCertificatesToJSON(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DumpKeysToJSON : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DumpKeysToJSON() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_DumpKeysToJSON() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpKeysToJSON(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDumpKeysToJSON(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegenerateIPv4Deltas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegenerateIPv4Deltas() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_RegenerateIPv4Deltas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegenerateIPv4Deltas(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegenerateIPv4Deltas(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegenerateDomainDeltas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegenerateDomainDeltas() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_RegenerateDomainDeltas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegenerateDomainDeltas(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegenerateDomainDeltas(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegenerateCertificateDeltas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegenerateCertificateDeltas() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_RegenerateCertificateDeltas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegenerateCertificateDeltas(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegenerateCertificateDeltas(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegenerateSingleCertificateDelta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegenerateSingleCertificateDelta() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_RegenerateSingleCertificateDelta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegenerateSingleCertificateDelta(::grpc::ServerContext* context, const ::zsearch::AnonymousQuery* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegenerateSingleCertificateDelta(::grpc::ServerContext* context, ::zsearch::AnonymousQuery* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReprocessCertificates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReprocessCertificates() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_ReprocessCertificates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReprocessCertificates(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReprocessCertificates(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReprocessSingleCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReprocessSingleCertificate() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_ReprocessSingleCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReprocessSingleCertificate(::grpc::ServerContext* context, const ::zsearch::AnonymousQuery* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReprocessSingleCertificate(::grpc::ServerContext* context, ::zsearch::AnonymousQuery* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::zsearch::Command* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Shutdown<WithAsyncMethod_Status<WithAsyncMethod_Statistics<WithAsyncMethod_PruneIPv4<WithAsyncMethod_PruneDomain<WithAsyncMethod_UpdateASData<WithAsyncMethod_UpdateLocationData<WithAsyncMethod_ValidateCertificates<WithAsyncMethod_FixCertificateSource<WithAsyncMethod_DumpIPv4ToJSON<WithAsyncMethod_DumpDomainToJSON<WithAsyncMethod_DumpCertificatesToJSON<WithAsyncMethod_DumpKeysToJSON<WithAsyncMethod_RegenerateIPv4Deltas<WithAsyncMethod_RegenerateDomainDeltas<WithAsyncMethod_RegenerateCertificateDeltas<WithAsyncMethod_RegenerateSingleCertificateDelta<WithAsyncMethod_ReprocessCertificates<WithAsyncMethod_ReprocessSingleCertificate<WithAsyncMethod_Ping<Service > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Shutdown() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Status() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Statistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Statistics() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Statistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Statistics(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PruneIPv4 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PruneIPv4() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PruneIPv4() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PruneIPv4(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PruneDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PruneDomain() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_PruneDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PruneDomain(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateASData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateASData() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdateASData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateASData(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateLocationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateLocationData() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UpdateLocationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLocationData(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateCertificates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ValidateCertificates() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ValidateCertificates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateCertificates(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FixCertificateSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FixCertificateSource() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_FixCertificateSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FixCertificateSource(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpIPv4ToJSON : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpIPv4ToJSON() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DumpIPv4ToJSON() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpIPv4ToJSON(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpDomainToJSON : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpDomainToJSON() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_DumpDomainToJSON() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpDomainToJSON(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpCertificatesToJSON : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpCertificatesToJSON() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_DumpCertificatesToJSON() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpCertificatesToJSON(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DumpKeysToJSON : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DumpKeysToJSON() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_DumpKeysToJSON() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DumpKeysToJSON(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegenerateIPv4Deltas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegenerateIPv4Deltas() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_RegenerateIPv4Deltas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegenerateIPv4Deltas(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegenerateDomainDeltas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegenerateDomainDeltas() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_RegenerateDomainDeltas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegenerateDomainDeltas(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegenerateCertificateDeltas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegenerateCertificateDeltas() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_RegenerateCertificateDeltas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegenerateCertificateDeltas(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegenerateSingleCertificateDelta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegenerateSingleCertificateDelta() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_RegenerateSingleCertificateDelta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegenerateSingleCertificateDelta(::grpc::ServerContext* context, const ::zsearch::AnonymousQuery* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReprocessCertificates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReprocessCertificates() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_ReprocessCertificates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReprocessCertificates(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReprocessSingleCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReprocessSingleCertificate() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_ReprocessSingleCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReprocessSingleCertificate(::grpc::ServerContext* context, const ::zsearch::AnonymousQuery* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Shutdown() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_Shutdown<BaseClass>::StreamedShutdown, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Status() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_Status<BaseClass>::StreamedStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Statistics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Statistics() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_Statistics<BaseClass>::StreamedStatistics, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Statistics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Statistics(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatistics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PruneIPv4 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PruneIPv4() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_PruneIPv4<BaseClass>::StreamedPruneIPv4, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PruneIPv4() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PruneIPv4(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPruneIPv4(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PruneDomain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PruneDomain() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_PruneDomain<BaseClass>::StreamedPruneDomain, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PruneDomain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PruneDomain(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPruneDomain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateASData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateASData() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_UpdateASData<BaseClass>::StreamedUpdateASData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateASData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateASData(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateASData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateLocationData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateLocationData() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_UpdateLocationData<BaseClass>::StreamedUpdateLocationData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateLocationData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateLocationData(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateLocationData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateCertificates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ValidateCertificates() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_ValidateCertificates<BaseClass>::StreamedValidateCertificates, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ValidateCertificates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateCertificates(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateCertificates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FixCertificateSource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FixCertificateSource() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_FixCertificateSource<BaseClass>::StreamedFixCertificateSource, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FixCertificateSource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FixCertificateSource(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFixCertificateSource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpIPv4ToJSON : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpIPv4ToJSON() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_DumpIPv4ToJSON<BaseClass>::StreamedDumpIPv4ToJSON, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpIPv4ToJSON() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpIPv4ToJSON(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpIPv4ToJSON(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpDomainToJSON : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpDomainToJSON() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_DumpDomainToJSON<BaseClass>::StreamedDumpDomainToJSON, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpDomainToJSON() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpDomainToJSON(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpDomainToJSON(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpCertificatesToJSON : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpCertificatesToJSON() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_DumpCertificatesToJSON<BaseClass>::StreamedDumpCertificatesToJSON, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpCertificatesToJSON() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpCertificatesToJSON(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpCertificatesToJSON(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DumpKeysToJSON : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DumpKeysToJSON() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_DumpKeysToJSON<BaseClass>::StreamedDumpKeysToJSON, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DumpKeysToJSON() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DumpKeysToJSON(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDumpKeysToJSON(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegenerateIPv4Deltas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegenerateIPv4Deltas() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_RegenerateIPv4Deltas<BaseClass>::StreamedRegenerateIPv4Deltas, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegenerateIPv4Deltas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegenerateIPv4Deltas(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegenerateIPv4Deltas(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegenerateDomainDeltas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegenerateDomainDeltas() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_RegenerateDomainDeltas<BaseClass>::StreamedRegenerateDomainDeltas, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegenerateDomainDeltas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegenerateDomainDeltas(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegenerateDomainDeltas(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegenerateCertificateDeltas : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegenerateCertificateDeltas() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_RegenerateCertificateDeltas<BaseClass>::StreamedRegenerateCertificateDeltas, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegenerateCertificateDeltas() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegenerateCertificateDeltas(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegenerateCertificateDeltas(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegenerateSingleCertificateDelta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegenerateSingleCertificateDelta() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::StreamedUnaryHandler< ::zsearch::AnonymousQuery, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_RegenerateSingleCertificateDelta<BaseClass>::StreamedRegenerateSingleCertificateDelta, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegenerateSingleCertificateDelta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegenerateSingleCertificateDelta(::grpc::ServerContext* context, const ::zsearch::AnonymousQuery* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegenerateSingleCertificateDelta(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::AnonymousQuery,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReprocessCertificates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReprocessCertificates() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_ReprocessCertificates<BaseClass>::StreamedReprocessCertificates, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReprocessCertificates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReprocessCertificates(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReprocessCertificates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReprocessSingleCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReprocessSingleCertificate() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::StreamedUnaryHandler< ::zsearch::AnonymousQuery, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_ReprocessSingleCertificate<BaseClass>::StreamedReprocessSingleCertificate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReprocessSingleCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReprocessSingleCertificate(::grpc::ServerContext* context, const ::zsearch::AnonymousQuery* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReprocessSingleCertificate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::AnonymousQuery,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Command, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_Ping<BaseClass>::StreamedPing, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* context, const ::zsearch::Command* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Command,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_Statistics<WithStreamedUnaryMethod_PruneIPv4<WithStreamedUnaryMethod_PruneDomain<WithStreamedUnaryMethod_UpdateASData<WithStreamedUnaryMethod_UpdateLocationData<WithStreamedUnaryMethod_ValidateCertificates<WithStreamedUnaryMethod_FixCertificateSource<WithStreamedUnaryMethod_DumpIPv4ToJSON<WithStreamedUnaryMethod_DumpDomainToJSON<WithStreamedUnaryMethod_DumpCertificatesToJSON<WithStreamedUnaryMethod_DumpKeysToJSON<WithStreamedUnaryMethod_RegenerateIPv4Deltas<WithStreamedUnaryMethod_RegenerateDomainDeltas<WithStreamedUnaryMethod_RegenerateCertificateDeltas<WithStreamedUnaryMethod_RegenerateSingleCertificateDelta<WithStreamedUnaryMethod_ReprocessCertificates<WithStreamedUnaryMethod_ReprocessSingleCertificate<WithStreamedUnaryMethod_Ping<Service > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_Statistics<WithStreamedUnaryMethod_PruneIPv4<WithStreamedUnaryMethod_PruneDomain<WithStreamedUnaryMethod_UpdateASData<WithStreamedUnaryMethod_UpdateLocationData<WithStreamedUnaryMethod_ValidateCertificates<WithStreamedUnaryMethod_FixCertificateSource<WithStreamedUnaryMethod_DumpIPv4ToJSON<WithStreamedUnaryMethod_DumpDomainToJSON<WithStreamedUnaryMethod_DumpCertificatesToJSON<WithStreamedUnaryMethod_DumpKeysToJSON<WithStreamedUnaryMethod_RegenerateIPv4Deltas<WithStreamedUnaryMethod_RegenerateDomainDeltas<WithStreamedUnaryMethod_RegenerateCertificateDeltas<WithStreamedUnaryMethod_RegenerateSingleCertificateDelta<WithStreamedUnaryMethod_ReprocessCertificates<WithStreamedUnaryMethod_ReprocessSingleCertificate<WithStreamedUnaryMethod_Ping<Service > > > > > > > > > > > > > > > > > > > > StreamedService;
};

class QueryService final {
 public:
  static constexpr char const* service_full_name() {
    return "zsearch.QueryService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetHostIPv4Record(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::HostQueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::HostQueryResponse>> AsyncGetHostIPv4Record(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::HostQueryResponse>>(AsyncGetHostIPv4RecordRaw(context, request, cq));
    }
    virtual ::grpc::Status PutHostIPv4Record(::grpc::ClientContext* context, const ::zsearch::Record& request, ::zsearch::Delta* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>> AsyncPutHostIPv4Record(::grpc::ClientContext* context, const ::zsearch::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>>(AsyncPutHostIPv4RecordRaw(context, request, cq));
    }
    virtual ::grpc::Status DelHostIPv4Record(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::Delta* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>> AsyncDelHostIPv4Record(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>>(AsyncDelHostIPv4RecordRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllIPv4Records(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::HostQueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::HostQueryResponse>> AsyncGetAllIPv4Records(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::HostQueryResponse>>(AsyncGetAllIPv4RecordsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetHostIPv4Delta(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::Delta* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>> AsyncGetHostIPv4Delta(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>>(AsyncGetHostIPv4DeltaRaw(context, request, cq));
    }
    virtual ::grpc::Status GetHostDomainRecord(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::HostQueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::HostQueryResponse>> AsyncGetHostDomainRecord(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::HostQueryResponse>>(AsyncGetHostDomainRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status PutHostDomainRecord(::grpc::ClientContext* context, const ::zsearch::Record& request, ::zsearch::Delta* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>> AsyncPutHostDomainRecord(::grpc::ClientContext* context, const ::zsearch::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>>(AsyncPutHostDomainRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status DelHostDomainRecord(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::Delta* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>> AsyncDelHostDomainRecord(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>>(AsyncDelHostDomainRecordRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllDomainRecords(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::HostQueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::HostQueryResponse>> AsyncGetAllDomainRecords(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::HostQueryResponse>>(AsyncGetAllDomainRecordsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetHostDomainDelta(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::Delta* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>> AsyncGetHostDomainDelta(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>>(AsyncGetHostDomainDeltaRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCertificate(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::zsearch::AnonymousQueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::AnonymousQueryResponse>> AsyncGetCertificate(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::AnonymousQueryResponse>>(AsyncGetCertificateRaw(context, request, cq));
    }
    virtual ::grpc::Status UpsertCertificate(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::zsearch::AnonymousDelta* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::AnonymousDelta>> AsyncUpsertCertificate(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::AnonymousDelta>>(AsyncUpsertCertificateRaw(context, request, cq));
    }
    virtual ::grpc::Status UpsertRawCertificate(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::zsearch::AnonymousDelta* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::AnonymousDelta>> AsyncUpsertRawCertificate(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::AnonymousDelta>>(AsyncUpsertRawCertificateRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCryptographicKey(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::zsearch::AnonymousQueryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::AnonymousQueryResponse>> AsyncGetCryptographicKey(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::AnonymousQueryResponse>>(AsyncGetCryptographicKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status UpsertCryptographicKey(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::zsearch::AnonymousDelta* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::AnonymousDelta>> AsyncUpsertCryptographicKey(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::AnonymousDelta>>(AsyncUpsertCryptographicKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPublicLocation(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::LocationAtom* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::LocationAtom>> AsyncGetPublicLocation(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::LocationAtom>>(AsyncGetPublicLocationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRestrictedLocation(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::LocationAtom* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::LocationAtom>> AsyncGetRestrictedLocation(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::LocationAtom>>(AsyncGetRestrictedLocationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetWHOIS(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::Record* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Record>> AsyncGetWHOIS(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Record>>(AsyncGetWHOISRaw(context, request, cq));
    }
    virtual ::grpc::Status GetUserMetadata(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::Record* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Record>> AsyncGetUserMetadata(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Record>>(AsyncGetUserMetadataRaw(context, request, cq));
    }
    virtual ::grpc::Status PutUserMetadata(::grpc::ClientContext* context, const ::zsearch::Record& request, ::zsearch::CommandReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>> AsyncPutUserMetadata(::grpc::ClientContext* context, const ::zsearch::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>>(AsyncPutUserMetadataRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRootStore(::grpc::ClientContext* context, const ::zsearch::RootStoreQuery& request, ::zsearch::RootStoreReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::RootStoreReply>> AsyncGetRootStore(::grpc::ClientContext* context, const ::zsearch::RootStoreQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::RootStoreReply>>(AsyncGetRootStoreRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::HostQueryResponse>* AsyncGetHostIPv4RecordRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>* AsyncPutHostIPv4RecordRaw(::grpc::ClientContext* context, const ::zsearch::Record& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>* AsyncDelHostIPv4RecordRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::HostQueryResponse>* AsyncGetAllIPv4RecordsRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>* AsyncGetHostIPv4DeltaRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::HostQueryResponse>* AsyncGetHostDomainRecordRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>* AsyncPutHostDomainRecordRaw(::grpc::ClientContext* context, const ::zsearch::Record& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>* AsyncDelHostDomainRecordRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::HostQueryResponse>* AsyncGetAllDomainRecordsRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Delta>* AsyncGetHostDomainDeltaRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::AnonymousQueryResponse>* AsyncGetCertificateRaw(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::AnonymousDelta>* AsyncUpsertCertificateRaw(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::AnonymousDelta>* AsyncUpsertRawCertificateRaw(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::AnonymousQueryResponse>* AsyncGetCryptographicKeyRaw(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::AnonymousDelta>* AsyncUpsertCryptographicKeyRaw(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::LocationAtom>* AsyncGetPublicLocationRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::LocationAtom>* AsyncGetRestrictedLocationRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Record>* AsyncGetWHOISRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::Record>* AsyncGetUserMetadataRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::CommandReply>* AsyncPutUserMetadataRaw(::grpc::ClientContext* context, const ::zsearch::Record& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::zsearch::RootStoreReply>* AsyncGetRootStoreRaw(::grpc::ClientContext* context, const ::zsearch::RootStoreQuery& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetHostIPv4Record(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::HostQueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::HostQueryResponse>> AsyncGetHostIPv4Record(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::HostQueryResponse>>(AsyncGetHostIPv4RecordRaw(context, request, cq));
    }
    ::grpc::Status PutHostIPv4Record(::grpc::ClientContext* context, const ::zsearch::Record& request, ::zsearch::Delta* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>> AsyncPutHostIPv4Record(::grpc::ClientContext* context, const ::zsearch::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>>(AsyncPutHostIPv4RecordRaw(context, request, cq));
    }
    ::grpc::Status DelHostIPv4Record(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::Delta* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>> AsyncDelHostIPv4Record(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>>(AsyncDelHostIPv4RecordRaw(context, request, cq));
    }
    ::grpc::Status GetAllIPv4Records(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::HostQueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::HostQueryResponse>> AsyncGetAllIPv4Records(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::HostQueryResponse>>(AsyncGetAllIPv4RecordsRaw(context, request, cq));
    }
    ::grpc::Status GetHostIPv4Delta(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::Delta* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>> AsyncGetHostIPv4Delta(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>>(AsyncGetHostIPv4DeltaRaw(context, request, cq));
    }
    ::grpc::Status GetHostDomainRecord(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::HostQueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::HostQueryResponse>> AsyncGetHostDomainRecord(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::HostQueryResponse>>(AsyncGetHostDomainRecordRaw(context, request, cq));
    }
    ::grpc::Status PutHostDomainRecord(::grpc::ClientContext* context, const ::zsearch::Record& request, ::zsearch::Delta* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>> AsyncPutHostDomainRecord(::grpc::ClientContext* context, const ::zsearch::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>>(AsyncPutHostDomainRecordRaw(context, request, cq));
    }
    ::grpc::Status DelHostDomainRecord(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::Delta* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>> AsyncDelHostDomainRecord(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>>(AsyncDelHostDomainRecordRaw(context, request, cq));
    }
    ::grpc::Status GetAllDomainRecords(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::HostQueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::HostQueryResponse>> AsyncGetAllDomainRecords(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::HostQueryResponse>>(AsyncGetAllDomainRecordsRaw(context, request, cq));
    }
    ::grpc::Status GetHostDomainDelta(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::Delta* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>> AsyncGetHostDomainDelta(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>>(AsyncGetHostDomainDeltaRaw(context, request, cq));
    }
    ::grpc::Status GetCertificate(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::zsearch::AnonymousQueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::AnonymousQueryResponse>> AsyncGetCertificate(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::AnonymousQueryResponse>>(AsyncGetCertificateRaw(context, request, cq));
    }
    ::grpc::Status UpsertCertificate(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::zsearch::AnonymousDelta* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::AnonymousDelta>> AsyncUpsertCertificate(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::AnonymousDelta>>(AsyncUpsertCertificateRaw(context, request, cq));
    }
    ::grpc::Status UpsertRawCertificate(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::zsearch::AnonymousDelta* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::AnonymousDelta>> AsyncUpsertRawCertificate(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::AnonymousDelta>>(AsyncUpsertRawCertificateRaw(context, request, cq));
    }
    ::grpc::Status GetCryptographicKey(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::zsearch::AnonymousQueryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::AnonymousQueryResponse>> AsyncGetCryptographicKey(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::AnonymousQueryResponse>>(AsyncGetCryptographicKeyRaw(context, request, cq));
    }
    ::grpc::Status UpsertCryptographicKey(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::zsearch::AnonymousDelta* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::AnonymousDelta>> AsyncUpsertCryptographicKey(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::AnonymousDelta>>(AsyncUpsertCryptographicKeyRaw(context, request, cq));
    }
    ::grpc::Status GetPublicLocation(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::LocationAtom* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::LocationAtom>> AsyncGetPublicLocation(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::LocationAtom>>(AsyncGetPublicLocationRaw(context, request, cq));
    }
    ::grpc::Status GetRestrictedLocation(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::LocationAtom* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::LocationAtom>> AsyncGetRestrictedLocation(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::LocationAtom>>(AsyncGetRestrictedLocationRaw(context, request, cq));
    }
    ::grpc::Status GetWHOIS(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::Record* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::Record>> AsyncGetWHOIS(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::Record>>(AsyncGetWHOISRaw(context, request, cq));
    }
    ::grpc::Status GetUserMetadata(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::zsearch::Record* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::Record>> AsyncGetUserMetadata(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::Record>>(AsyncGetUserMetadataRaw(context, request, cq));
    }
    ::grpc::Status PutUserMetadata(::grpc::ClientContext* context, const ::zsearch::Record& request, ::zsearch::CommandReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>> AsyncPutUserMetadata(::grpc::ClientContext* context, const ::zsearch::Record& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>>(AsyncPutUserMetadataRaw(context, request, cq));
    }
    ::grpc::Status GetRootStore(::grpc::ClientContext* context, const ::zsearch::RootStoreQuery& request, ::zsearch::RootStoreReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::RootStoreReply>> AsyncGetRootStore(::grpc::ClientContext* context, const ::zsearch::RootStoreQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::zsearch::RootStoreReply>>(AsyncGetRootStoreRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::zsearch::HostQueryResponse>* AsyncGetHostIPv4RecordRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>* AsyncPutHostIPv4RecordRaw(::grpc::ClientContext* context, const ::zsearch::Record& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>* AsyncDelHostIPv4RecordRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::HostQueryResponse>* AsyncGetAllIPv4RecordsRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>* AsyncGetHostIPv4DeltaRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::HostQueryResponse>* AsyncGetHostDomainRecordRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>* AsyncPutHostDomainRecordRaw(::grpc::ClientContext* context, const ::zsearch::Record& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>* AsyncDelHostDomainRecordRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::HostQueryResponse>* AsyncGetAllDomainRecordsRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::Delta>* AsyncGetHostDomainDeltaRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::AnonymousQueryResponse>* AsyncGetCertificateRaw(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::AnonymousDelta>* AsyncUpsertCertificateRaw(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::AnonymousDelta>* AsyncUpsertRawCertificateRaw(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::AnonymousQueryResponse>* AsyncGetCryptographicKeyRaw(::grpc::ClientContext* context, const ::zsearch::AnonymousQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::AnonymousDelta>* AsyncUpsertCryptographicKeyRaw(::grpc::ClientContext* context, const ::zsearch::AnonymousRecord& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::LocationAtom>* AsyncGetPublicLocationRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::LocationAtom>* AsyncGetRestrictedLocationRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::Record>* AsyncGetWHOISRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::Record>* AsyncGetUserMetadataRaw(::grpc::ClientContext* context, const ::zsearch::HostQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::CommandReply>* AsyncPutUserMetadataRaw(::grpc::ClientContext* context, const ::zsearch::Record& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::zsearch::RootStoreReply>* AsyncGetRootStoreRaw(::grpc::ClientContext* context, const ::zsearch::RootStoreQuery& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_GetHostIPv4Record_;
    const ::grpc::RpcMethod rpcmethod_PutHostIPv4Record_;
    const ::grpc::RpcMethod rpcmethod_DelHostIPv4Record_;
    const ::grpc::RpcMethod rpcmethod_GetAllIPv4Records_;
    const ::grpc::RpcMethod rpcmethod_GetHostIPv4Delta_;
    const ::grpc::RpcMethod rpcmethod_GetHostDomainRecord_;
    const ::grpc::RpcMethod rpcmethod_PutHostDomainRecord_;
    const ::grpc::RpcMethod rpcmethod_DelHostDomainRecord_;
    const ::grpc::RpcMethod rpcmethod_GetAllDomainRecords_;
    const ::grpc::RpcMethod rpcmethod_GetHostDomainDelta_;
    const ::grpc::RpcMethod rpcmethod_GetCertificate_;
    const ::grpc::RpcMethod rpcmethod_UpsertCertificate_;
    const ::grpc::RpcMethod rpcmethod_UpsertRawCertificate_;
    const ::grpc::RpcMethod rpcmethod_GetCryptographicKey_;
    const ::grpc::RpcMethod rpcmethod_UpsertCryptographicKey_;
    const ::grpc::RpcMethod rpcmethod_GetPublicLocation_;
    const ::grpc::RpcMethod rpcmethod_GetRestrictedLocation_;
    const ::grpc::RpcMethod rpcmethod_GetWHOIS_;
    const ::grpc::RpcMethod rpcmethod_GetUserMetadata_;
    const ::grpc::RpcMethod rpcmethod_PutUserMetadata_;
    const ::grpc::RpcMethod rpcmethod_GetRootStore_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetHostIPv4Record(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::HostQueryResponse* response);
    virtual ::grpc::Status PutHostIPv4Record(::grpc::ServerContext* context, const ::zsearch::Record* request, ::zsearch::Delta* response);
    virtual ::grpc::Status DelHostIPv4Record(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Delta* response);
    virtual ::grpc::Status GetAllIPv4Records(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::HostQueryResponse* response);
    virtual ::grpc::Status GetHostIPv4Delta(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Delta* response);
    virtual ::grpc::Status GetHostDomainRecord(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::HostQueryResponse* response);
    virtual ::grpc::Status PutHostDomainRecord(::grpc::ServerContext* context, const ::zsearch::Record* request, ::zsearch::Delta* response);
    virtual ::grpc::Status DelHostDomainRecord(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Delta* response);
    virtual ::grpc::Status GetAllDomainRecords(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::HostQueryResponse* response);
    virtual ::grpc::Status GetHostDomainDelta(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Delta* response);
    virtual ::grpc::Status GetCertificate(::grpc::ServerContext* context, const ::zsearch::AnonymousQuery* request, ::zsearch::AnonymousQueryResponse* response);
    virtual ::grpc::Status UpsertCertificate(::grpc::ServerContext* context, const ::zsearch::AnonymousRecord* request, ::zsearch::AnonymousDelta* response);
    virtual ::grpc::Status UpsertRawCertificate(::grpc::ServerContext* context, const ::zsearch::AnonymousRecord* request, ::zsearch::AnonymousDelta* response);
    virtual ::grpc::Status GetCryptographicKey(::grpc::ServerContext* context, const ::zsearch::AnonymousQuery* request, ::zsearch::AnonymousQueryResponse* response);
    virtual ::grpc::Status UpsertCryptographicKey(::grpc::ServerContext* context, const ::zsearch::AnonymousRecord* request, ::zsearch::AnonymousDelta* response);
    virtual ::grpc::Status GetPublicLocation(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::LocationAtom* response);
    virtual ::grpc::Status GetRestrictedLocation(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::LocationAtom* response);
    virtual ::grpc::Status GetWHOIS(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Record* response);
    virtual ::grpc::Status GetUserMetadata(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Record* response);
    virtual ::grpc::Status PutUserMetadata(::grpc::ServerContext* context, const ::zsearch::Record* request, ::zsearch::CommandReply* response);
    virtual ::grpc::Status GetRootStore(::grpc::ServerContext* context, const ::zsearch::RootStoreQuery* request, ::zsearch::RootStoreReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHostIPv4Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetHostIPv4Record() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetHostIPv4Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHostIPv4Record(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::HostQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHostIPv4Record(::grpc::ServerContext* context, ::zsearch::HostQuery* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::HostQueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutHostIPv4Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PutHostIPv4Record() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PutHostIPv4Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutHostIPv4Record(::grpc::ServerContext* context, const ::zsearch::Record* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutHostIPv4Record(::grpc::ServerContext* context, ::zsearch::Record* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::Delta>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DelHostIPv4Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DelHostIPv4Record() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DelHostIPv4Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelHostIPv4Record(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelHostIPv4Record(::grpc::ServerContext* context, ::zsearch::HostQuery* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::Delta>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllIPv4Records : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAllIPv4Records() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetAllIPv4Records() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllIPv4Records(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::HostQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllIPv4Records(::grpc::ServerContext* context, ::zsearch::HostQuery* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::HostQueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHostIPv4Delta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetHostIPv4Delta() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetHostIPv4Delta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHostIPv4Delta(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHostIPv4Delta(::grpc::ServerContext* context, ::zsearch::HostQuery* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::Delta>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHostDomainRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetHostDomainRecord() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetHostDomainRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHostDomainRecord(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::HostQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHostDomainRecord(::grpc::ServerContext* context, ::zsearch::HostQuery* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::HostQueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutHostDomainRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PutHostDomainRecord() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_PutHostDomainRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutHostDomainRecord(::grpc::ServerContext* context, const ::zsearch::Record* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutHostDomainRecord(::grpc::ServerContext* context, ::zsearch::Record* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::Delta>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DelHostDomainRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DelHostDomainRecord() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DelHostDomainRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelHostDomainRecord(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelHostDomainRecord(::grpc::ServerContext* context, ::zsearch::HostQuery* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::Delta>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllDomainRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAllDomainRecords() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetAllDomainRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllDomainRecords(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::HostQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllDomainRecords(::grpc::ServerContext* context, ::zsearch::HostQuery* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::HostQueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetHostDomainDelta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetHostDomainDelta() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetHostDomainDelta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHostDomainDelta(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetHostDomainDelta(::grpc::ServerContext* context, ::zsearch::HostQuery* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::Delta>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetCertificate() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCertificate(::grpc::ServerContext* context, const ::zsearch::AnonymousQuery* request, ::zsearch::AnonymousQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCertificate(::grpc::ServerContext* context, ::zsearch::AnonymousQuery* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::AnonymousQueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpsertCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpsertCertificate() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_UpsertCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertCertificate(::grpc::ServerContext* context, const ::zsearch::AnonymousRecord* request, ::zsearch::AnonymousDelta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpsertCertificate(::grpc::ServerContext* context, ::zsearch::AnonymousRecord* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::AnonymousDelta>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpsertRawCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpsertRawCertificate() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_UpsertRawCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertRawCertificate(::grpc::ServerContext* context, const ::zsearch::AnonymousRecord* request, ::zsearch::AnonymousDelta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpsertRawCertificate(::grpc::ServerContext* context, ::zsearch::AnonymousRecord* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::AnonymousDelta>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCryptographicKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetCryptographicKey() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetCryptographicKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCryptographicKey(::grpc::ServerContext* context, const ::zsearch::AnonymousQuery* request, ::zsearch::AnonymousQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCryptographicKey(::grpc::ServerContext* context, ::zsearch::AnonymousQuery* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::AnonymousQueryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpsertCryptographicKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpsertCryptographicKey() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_UpsertCryptographicKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertCryptographicKey(::grpc::ServerContext* context, const ::zsearch::AnonymousRecord* request, ::zsearch::AnonymousDelta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpsertCryptographicKey(::grpc::ServerContext* context, ::zsearch::AnonymousRecord* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::AnonymousDelta>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPublicLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPublicLocation() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetPublicLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublicLocation(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::LocationAtom* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPublicLocation(::grpc::ServerContext* context, ::zsearch::HostQuery* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::LocationAtom>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRestrictedLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRestrictedLocation() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetRestrictedLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRestrictedLocation(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::LocationAtom* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRestrictedLocation(::grpc::ServerContext* context, ::zsearch::HostQuery* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::LocationAtom>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWHOIS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetWHOIS() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_GetWHOIS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWHOIS(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Record* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWHOIS(::grpc::ServerContext* context, ::zsearch::HostQuery* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::Record>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetUserMetadata() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_GetUserMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserMetadata(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Record* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserMetadata(::grpc::ServerContext* context, ::zsearch::HostQuery* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::Record>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PutUserMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PutUserMetadata() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_PutUserMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutUserMetadata(::grpc::ServerContext* context, const ::zsearch::Record* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPutUserMetadata(::grpc::ServerContext* context, ::zsearch::Record* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::CommandReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRootStore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRootStore() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_GetRootStore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRootStore(::grpc::ServerContext* context, const ::zsearch::RootStoreQuery* request, ::zsearch::RootStoreReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRootStore(::grpc::ServerContext* context, ::zsearch::RootStoreQuery* request, ::grpc::ServerAsyncResponseWriter< ::zsearch::RootStoreReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetHostIPv4Record<WithAsyncMethod_PutHostIPv4Record<WithAsyncMethod_DelHostIPv4Record<WithAsyncMethod_GetAllIPv4Records<WithAsyncMethod_GetHostIPv4Delta<WithAsyncMethod_GetHostDomainRecord<WithAsyncMethod_PutHostDomainRecord<WithAsyncMethod_DelHostDomainRecord<WithAsyncMethod_GetAllDomainRecords<WithAsyncMethod_GetHostDomainDelta<WithAsyncMethod_GetCertificate<WithAsyncMethod_UpsertCertificate<WithAsyncMethod_UpsertRawCertificate<WithAsyncMethod_GetCryptographicKey<WithAsyncMethod_UpsertCryptographicKey<WithAsyncMethod_GetPublicLocation<WithAsyncMethod_GetRestrictedLocation<WithAsyncMethod_GetWHOIS<WithAsyncMethod_GetUserMetadata<WithAsyncMethod_PutUserMetadata<WithAsyncMethod_GetRootStore<Service > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetHostIPv4Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetHostIPv4Record() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetHostIPv4Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHostIPv4Record(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::HostQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutHostIPv4Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PutHostIPv4Record() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PutHostIPv4Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutHostIPv4Record(::grpc::ServerContext* context, const ::zsearch::Record* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DelHostIPv4Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DelHostIPv4Record() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DelHostIPv4Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelHostIPv4Record(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllIPv4Records : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAllIPv4Records() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetAllIPv4Records() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllIPv4Records(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::HostQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHostIPv4Delta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetHostIPv4Delta() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetHostIPv4Delta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHostIPv4Delta(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHostDomainRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetHostDomainRecord() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetHostDomainRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHostDomainRecord(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::HostQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutHostDomainRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PutHostDomainRecord() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_PutHostDomainRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutHostDomainRecord(::grpc::ServerContext* context, const ::zsearch::Record* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DelHostDomainRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DelHostDomainRecord() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DelHostDomainRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DelHostDomainRecord(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllDomainRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAllDomainRecords() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetAllDomainRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllDomainRecords(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::HostQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetHostDomainDelta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetHostDomainDelta() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetHostDomainDelta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetHostDomainDelta(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetCertificate() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCertificate(::grpc::ServerContext* context, const ::zsearch::AnonymousQuery* request, ::zsearch::AnonymousQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpsertCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpsertCertificate() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_UpsertCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertCertificate(::grpc::ServerContext* context, const ::zsearch::AnonymousRecord* request, ::zsearch::AnonymousDelta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpsertRawCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpsertRawCertificate() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_UpsertRawCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertRawCertificate(::grpc::ServerContext* context, const ::zsearch::AnonymousRecord* request, ::zsearch::AnonymousDelta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCryptographicKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetCryptographicKey() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetCryptographicKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCryptographicKey(::grpc::ServerContext* context, const ::zsearch::AnonymousQuery* request, ::zsearch::AnonymousQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpsertCryptographicKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpsertCryptographicKey() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_UpsertCryptographicKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpsertCryptographicKey(::grpc::ServerContext* context, const ::zsearch::AnonymousRecord* request, ::zsearch::AnonymousDelta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPublicLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPublicLocation() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetPublicLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublicLocation(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::LocationAtom* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRestrictedLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRestrictedLocation() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetRestrictedLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRestrictedLocation(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::LocationAtom* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWHOIS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetWHOIS() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_GetWHOIS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWHOIS(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Record* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUserMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetUserMetadata() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_GetUserMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserMetadata(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Record* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PutUserMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PutUserMetadata() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_PutUserMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PutUserMetadata(::grpc::ServerContext* context, const ::zsearch::Record* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRootStore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRootStore() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_GetRootStore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRootStore(::grpc::ServerContext* context, const ::zsearch::RootStoreQuery* request, ::zsearch::RootStoreReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHostIPv4Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetHostIPv4Record() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::zsearch::HostQuery, ::zsearch::HostQueryResponse>(std::bind(&WithStreamedUnaryMethod_GetHostIPv4Record<BaseClass>::StreamedGetHostIPv4Record, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetHostIPv4Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHostIPv4Record(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::HostQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHostIPv4Record(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::HostQuery,::zsearch::HostQueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutHostIPv4Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PutHostIPv4Record() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Record, ::zsearch::Delta>(std::bind(&WithStreamedUnaryMethod_PutHostIPv4Record<BaseClass>::StreamedPutHostIPv4Record, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PutHostIPv4Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutHostIPv4Record(::grpc::ServerContext* context, const ::zsearch::Record* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutHostIPv4Record(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Record,::zsearch::Delta>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DelHostIPv4Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DelHostIPv4Record() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::zsearch::HostQuery, ::zsearch::Delta>(std::bind(&WithStreamedUnaryMethod_DelHostIPv4Record<BaseClass>::StreamedDelHostIPv4Record, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DelHostIPv4Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DelHostIPv4Record(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelHostIPv4Record(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::HostQuery,::zsearch::Delta>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllIPv4Records : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAllIPv4Records() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::zsearch::HostQuery, ::zsearch::HostQueryResponse>(std::bind(&WithStreamedUnaryMethod_GetAllIPv4Records<BaseClass>::StreamedGetAllIPv4Records, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAllIPv4Records() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllIPv4Records(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::HostQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllIPv4Records(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::HostQuery,::zsearch::HostQueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHostIPv4Delta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetHostIPv4Delta() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::zsearch::HostQuery, ::zsearch::Delta>(std::bind(&WithStreamedUnaryMethod_GetHostIPv4Delta<BaseClass>::StreamedGetHostIPv4Delta, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetHostIPv4Delta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHostIPv4Delta(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHostIPv4Delta(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::HostQuery,::zsearch::Delta>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHostDomainRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetHostDomainRecord() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::zsearch::HostQuery, ::zsearch::HostQueryResponse>(std::bind(&WithStreamedUnaryMethod_GetHostDomainRecord<BaseClass>::StreamedGetHostDomainRecord, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetHostDomainRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHostDomainRecord(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::HostQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHostDomainRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::HostQuery,::zsearch::HostQueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutHostDomainRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PutHostDomainRecord() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Record, ::zsearch::Delta>(std::bind(&WithStreamedUnaryMethod_PutHostDomainRecord<BaseClass>::StreamedPutHostDomainRecord, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PutHostDomainRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutHostDomainRecord(::grpc::ServerContext* context, const ::zsearch::Record* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutHostDomainRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Record,::zsearch::Delta>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DelHostDomainRecord : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DelHostDomainRecord() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::StreamedUnaryHandler< ::zsearch::HostQuery, ::zsearch::Delta>(std::bind(&WithStreamedUnaryMethod_DelHostDomainRecord<BaseClass>::StreamedDelHostDomainRecord, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DelHostDomainRecord() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DelHostDomainRecord(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelHostDomainRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::HostQuery,::zsearch::Delta>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllDomainRecords : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAllDomainRecords() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::StreamedUnaryHandler< ::zsearch::HostQuery, ::zsearch::HostQueryResponse>(std::bind(&WithStreamedUnaryMethod_GetAllDomainRecords<BaseClass>::StreamedGetAllDomainRecords, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAllDomainRecords() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllDomainRecords(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::HostQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllDomainRecords(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::HostQuery,::zsearch::HostQueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetHostDomainDelta : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetHostDomainDelta() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::StreamedUnaryHandler< ::zsearch::HostQuery, ::zsearch::Delta>(std::bind(&WithStreamedUnaryMethod_GetHostDomainDelta<BaseClass>::StreamedGetHostDomainDelta, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetHostDomainDelta() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetHostDomainDelta(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Delta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetHostDomainDelta(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::HostQuery,::zsearch::Delta>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetCertificate() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::StreamedUnaryHandler< ::zsearch::AnonymousQuery, ::zsearch::AnonymousQueryResponse>(std::bind(&WithStreamedUnaryMethod_GetCertificate<BaseClass>::StreamedGetCertificate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCertificate(::grpc::ServerContext* context, const ::zsearch::AnonymousQuery* request, ::zsearch::AnonymousQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCertificate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::AnonymousQuery,::zsearch::AnonymousQueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpsertCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpsertCertificate() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::StreamedUnaryHandler< ::zsearch::AnonymousRecord, ::zsearch::AnonymousDelta>(std::bind(&WithStreamedUnaryMethod_UpsertCertificate<BaseClass>::StreamedUpsertCertificate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpsertCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpsertCertificate(::grpc::ServerContext* context, const ::zsearch::AnonymousRecord* request, ::zsearch::AnonymousDelta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpsertCertificate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::AnonymousRecord,::zsearch::AnonymousDelta>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpsertRawCertificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpsertRawCertificate() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::StreamedUnaryHandler< ::zsearch::AnonymousRecord, ::zsearch::AnonymousDelta>(std::bind(&WithStreamedUnaryMethod_UpsertRawCertificate<BaseClass>::StreamedUpsertRawCertificate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpsertRawCertificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpsertRawCertificate(::grpc::ServerContext* context, const ::zsearch::AnonymousRecord* request, ::zsearch::AnonymousDelta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpsertRawCertificate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::AnonymousRecord,::zsearch::AnonymousDelta>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCryptographicKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetCryptographicKey() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::StreamedUnaryHandler< ::zsearch::AnonymousQuery, ::zsearch::AnonymousQueryResponse>(std::bind(&WithStreamedUnaryMethod_GetCryptographicKey<BaseClass>::StreamedGetCryptographicKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCryptographicKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCryptographicKey(::grpc::ServerContext* context, const ::zsearch::AnonymousQuery* request, ::zsearch::AnonymousQueryResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCryptographicKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::AnonymousQuery,::zsearch::AnonymousQueryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpsertCryptographicKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpsertCryptographicKey() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::StreamedUnaryHandler< ::zsearch::AnonymousRecord, ::zsearch::AnonymousDelta>(std::bind(&WithStreamedUnaryMethod_UpsertCryptographicKey<BaseClass>::StreamedUpsertCryptographicKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpsertCryptographicKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpsertCryptographicKey(::grpc::ServerContext* context, const ::zsearch::AnonymousRecord* request, ::zsearch::AnonymousDelta* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpsertCryptographicKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::AnonymousRecord,::zsearch::AnonymousDelta>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPublicLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPublicLocation() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::StreamedUnaryHandler< ::zsearch::HostQuery, ::zsearch::LocationAtom>(std::bind(&WithStreamedUnaryMethod_GetPublicLocation<BaseClass>::StreamedGetPublicLocation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPublicLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPublicLocation(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::LocationAtom* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPublicLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::HostQuery,::zsearch::LocationAtom>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRestrictedLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRestrictedLocation() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::StreamedUnaryHandler< ::zsearch::HostQuery, ::zsearch::LocationAtom>(std::bind(&WithStreamedUnaryMethod_GetRestrictedLocation<BaseClass>::StreamedGetRestrictedLocation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRestrictedLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRestrictedLocation(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::LocationAtom* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRestrictedLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::HostQuery,::zsearch::LocationAtom>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWHOIS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetWHOIS() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::StreamedUnaryHandler< ::zsearch::HostQuery, ::zsearch::Record>(std::bind(&WithStreamedUnaryMethod_GetWHOIS<BaseClass>::StreamedGetWHOIS, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetWHOIS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWHOIS(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Record* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWHOIS(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::HostQuery,::zsearch::Record>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUserMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetUserMetadata() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::StreamedUnaryHandler< ::zsearch::HostQuery, ::zsearch::Record>(std::bind(&WithStreamedUnaryMethod_GetUserMetadata<BaseClass>::StreamedGetUserMetadata, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetUserMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserMetadata(::grpc::ServerContext* context, const ::zsearch::HostQuery* request, ::zsearch::Record* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUserMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::HostQuery,::zsearch::Record>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PutUserMetadata : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PutUserMetadata() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::StreamedUnaryHandler< ::zsearch::Record, ::zsearch::CommandReply>(std::bind(&WithStreamedUnaryMethod_PutUserMetadata<BaseClass>::StreamedPutUserMetadata, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PutUserMetadata() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PutUserMetadata(::grpc::ServerContext* context, const ::zsearch::Record* request, ::zsearch::CommandReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPutUserMetadata(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::Record,::zsearch::CommandReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRootStore : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetRootStore() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::StreamedUnaryHandler< ::zsearch::RootStoreQuery, ::zsearch::RootStoreReply>(std::bind(&WithStreamedUnaryMethod_GetRootStore<BaseClass>::StreamedGetRootStore, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetRootStore() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRootStore(::grpc::ServerContext* context, const ::zsearch::RootStoreQuery* request, ::zsearch::RootStoreReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRootStore(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::zsearch::RootStoreQuery,::zsearch::RootStoreReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetHostIPv4Record<WithStreamedUnaryMethod_PutHostIPv4Record<WithStreamedUnaryMethod_DelHostIPv4Record<WithStreamedUnaryMethod_GetAllIPv4Records<WithStreamedUnaryMethod_GetHostIPv4Delta<WithStreamedUnaryMethod_GetHostDomainRecord<WithStreamedUnaryMethod_PutHostDomainRecord<WithStreamedUnaryMethod_DelHostDomainRecord<WithStreamedUnaryMethod_GetAllDomainRecords<WithStreamedUnaryMethod_GetHostDomainDelta<WithStreamedUnaryMethod_GetCertificate<WithStreamedUnaryMethod_UpsertCertificate<WithStreamedUnaryMethod_UpsertRawCertificate<WithStreamedUnaryMethod_GetCryptographicKey<WithStreamedUnaryMethod_UpsertCryptographicKey<WithStreamedUnaryMethod_GetPublicLocation<WithStreamedUnaryMethod_GetRestrictedLocation<WithStreamedUnaryMethod_GetWHOIS<WithStreamedUnaryMethod_GetUserMetadata<WithStreamedUnaryMethod_PutUserMetadata<WithStreamedUnaryMethod_GetRootStore<Service > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetHostIPv4Record<WithStreamedUnaryMethod_PutHostIPv4Record<WithStreamedUnaryMethod_DelHostIPv4Record<WithStreamedUnaryMethod_GetAllIPv4Records<WithStreamedUnaryMethod_GetHostIPv4Delta<WithStreamedUnaryMethod_GetHostDomainRecord<WithStreamedUnaryMethod_PutHostDomainRecord<WithStreamedUnaryMethod_DelHostDomainRecord<WithStreamedUnaryMethod_GetAllDomainRecords<WithStreamedUnaryMethod_GetHostDomainDelta<WithStreamedUnaryMethod_GetCertificate<WithStreamedUnaryMethod_UpsertCertificate<WithStreamedUnaryMethod_UpsertRawCertificate<WithStreamedUnaryMethod_GetCryptographicKey<WithStreamedUnaryMethod_UpsertCryptographicKey<WithStreamedUnaryMethod_GetPublicLocation<WithStreamedUnaryMethod_GetRestrictedLocation<WithStreamedUnaryMethod_GetWHOIS<WithStreamedUnaryMethod_GetUserMetadata<WithStreamedUnaryMethod_PutUserMetadata<WithStreamedUnaryMethod_GetRootStore<Service > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace zsearch


#endif  // GRPC_search_2eproto__INCLUDED
