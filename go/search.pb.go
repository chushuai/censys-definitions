// Code generated by protoc-gen-go.
// source: search.proto
// DO NOT EDIT!

package censys_definitions

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AdminService service

type AdminServiceClient interface {
	Shutdown(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
	Status(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
	Statistics(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
	PruneIPv4(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
	PruneDomain(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
	UpdateASData(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
	UpdateLocationData(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
	ValidateCertificates(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
	FixCertificateSource(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
	DumpIPv4ToJSON(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
	DumpDomainToJSON(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
	DumpCertificatesToJSON(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
	DumpKeysToJSON(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
	RegenerateIPv4Deltas(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
	RegenerateDomainDeltas(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
	RegenerateCertificateDeltas(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
	RegenerateSingleCertificateDelta(ctx context.Context, in *AnonymousQuery, opts ...grpc.CallOption) (*CommandReply, error)
	Ping(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
}

type adminServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdminServiceClient(cc *grpc.ClientConn) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) Shutdown(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/Shutdown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Status(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Statistics(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/Statistics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) PruneIPv4(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/PruneIPv4", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) PruneDomain(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/PruneDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateASData(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/UpdateASData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateLocationData(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/UpdateLocationData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ValidateCertificates(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/ValidateCertificates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FixCertificateSource(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/FixCertificateSource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DumpIPv4ToJSON(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/DumpIPv4ToJSON", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DumpDomainToJSON(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/DumpDomainToJSON", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DumpCertificatesToJSON(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/DumpCertificatesToJSON", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DumpKeysToJSON(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/DumpKeysToJSON", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RegenerateIPv4Deltas(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/RegenerateIPv4Deltas", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RegenerateDomainDeltas(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/RegenerateDomainDeltas", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RegenerateCertificateDeltas(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/RegenerateCertificateDeltas", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RegenerateSingleCertificateDelta(ctx context.Context, in *AnonymousQuery, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/RegenerateSingleCertificateDelta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) Ping(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.AdminService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdminService service

type AdminServiceServer interface {
	Shutdown(context.Context, *Command) (*CommandReply, error)
	Status(context.Context, *Command) (*CommandReply, error)
	Statistics(context.Context, *Command) (*CommandReply, error)
	PruneIPv4(context.Context, *Command) (*CommandReply, error)
	PruneDomain(context.Context, *Command) (*CommandReply, error)
	UpdateASData(context.Context, *Command) (*CommandReply, error)
	UpdateLocationData(context.Context, *Command) (*CommandReply, error)
	ValidateCertificates(context.Context, *Command) (*CommandReply, error)
	FixCertificateSource(context.Context, *Command) (*CommandReply, error)
	DumpIPv4ToJSON(context.Context, *Command) (*CommandReply, error)
	DumpDomainToJSON(context.Context, *Command) (*CommandReply, error)
	DumpCertificatesToJSON(context.Context, *Command) (*CommandReply, error)
	DumpKeysToJSON(context.Context, *Command) (*CommandReply, error)
	RegenerateIPv4Deltas(context.Context, *Command) (*CommandReply, error)
	RegenerateDomainDeltas(context.Context, *Command) (*CommandReply, error)
	RegenerateCertificateDeltas(context.Context, *Command) (*CommandReply, error)
	RegenerateSingleCertificateDelta(context.Context, *AnonymousQuery) (*CommandReply, error)
	Ping(context.Context, *Command) (*CommandReply, error)
}

func RegisterAdminServiceServer(s *grpc.Server, srv AdminServiceServer) {
	s.RegisterService(&_AdminService_serviceDesc, srv)
}

func _AdminService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Shutdown(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Status(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Statistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Statistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/Statistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Statistics(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_PruneIPv4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).PruneIPv4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/PruneIPv4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).PruneIPv4(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_PruneDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).PruneDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/PruneDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).PruneDomain(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateASData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateASData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/UpdateASData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateASData(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateLocationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateLocationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/UpdateLocationData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateLocationData(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ValidateCertificates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ValidateCertificates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/ValidateCertificates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ValidateCertificates(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FixCertificateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FixCertificateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/FixCertificateSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FixCertificateSource(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DumpIPv4ToJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DumpIPv4ToJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/DumpIPv4ToJSON",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DumpIPv4ToJSON(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DumpDomainToJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DumpDomainToJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/DumpDomainToJSON",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DumpDomainToJSON(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DumpCertificatesToJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DumpCertificatesToJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/DumpCertificatesToJSON",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DumpCertificatesToJSON(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DumpKeysToJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DumpKeysToJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/DumpKeysToJSON",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DumpKeysToJSON(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RegenerateIPv4Deltas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RegenerateIPv4Deltas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/RegenerateIPv4Deltas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RegenerateIPv4Deltas(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RegenerateDomainDeltas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RegenerateDomainDeltas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/RegenerateDomainDeltas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RegenerateDomainDeltas(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RegenerateCertificateDeltas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RegenerateCertificateDeltas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/RegenerateCertificateDeltas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RegenerateCertificateDeltas(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RegenerateSingleCertificateDelta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnonymousQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RegenerateSingleCertificateDelta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/RegenerateSingleCertificateDelta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RegenerateSingleCertificateDelta(ctx, req.(*AnonymousQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.AdminService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Ping(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "censys_definitions.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Shutdown",
			Handler:    _AdminService_Shutdown_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _AdminService_Status_Handler,
		},
		{
			MethodName: "Statistics",
			Handler:    _AdminService_Statistics_Handler,
		},
		{
			MethodName: "PruneIPv4",
			Handler:    _AdminService_PruneIPv4_Handler,
		},
		{
			MethodName: "PruneDomain",
			Handler:    _AdminService_PruneDomain_Handler,
		},
		{
			MethodName: "UpdateASData",
			Handler:    _AdminService_UpdateASData_Handler,
		},
		{
			MethodName: "UpdateLocationData",
			Handler:    _AdminService_UpdateLocationData_Handler,
		},
		{
			MethodName: "ValidateCertificates",
			Handler:    _AdminService_ValidateCertificates_Handler,
		},
		{
			MethodName: "FixCertificateSource",
			Handler:    _AdminService_FixCertificateSource_Handler,
		},
		{
			MethodName: "DumpIPv4ToJSON",
			Handler:    _AdminService_DumpIPv4ToJSON_Handler,
		},
		{
			MethodName: "DumpDomainToJSON",
			Handler:    _AdminService_DumpDomainToJSON_Handler,
		},
		{
			MethodName: "DumpCertificatesToJSON",
			Handler:    _AdminService_DumpCertificatesToJSON_Handler,
		},
		{
			MethodName: "DumpKeysToJSON",
			Handler:    _AdminService_DumpKeysToJSON_Handler,
		},
		{
			MethodName: "RegenerateIPv4Deltas",
			Handler:    _AdminService_RegenerateIPv4Deltas_Handler,
		},
		{
			MethodName: "RegenerateDomainDeltas",
			Handler:    _AdminService_RegenerateDomainDeltas_Handler,
		},
		{
			MethodName: "RegenerateCertificateDeltas",
			Handler:    _AdminService_RegenerateCertificateDeltas_Handler,
		},
		{
			MethodName: "RegenerateSingleCertificateDelta",
			Handler:    _AdminService_RegenerateSingleCertificateDelta_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _AdminService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search.proto",
}

// Client API for QueryService service

type QueryServiceClient interface {
	GetHostIPv4Record(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*HostQueryResponse, error)
	PutHostIPv4Record(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Delta, error)
	DelHostIPv4Record(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*Delta, error)
	GetAllIPv4Records(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*HostQueryResponse, error)
	GetHostIPv4Delta(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*Delta, error)
	GetHostDomainRecord(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*HostQueryResponse, error)
	PutHostDomainRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Delta, error)
	DelHostDomainRecord(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*Delta, error)
	GetAllDomainRecords(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*HostQueryResponse, error)
	GetHostDomainDelta(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*Delta, error)
	GetCertificate(ctx context.Context, in *AnonymousQuery, opts ...grpc.CallOption) (*AnonymousQueryResponse, error)
	UpsertCertificate(ctx context.Context, in *AnonymousRecord, opts ...grpc.CallOption) (*AnonymousDelta, error)
	UpsertRawCertificate(ctx context.Context, in *AnonymousRecord, opts ...grpc.CallOption) (*AnonymousDelta, error)
	GetCryptographicKey(ctx context.Context, in *AnonymousQuery, opts ...grpc.CallOption) (*AnonymousQueryResponse, error)
	UpsertCryptographicKey(ctx context.Context, in *AnonymousRecord, opts ...grpc.CallOption) (*AnonymousDelta, error)
	GetPublicLocation(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*LocationAtom, error)
	GetRestrictedLocation(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*LocationAtom, error)
	GetWHOIS(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*Record, error)
	GetUserMetadata(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*Record, error)
	PutUserMetadata(ctx context.Context, in *Record, opts ...grpc.CallOption) (*CommandReply, error)
	GetRootStore(ctx context.Context, in *RootStoreQuery, opts ...grpc.CallOption) (*RootStoreReply, error)
}

type queryServiceClient struct {
	cc *grpc.ClientConn
}

func NewQueryServiceClient(cc *grpc.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) GetHostIPv4Record(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*HostQueryResponse, error) {
	out := new(HostQueryResponse)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/GetHostIPv4Record", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) PutHostIPv4Record(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Delta, error) {
	out := new(Delta)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/PutHostIPv4Record", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) DelHostIPv4Record(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*Delta, error) {
	out := new(Delta)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/DelHostIPv4Record", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetAllIPv4Records(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*HostQueryResponse, error) {
	out := new(HostQueryResponse)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/GetAllIPv4Records", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetHostIPv4Delta(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*Delta, error) {
	out := new(Delta)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/GetHostIPv4Delta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetHostDomainRecord(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*HostQueryResponse, error) {
	out := new(HostQueryResponse)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/GetHostDomainRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) PutHostDomainRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Delta, error) {
	out := new(Delta)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/PutHostDomainRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) DelHostDomainRecord(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*Delta, error) {
	out := new(Delta)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/DelHostDomainRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetAllDomainRecords(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*HostQueryResponse, error) {
	out := new(HostQueryResponse)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/GetAllDomainRecords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetHostDomainDelta(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*Delta, error) {
	out := new(Delta)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/GetHostDomainDelta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetCertificate(ctx context.Context, in *AnonymousQuery, opts ...grpc.CallOption) (*AnonymousQueryResponse, error) {
	out := new(AnonymousQueryResponse)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/GetCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) UpsertCertificate(ctx context.Context, in *AnonymousRecord, opts ...grpc.CallOption) (*AnonymousDelta, error) {
	out := new(AnonymousDelta)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/UpsertCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) UpsertRawCertificate(ctx context.Context, in *AnonymousRecord, opts ...grpc.CallOption) (*AnonymousDelta, error) {
	out := new(AnonymousDelta)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/UpsertRawCertificate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetCryptographicKey(ctx context.Context, in *AnonymousQuery, opts ...grpc.CallOption) (*AnonymousQueryResponse, error) {
	out := new(AnonymousQueryResponse)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/GetCryptographicKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) UpsertCryptographicKey(ctx context.Context, in *AnonymousRecord, opts ...grpc.CallOption) (*AnonymousDelta, error) {
	out := new(AnonymousDelta)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/UpsertCryptographicKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetPublicLocation(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*LocationAtom, error) {
	out := new(LocationAtom)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/GetPublicLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetRestrictedLocation(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*LocationAtom, error) {
	out := new(LocationAtom)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/GetRestrictedLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetWHOIS(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/GetWHOIS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetUserMetadata(ctx context.Context, in *HostQuery, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/GetUserMetadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) PutUserMetadata(ctx context.Context, in *Record, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/PutUserMetadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetRootStore(ctx context.Context, in *RootStoreQuery, opts ...grpc.CallOption) (*RootStoreReply, error) {
	out := new(RootStoreReply)
	err := grpc.Invoke(ctx, "/censys_definitions.QueryService/GetRootStore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for QueryService service

type QueryServiceServer interface {
	GetHostIPv4Record(context.Context, *HostQuery) (*HostQueryResponse, error)
	PutHostIPv4Record(context.Context, *Record) (*Delta, error)
	DelHostIPv4Record(context.Context, *HostQuery) (*Delta, error)
	GetAllIPv4Records(context.Context, *HostQuery) (*HostQueryResponse, error)
	GetHostIPv4Delta(context.Context, *HostQuery) (*Delta, error)
	GetHostDomainRecord(context.Context, *HostQuery) (*HostQueryResponse, error)
	PutHostDomainRecord(context.Context, *Record) (*Delta, error)
	DelHostDomainRecord(context.Context, *HostQuery) (*Delta, error)
	GetAllDomainRecords(context.Context, *HostQuery) (*HostQueryResponse, error)
	GetHostDomainDelta(context.Context, *HostQuery) (*Delta, error)
	GetCertificate(context.Context, *AnonymousQuery) (*AnonymousQueryResponse, error)
	UpsertCertificate(context.Context, *AnonymousRecord) (*AnonymousDelta, error)
	UpsertRawCertificate(context.Context, *AnonymousRecord) (*AnonymousDelta, error)
	GetCryptographicKey(context.Context, *AnonymousQuery) (*AnonymousQueryResponse, error)
	UpsertCryptographicKey(context.Context, *AnonymousRecord) (*AnonymousDelta, error)
	GetPublicLocation(context.Context, *HostQuery) (*LocationAtom, error)
	GetRestrictedLocation(context.Context, *HostQuery) (*LocationAtom, error)
	GetWHOIS(context.Context, *HostQuery) (*Record, error)
	GetUserMetadata(context.Context, *HostQuery) (*Record, error)
	PutUserMetadata(context.Context, *Record) (*CommandReply, error)
	GetRootStore(context.Context, *RootStoreQuery) (*RootStoreReply, error)
}

func RegisterQueryServiceServer(s *grpc.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_GetHostIPv4Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetHostIPv4Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/GetHostIPv4Record",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetHostIPv4Record(ctx, req.(*HostQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_PutHostIPv4Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).PutHostIPv4Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/PutHostIPv4Record",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).PutHostIPv4Record(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_DelHostIPv4Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).DelHostIPv4Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/DelHostIPv4Record",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).DelHostIPv4Record(ctx, req.(*HostQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetAllIPv4Records_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetAllIPv4Records(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/GetAllIPv4Records",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetAllIPv4Records(ctx, req.(*HostQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetHostIPv4Delta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetHostIPv4Delta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/GetHostIPv4Delta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetHostIPv4Delta(ctx, req.(*HostQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetHostDomainRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetHostDomainRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/GetHostDomainRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetHostDomainRecord(ctx, req.(*HostQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_PutHostDomainRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).PutHostDomainRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/PutHostDomainRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).PutHostDomainRecord(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_DelHostDomainRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).DelHostDomainRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/DelHostDomainRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).DelHostDomainRecord(ctx, req.(*HostQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetAllDomainRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetAllDomainRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/GetAllDomainRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetAllDomainRecords(ctx, req.(*HostQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetHostDomainDelta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetHostDomainDelta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/GetHostDomainDelta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetHostDomainDelta(ctx, req.(*HostQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnonymousQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/GetCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetCertificate(ctx, req.(*AnonymousQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_UpsertCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnonymousRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).UpsertCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/UpsertCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).UpsertCertificate(ctx, req.(*AnonymousRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_UpsertRawCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnonymousRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).UpsertRawCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/UpsertRawCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).UpsertRawCertificate(ctx, req.(*AnonymousRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetCryptographicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnonymousQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetCryptographicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/GetCryptographicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetCryptographicKey(ctx, req.(*AnonymousQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_UpsertCryptographicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnonymousRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).UpsertCryptographicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/UpsertCryptographicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).UpsertCryptographicKey(ctx, req.(*AnonymousRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetPublicLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetPublicLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/GetPublicLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetPublicLocation(ctx, req.(*HostQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetRestrictedLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetRestrictedLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/GetRestrictedLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetRestrictedLocation(ctx, req.(*HostQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetWHOIS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetWHOIS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/GetWHOIS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetWHOIS(ctx, req.(*HostQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetUserMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetUserMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/GetUserMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetUserMetadata(ctx, req.(*HostQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_PutUserMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).PutUserMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/PutUserMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).PutUserMetadata(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetRootStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RootStoreQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetRootStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/censys_definitions.QueryService/GetRootStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetRootStore(ctx, req.(*RootStoreQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "censys_definitions.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostIPv4Record",
			Handler:    _QueryService_GetHostIPv4Record_Handler,
		},
		{
			MethodName: "PutHostIPv4Record",
			Handler:    _QueryService_PutHostIPv4Record_Handler,
		},
		{
			MethodName: "DelHostIPv4Record",
			Handler:    _QueryService_DelHostIPv4Record_Handler,
		},
		{
			MethodName: "GetAllIPv4Records",
			Handler:    _QueryService_GetAllIPv4Records_Handler,
		},
		{
			MethodName: "GetHostIPv4Delta",
			Handler:    _QueryService_GetHostIPv4Delta_Handler,
		},
		{
			MethodName: "GetHostDomainRecord",
			Handler:    _QueryService_GetHostDomainRecord_Handler,
		},
		{
			MethodName: "PutHostDomainRecord",
			Handler:    _QueryService_PutHostDomainRecord_Handler,
		},
		{
			MethodName: "DelHostDomainRecord",
			Handler:    _QueryService_DelHostDomainRecord_Handler,
		},
		{
			MethodName: "GetAllDomainRecords",
			Handler:    _QueryService_GetAllDomainRecords_Handler,
		},
		{
			MethodName: "GetHostDomainDelta",
			Handler:    _QueryService_GetHostDomainDelta_Handler,
		},
		{
			MethodName: "GetCertificate",
			Handler:    _QueryService_GetCertificate_Handler,
		},
		{
			MethodName: "UpsertCertificate",
			Handler:    _QueryService_UpsertCertificate_Handler,
		},
		{
			MethodName: "UpsertRawCertificate",
			Handler:    _QueryService_UpsertRawCertificate_Handler,
		},
		{
			MethodName: "GetCryptographicKey",
			Handler:    _QueryService_GetCryptographicKey_Handler,
		},
		{
			MethodName: "UpsertCryptographicKey",
			Handler:    _QueryService_UpsertCryptographicKey_Handler,
		},
		{
			MethodName: "GetPublicLocation",
			Handler:    _QueryService_GetPublicLocation_Handler,
		},
		{
			MethodName: "GetRestrictedLocation",
			Handler:    _QueryService_GetRestrictedLocation_Handler,
		},
		{
			MethodName: "GetWHOIS",
			Handler:    _QueryService_GetWHOIS_Handler,
		},
		{
			MethodName: "GetUserMetadata",
			Handler:    _QueryService_GetUserMetadata_Handler,
		},
		{
			MethodName: "PutUserMetadata",
			Handler:    _QueryService_PutUserMetadata_Handler,
		},
		{
			MethodName: "GetRootStore",
			Handler:    _QueryService_GetRootStore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search.proto",
}

func init() { proto.RegisterFile("search.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 670 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0xdd, 0x4e, 0xdb, 0x4a,
	0x10, 0xc7, 0xb9, 0x38, 0x42, 0x30, 0x27, 0x22, 0xc4, 0x70, 0x90, 0x4e, 0x50, 0x25, 0x44, 0xd5,
	0x9b, 0x5e, 0x70, 0x41, 0xfb, 0x02, 0x11, 0x51, 0x0d, 0x05, 0x82, 0x13, 0x37, 0xd0, 0x0f, 0x95,
	0x6a, 0xb1, 0x87, 0x64, 0x2b, 0x7b, 0xd7, 0xda, 0x1d, 0x43, 0xfd, 0x0e, 0x7d, 0xc1, 0xbe, 0x4d,
	0xe5, 0x8f, 0x34, 0x0e, 0x44, 0x4e, 0xa8, 0x97, 0xbb, 0x28, 0x33, 0xfe, 0xcd, 0xec, 0xff, 0xbf,
	0x3b, 0xf6, 0x42, 0x43, 0x23, 0x53, 0xde, 0xf8, 0x20, 0x52, 0x92, 0xa4, 0x65, 0x79, 0x28, 0x74,
	0xa2, 0xbf, 0xf9, 0x78, 0xcb, 0x05, 0x27, 0x2e, 0x85, 0x6e, 0x37, 0x99, 0x90, 0x42, 0x93, 0x54,
	0x98, 0x27, 0xb5, 0x9b, 0x63, 0xa9, 0xa9, 0xfc, 0xc7, 0xba, 0x8a, 0xbc, 0xfc, 0xe7, 0xe1, 0xcf,
	0x06, 0x34, 0x3a, 0x7e, 0xc8, 0x85, 0x8b, 0xea, 0x8e, 0x7b, 0x68, 0x9d, 0xc2, 0x9a, 0x3b, 0x8e,
	0xc9, 0x97, 0xf7, 0xc2, 0xda, 0x3d, 0x78, 0x8c, 0x3f, 0x38, 0x92, 0x61, 0xc8, 0x84, 0xdf, 0xde,
	0xab, 0x08, 0x0e, 0x30, 0x0a, 0x92, 0xfd, 0x15, 0xeb, 0x04, 0x56, 0x5d, 0x62, 0x14, 0xeb, 0xfa,
	0xa8, 0x73, 0x80, 0x14, 0xc5, 0x35, 0x71, 0xcf, 0x00, 0xee, 0x0c, 0xd6, 0x1d, 0x15, 0x0b, 0x3c,
	0x71, 0xee, 0xde, 0xd6, 0xa7, 0xf5, 0xe0, 0xdf, 0x8c, 0xd6, 0x95, 0x21, 0xe3, 0x06, 0x74, 0xbb,
	0x80, 0xc6, 0x30, 0xf2, 0x19, 0x61, 0xc7, 0xed, 0x32, 0x62, 0xf5, 0x81, 0x43, 0xb0, 0x72, 0xe0,
	0x99, 0xf4, 0x58, 0x9a, 0x61, 0x06, 0x7b, 0x05, 0xdb, 0x97, 0x2c, 0xe0, 0x29, 0xf8, 0x08, 0x15,
	0xf1, 0x5b, 0xee, 0x31, 0x42, 0x6d, 0x04, 0xfc, 0x8e, 0xff, 0x28, 0x31, 0x5d, 0x19, 0x2b, 0x0f,
	0xeb, 0x83, 0xfb, 0xb0, 0xd1, 0x8d, 0xc3, 0x28, 0xb5, 0xfd, 0x83, 0x7c, 0xef, 0x5e, 0xf4, 0xea,
	0x23, 0x5d, 0xd8, 0x4c, 0x91, 0xb9, 0xf7, 0xa6, 0xa0, 0x9f, 0x60, 0x27, 0x85, 0x96, 0x55, 0x35,
	0x85, 0x2e, 0x24, 0x38, 0xc5, 0xc4, 0x18, 0xf2, 0x0a, 0xb6, 0x07, 0x38, 0x42, 0x81, 0x8a, 0x51,
	0x76, 0xa4, 0xba, 0x18, 0x10, 0xd3, 0x46, 0x64, 0x98, 0x82, 0x73, 0x85, 0x4d, 0xa1, 0xaf, 0x61,
	0x77, 0x8a, 0x2e, 0xe9, 0x6c, 0x8a, 0xff, 0x1d, 0xf6, 0xa6, 0x7c, 0x97, 0x8b, 0x51, 0xf0, 0xa8,
	0x8a, 0xb5, 0x3f, 0x8f, 0xd3, 0x11, 0x52, 0x24, 0xa1, 0x8c, 0x75, 0x3f, 0x46, 0x95, 0x2c, 0x55,
	0xcb, 0x86, 0x7f, 0x1c, 0x2e, 0x46, 0xb5, 0x9b, 0x3e, 0xfc, 0xb5, 0x01, 0x8d, 0xac, 0xec, 0xe4,
	0x75, 0xf0, 0x05, 0x5a, 0x36, 0xd2, 0xb1, 0xd4, 0x94, 0xda, 0x3a, 0x40, 0x4f, 0x2a, 0xdf, 0x7a,
	0x31, 0x8f, 0x94, 0xe6, 0xe4, 0x1d, 0xbf, 0xaa, 0x0c, 0x0f, 0x50, 0x47, 0x52, 0x68, 0xcc, 0x86,
	0x70, 0xcb, 0x89, 0x1f, 0xc2, 0xdb, 0xf3, 0x9e, 0xce, 0x63, 0xed, 0xff, 0xe7, 0xc5, 0x32, 0x29,
	0xb3, 0xa1, 0xd9, 0xea, 0x62, 0xf0, 0xb4, 0x56, 0x2b, 0x81, 0xf9, 0xda, 0x3b, 0x41, 0x30, 0xe5,
	0x69, 0x63, 0x6b, 0xef, 0xc1, 0x66, 0x49, 0xd8, 0x7c, 0x3b, 0xd4, 0x69, 0xf6, 0x2b, 0x6c, 0x15,
	0xbc, 0xfc, 0x98, 0x18, 0xb6, 0xaa, 0x07, 0x5b, 0x85, 0x55, 0x33, 0xf8, 0xbf, 0x36, 0xab, 0x0f,
	0x5b, 0x85, 0x59, 0x4f, 0x69, 0x77, 0x09, 0x05, 0x3a, 0x41, 0x50, 0x26, 0x9a, 0x33, 0xcc, 0x01,
	0x6b, 0x46, 0xe0, 0xfa, 0x96, 0xdd, 0xc0, 0x86, 0x8d, 0x54, 0x1a, 0x0a, 0x4b, 0xcd, 0x83, 0xd7,
	0x8b, 0x73, 0x4a, 0x5d, 0x5f, 0x43, 0x6b, 0x18, 0x69, 0x54, 0x33, 0x65, 0x5e, 0x56, 0x22, 0x0a,
	0xfb, 0xaa, 0x7b, 0x99, 0xac, 0x81, 0xc1, 0x76, 0xce, 0x1f, 0xb0, 0xfb, 0x67, 0x2a, 0x31, 0xca,
	0x7c, 0x3d, 0x52, 0x49, 0x44, 0x72, 0xa4, 0x58, 0x34, 0xe6, 0xde, 0x29, 0x26, 0xcf, 0xa0, 0x95,
	0x07, 0x3b, 0x85, 0x56, 0x0f, 0x6b, 0x19, 0x5c, 0xcd, 0x65, 0x36, 0x54, 0x9c, 0xf8, 0x26, 0xe0,
	0xde, 0xe4, 0x63, 0x6c, 0xd1, 0x2e, 0x9a, 0x3b, 0xb9, 0x27, 0x0f, 0x77, 0x48, 0x86, 0xfb, 0x2b,
	0xd6, 0x67, 0xf8, 0xcf, 0x46, 0x1a, 0xa0, 0x26, 0xc5, 0x3d, 0x42, 0xdf, 0x24, 0xdb, 0x86, 0x35,
	0x1b, 0xe9, 0xea, 0xf8, 0xe2, 0xc4, 0x5d, 0x84, 0xab, 0x18, 0x08, 0xd9, 0x14, 0x69, 0xda, 0x48,
	0x43, 0x8d, 0xea, 0x1c, 0x89, 0xf9, 0x6c, 0xf1, 0x01, 0xaa, 0xe6, 0xf5, 0xa1, 0xe9, 0xc4, 0xb3,
	0xbc, 0xaa, 0x89, 0xb4, 0xcc, 0xab, 0xf4, 0x23, 0x34, 0x52, 0x1d, 0xa5, 0x24, 0x37, 0xbd, 0x31,
	0xcd, 0xdf, 0x66, 0x7f, 0xc2, 0x79, 0x93, 0xd5, 0x39, 0x05, 0xf9, 0x66, 0x35, 0xbb, 0x71, 0xbd,
	0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xa3, 0x5b, 0xf6, 0xc2, 0x0d, 0x00, 0x00,
}
