// Code generated by protoc-gen-go.
// source: rpc.proto
// DO NOT EDIT!

package censys_definitions

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CommandReply_CommandStatus int32

const (
	CommandReply_FATAL     CommandReply_CommandStatus = 0
	CommandReply_SUCCESS   CommandReply_CommandStatus = 1
	CommandReply_ERROR     CommandReply_CommandStatus = 2
	CommandReply_NO_RECORD CommandReply_CommandStatus = 3
)

var CommandReply_CommandStatus_name = map[int32]string{
	0: "FATAL",
	1: "SUCCESS",
	2: "ERROR",
	3: "NO_RECORD",
}
var CommandReply_CommandStatus_value = map[string]int32{
	"FATAL":     0,
	"SUCCESS":   1,
	"ERROR":     2,
	"NO_RECORD": 3,
}

func (x CommandReply_CommandStatus) String() string {
	return proto.EnumName(CommandReply_CommandStatus_name, int32(x))
}
func (CommandReply_CommandStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor7, []int{8, 0}
}

type HostQueryResponse_ResponseStatus int32

const (
	HostQueryResponse_RESERVED  HostQueryResponse_ResponseStatus = 0
	HostQueryResponse_SUCCESS   HostQueryResponse_ResponseStatus = 1
	HostQueryResponse_NO_RECORD HostQueryResponse_ResponseStatus = 2
	HostQueryResponse_ERROR     HostQueryResponse_ResponseStatus = 3
)

var HostQueryResponse_ResponseStatus_name = map[int32]string{
	0: "RESERVED",
	1: "SUCCESS",
	2: "NO_RECORD",
	3: "ERROR",
}
var HostQueryResponse_ResponseStatus_value = map[string]int32{
	"RESERVED":  0,
	"SUCCESS":   1,
	"NO_RECORD": 2,
	"ERROR":     3,
}

func (x HostQueryResponse_ResponseStatus) String() string {
	return proto.EnumName(HostQueryResponse_ResponseStatus_name, int32(x))
}
func (HostQueryResponse_ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor7, []int{10, 0}
}

type AnonymousQueryResponse_ResponseStatus int32

const (
	AnonymousQueryResponse_RESERVED  AnonymousQueryResponse_ResponseStatus = 0
	AnonymousQueryResponse_SUCCESS   AnonymousQueryResponse_ResponseStatus = 1
	AnonymousQueryResponse_NO_RECORD AnonymousQueryResponse_ResponseStatus = 2
	AnonymousQueryResponse_ERROR     AnonymousQueryResponse_ResponseStatus = 3
)

var AnonymousQueryResponse_ResponseStatus_name = map[int32]string{
	0: "RESERVED",
	1: "SUCCESS",
	2: "NO_RECORD",
	3: "ERROR",
}
var AnonymousQueryResponse_ResponseStatus_value = map[string]int32{
	"RESERVED":  0,
	"SUCCESS":   1,
	"NO_RECORD": 2,
	"ERROR":     3,
}

func (x AnonymousQueryResponse_ResponseStatus) String() string {
	return proto.EnumName(AnonymousQueryResponse_ResponseStatus_name, int32(x))
}
func (AnonymousQueryResponse_ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor7, []int{12, 0}
}

type RootStoreQuery_RootStoreQueryType int32

const (
	RootStoreQuery_RESERVED  RootStoreQuery_RootStoreQueryType = 0
	RootStoreQuery_MOZILLA   RootStoreQuery_RootStoreQueryType = 1
	RootStoreQuery_MICROSOFT RootStoreQuery_RootStoreQueryType = 2
	RootStoreQuery_APPLE     RootStoreQuery_RootStoreQueryType = 3
	RootStoreQuery_ALL       RootStoreQuery_RootStoreQueryType = 4
)

var RootStoreQuery_RootStoreQueryType_name = map[int32]string{
	0: "RESERVED",
	1: "MOZILLA",
	2: "MICROSOFT",
	3: "APPLE",
	4: "ALL",
}
var RootStoreQuery_RootStoreQueryType_value = map[string]int32{
	"RESERVED":  0,
	"MOZILLA":   1,
	"MICROSOFT": 2,
	"APPLE":     3,
	"ALL":       4,
}

func (x RootStoreQuery_RootStoreQueryType) String() string {
	return proto.EnumName(RootStoreQuery_RootStoreQueryType_name, int32(x))
}
func (RootStoreQuery_RootStoreQueryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor7, []int{14, 0}
}

type MinScanId struct {
	Key       *AnonymousKey `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	MinScanId uint32        `protobuf:"varint,2,opt,name=min_scan_id,json=minScanId" json:"min_scan_id,omitempty"`
}

func (m *MinScanId) Reset()                    { *m = MinScanId{} }
func (m *MinScanId) String() string            { return proto.CompactTextString(m) }
func (*MinScanId) ProtoMessage()               {}
func (*MinScanId) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *MinScanId) GetKey() *AnonymousKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MinScanId) GetMinScanId() uint32 {
	if m != nil {
		return m.MinScanId
	}
	return 0
}

type MozillaOneCRLEntry struct {
	Issuer       []byte `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Serial       []byte `protobuf:"bytes,2,opt,name=serial,proto3" json:"serial,omitempty"`
	Id           string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	LastModified uint32 `protobuf:"varint,4,opt,name=last_modified,json=lastModified" json:"last_modified,omitempty"`
}

func (m *MozillaOneCRLEntry) Reset()                    { *m = MozillaOneCRLEntry{} }
func (m *MozillaOneCRLEntry) String() string            { return proto.CompactTextString(m) }
func (*MozillaOneCRLEntry) ProtoMessage()               {}
func (*MozillaOneCRLEntry) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *MozillaOneCRLEntry) GetIssuer() []byte {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (m *MozillaOneCRLEntry) GetSerial() []byte {
	if m != nil {
		return m.Serial
	}
	return nil
}

func (m *MozillaOneCRLEntry) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MozillaOneCRLEntry) GetLastModified() uint32 {
	if m != nil {
		return m.LastModified
	}
	return 0
}

type Command struct {
	IncrementalDump bool                  `protobuf:"varint,1,opt,name=incremental_dump,json=incrementalDump" json:"incremental_dump,omitempty"`
	MinScanIds      []*MinScanId          `protobuf:"bytes,2,rep,name=min_scan_ids,json=minScanIds" json:"min_scan_ids,omitempty"`
	Filepath        string                `protobuf:"bytes,3,opt,name=filepath" json:"filepath,omitempty"`
	MaxRecords      uint32                `protobuf:"varint,4,opt,name=max_records,json=maxRecords" json:"max_records,omitempty"`
	StartIp         uint32                `protobuf:"varint,5,opt,name=start_ip,json=startIp" json:"start_ip,omitempty"`
	StopIp          uint32                `protobuf:"varint,6,opt,name=stop_ip,json=stopIp" json:"stop_ip,omitempty"`
	OneCrlEntries   []*MozillaOneCRLEntry `protobuf:"bytes,7,rep,name=one_crl_entries,json=oneCrlEntries" json:"one_crl_entries,omitempty"`
	Threads         uint32                `protobuf:"varint,8,opt,name=threads" json:"threads,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *Command) GetIncrementalDump() bool {
	if m != nil {
		return m.IncrementalDump
	}
	return false
}

func (m *Command) GetMinScanIds() []*MinScanId {
	if m != nil {
		return m.MinScanIds
	}
	return nil
}

func (m *Command) GetFilepath() string {
	if m != nil {
		return m.Filepath
	}
	return ""
}

func (m *Command) GetMaxRecords() uint32 {
	if m != nil {
		return m.MaxRecords
	}
	return 0
}

func (m *Command) GetStartIp() uint32 {
	if m != nil {
		return m.StartIp
	}
	return 0
}

func (m *Command) GetStopIp() uint32 {
	if m != nil {
		return m.StopIp
	}
	return 0
}

func (m *Command) GetOneCrlEntries() []*MozillaOneCRLEntry {
	if m != nil {
		return m.OneCrlEntries
	}
	return nil
}

func (m *Command) GetThreads() uint32 {
	if m != nil {
		return m.Threads
	}
	return 0
}

type AnonymousStoreStatistics struct {
	TotalRecords              uint64 `protobuf:"varint,1,opt,name=total_records,json=totalRecords" json:"total_records,omitempty"`
	RecordsAddedLastReset     uint64 `protobuf:"varint,2,opt,name=records_added_last_reset,json=recordsAddedLastReset" json:"records_added_last_reset,omitempty"`
	RecordsUpdatedLastReset   uint64 `protobuf:"varint,3,opt,name=records_updated_last_reset,json=recordsUpdatedLastReset" json:"records_updated_last_reset,omitempty"`
	RecordsUnchangedLastReset uint64 `protobuf:"varint,4,opt,name=records_unchanged_last_reset,json=recordsUnchangedLastReset" json:"records_unchanged_last_reset,omitempty"`
	RecordsReceived           uint64 `protobuf:"varint,5,opt,name=records_received,json=recordsReceived" json:"records_received,omitempty"`
	RecordsInRedisQueue       uint32 `protobuf:"varint,6,opt,name=records_in_redis_queue,json=recordsInRedisQueue" json:"records_in_redis_queue,omitempty"`
	RedisQueueName            string `protobuf:"bytes,7,opt,name=redis_queue_name,json=redisQueueName" json:"redis_queue_name,omitempty"`
	QueueType                 string `protobuf:"bytes,8,opt,name=queue_type,json=queueType" json:"queue_type,omitempty"`
	WorkerThreads             uint32 `protobuf:"varint,9,opt,name=worker_threads,json=workerThreads" json:"worker_threads,omitempty"`
}

func (m *AnonymousStoreStatistics) Reset()                    { *m = AnonymousStoreStatistics{} }
func (m *AnonymousStoreStatistics) String() string            { return proto.CompactTextString(m) }
func (*AnonymousStoreStatistics) ProtoMessage()               {}
func (*AnonymousStoreStatistics) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *AnonymousStoreStatistics) GetTotalRecords() uint64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

func (m *AnonymousStoreStatistics) GetRecordsAddedLastReset() uint64 {
	if m != nil {
		return m.RecordsAddedLastReset
	}
	return 0
}

func (m *AnonymousStoreStatistics) GetRecordsUpdatedLastReset() uint64 {
	if m != nil {
		return m.RecordsUpdatedLastReset
	}
	return 0
}

func (m *AnonymousStoreStatistics) GetRecordsUnchangedLastReset() uint64 {
	if m != nil {
		return m.RecordsUnchangedLastReset
	}
	return 0
}

func (m *AnonymousStoreStatistics) GetRecordsReceived() uint64 {
	if m != nil {
		return m.RecordsReceived
	}
	return 0
}

func (m *AnonymousStoreStatistics) GetRecordsInRedisQueue() uint32 {
	if m != nil {
		return m.RecordsInRedisQueue
	}
	return 0
}

func (m *AnonymousStoreStatistics) GetRedisQueueName() string {
	if m != nil {
		return m.RedisQueueName
	}
	return ""
}

func (m *AnonymousStoreStatistics) GetQueueType() string {
	if m != nil {
		return m.QueueType
	}
	return ""
}

func (m *AnonymousStoreStatistics) GetWorkerThreads() uint32 {
	if m != nil {
		return m.WorkerThreads
	}
	return 0
}

type StatisticsPair struct {
	Port        uint32                    `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
	Protocol    uint32                    `protobuf:"varint,2,opt,name=protocol" json:"protocol,omitempty"`
	Subprotocol uint32                    `protobuf:"varint,3,opt,name=subprotocol" json:"subprotocol,omitempty"`
	Statistics  *AnonymousStoreStatistics `protobuf:"bytes,4,opt,name=statistics" json:"statistics,omitempty"`
}

func (m *StatisticsPair) Reset()                    { *m = StatisticsPair{} }
func (m *StatisticsPair) String() string            { return proto.CompactTextString(m) }
func (*StatisticsPair) ProtoMessage()               {}
func (*StatisticsPair) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *StatisticsPair) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *StatisticsPair) GetProtocol() uint32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *StatisticsPair) GetSubprotocol() uint32 {
	if m != nil {
		return m.Subprotocol
	}
	return 0
}

func (m *StatisticsPair) GetStatistics() *AnonymousStoreStatistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

type StoreStatistics struct {
	Global    *AnonymousStoreStatistics `protobuf:"bytes,1,opt,name=global" json:"global,omitempty"`
	Protocols []*StatisticsPair         `protobuf:"bytes,2,rep,name=protocols" json:"protocols,omitempty"`
}

func (m *StoreStatistics) Reset()                    { *m = StoreStatistics{} }
func (m *StoreStatistics) String() string            { return proto.CompactTextString(m) }
func (*StoreStatistics) ProtoMessage()               {}
func (*StoreStatistics) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func (m *StoreStatistics) GetGlobal() *AnonymousStoreStatistics {
	if m != nil {
		return m.Global
	}
	return nil
}

func (m *StoreStatistics) GetProtocols() []*StatisticsPair {
	if m != nil {
		return m.Protocols
	}
	return nil
}

type ServerStatistics struct {
	StoreStatistics          map[string]*StoreStatistics          `protobuf:"bytes,1,rep,name=store_statistics,json=storeStatistics" json:"store_statistics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AnonymousStoreStatistics map[string]*AnonymousStoreStatistics `protobuf:"bytes,2,rep,name=anonymous_store_statistics,json=anonymousStoreStatistics" json:"anonymous_store_statistics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ServerStatistics) Reset()                    { *m = ServerStatistics{} }
func (m *ServerStatistics) String() string            { return proto.CompactTextString(m) }
func (*ServerStatistics) ProtoMessage()               {}
func (*ServerStatistics) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

func (m *ServerStatistics) GetStoreStatistics() map[string]*StoreStatistics {
	if m != nil {
		return m.StoreStatistics
	}
	return nil
}

func (m *ServerStatistics) GetAnonymousStoreStatistics() map[string]*AnonymousStoreStatistics {
	if m != nil {
		return m.AnonymousStoreStatistics
	}
	return nil
}

type PruneStatistics struct {
	Key           *AnonymousKey `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	RecordsPruned uint64        `protobuf:"varint,2,opt,name=records_pruned,json=recordsPruned" json:"records_pruned,omitempty"`
}

func (m *PruneStatistics) Reset()                    { *m = PruneStatistics{} }
func (m *PruneStatistics) String() string            { return proto.CompactTextString(m) }
func (*PruneStatistics) ProtoMessage()               {}
func (*PruneStatistics) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{7} }

func (m *PruneStatistics) GetKey() *AnonymousKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *PruneStatistics) GetRecordsPruned() uint64 {
	if m != nil {
		return m.RecordsPruned
	}
	return 0
}

type CommandReply struct {
	Status          CommandReply_CommandStatus `protobuf:"varint,1,opt,name=status,enum=censys_definitions.CommandReply_CommandStatus" json:"status,omitempty"`
	Error           string                     `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Stats           *ServerStatistics          `protobuf:"bytes,3,opt,name=stats" json:"stats,omitempty"`
	PruneStatistics []*PruneStatistics         `protobuf:"bytes,4,rep,name=prune_statistics,json=pruneStatistics" json:"prune_statistics,omitempty"`
}

func (m *CommandReply) Reset()                    { *m = CommandReply{} }
func (m *CommandReply) String() string            { return proto.CompactTextString(m) }
func (*CommandReply) ProtoMessage()               {}
func (*CommandReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{8} }

func (m *CommandReply) GetStatus() CommandReply_CommandStatus {
	if m != nil {
		return m.Status
	}
	return CommandReply_FATAL
}

func (m *CommandReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *CommandReply) GetStats() *ServerStatistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *CommandReply) GetPruneStatistics() []*PruneStatistics {
	if m != nil {
		return m.PruneStatistics
	}
	return nil
}

type HostQuery struct {
	Ip          uint32 `protobuf:"fixed32,1,opt,name=ip" json:"ip,omitempty"`
	Domain      string `protobuf:"bytes,2,opt,name=domain" json:"domain,omitempty"`
	Port        uint32 `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	Protocol    uint32 `protobuf:"varint,4,opt,name=protocol" json:"protocol,omitempty"`
	Subprotocol uint32 `protobuf:"varint,5,opt,name=subprotocol" json:"subprotocol,omitempty"`
	MaxRecords  uint32 `protobuf:"varint,6,opt,name=max_records,json=maxRecords" json:"max_records,omitempty"`
}

func (m *HostQuery) Reset()                    { *m = HostQuery{} }
func (m *HostQuery) String() string            { return proto.CompactTextString(m) }
func (*HostQuery) ProtoMessage()               {}
func (*HostQuery) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{9} }

func (m *HostQuery) GetIp() uint32 {
	if m != nil {
		return m.Ip
	}
	return 0
}

func (m *HostQuery) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *HostQuery) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *HostQuery) GetProtocol() uint32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *HostQuery) GetSubprotocol() uint32 {
	if m != nil {
		return m.Subprotocol
	}
	return 0
}

func (m *HostQuery) GetMaxRecords() uint32 {
	if m != nil {
		return m.MaxRecords
	}
	return 0
}

type HostQueryResponse struct {
	Status      HostQueryResponse_ResponseStatus `protobuf:"varint,1,opt,name=status,enum=censys_definitions.HostQueryResponse_ResponseStatus" json:"status,omitempty"`
	Ip          uint32                           `protobuf:"fixed32,2,opt,name=ip" json:"ip,omitempty"`
	Domain      string                           `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	Port        uint32                           `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	Protocol    uint32                           `protobuf:"varint,5,opt,name=protocol" json:"protocol,omitempty"`
	Subprotocol uint32                           `protobuf:"varint,6,opt,name=subprotocol" json:"subprotocol,omitempty"`
	Record      *Record                          `protobuf:"bytes,7,opt,name=record" json:"record,omitempty"`
	Records     []*Record                        `protobuf:"bytes,8,rep,name=records" json:"records,omitempty"`
	Error       string                           `protobuf:"bytes,9,opt,name=error" json:"error,omitempty"`
}

func (m *HostQueryResponse) Reset()                    { *m = HostQueryResponse{} }
func (m *HostQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*HostQueryResponse) ProtoMessage()               {}
func (*HostQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{10} }

func (m *HostQueryResponse) GetStatus() HostQueryResponse_ResponseStatus {
	if m != nil {
		return m.Status
	}
	return HostQueryResponse_RESERVED
}

func (m *HostQueryResponse) GetIp() uint32 {
	if m != nil {
		return m.Ip
	}
	return 0
}

func (m *HostQueryResponse) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *HostQueryResponse) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *HostQueryResponse) GetProtocol() uint32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *HostQueryResponse) GetSubprotocol() uint32 {
	if m != nil {
		return m.Subprotocol
	}
	return 0
}

func (m *HostQueryResponse) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *HostQueryResponse) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *HostQueryResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type AnonymousQuery struct {
	Sha256Fp []byte `protobuf:"bytes,1,opt,name=sha256fp,proto3" json:"sha256fp,omitempty"`
}

func (m *AnonymousQuery) Reset()                    { *m = AnonymousQuery{} }
func (m *AnonymousQuery) String() string            { return proto.CompactTextString(m) }
func (*AnonymousQuery) ProtoMessage()               {}
func (*AnonymousQuery) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{11} }

func (m *AnonymousQuery) GetSha256Fp() []byte {
	if m != nil {
		return m.Sha256Fp
	}
	return nil
}

type AnonymousQueryResponse struct {
	Sha256Fp []byte                                `protobuf:"bytes,1,opt,name=sha256fp,proto3" json:"sha256fp,omitempty"`
	Status   AnonymousQueryResponse_ResponseStatus `protobuf:"varint,2,opt,name=status,enum=censys_definitions.AnonymousQueryResponse_ResponseStatus" json:"status,omitempty"`
	Record   *AnonymousRecord                      `protobuf:"bytes,3,opt,name=record" json:"record,omitempty"`
	Records  []*AnonymousRecord                    `protobuf:"bytes,4,rep,name=records" json:"records,omitempty"`
	Error    string                                `protobuf:"bytes,59,opt,name=error" json:"error,omitempty"`
}

func (m *AnonymousQueryResponse) Reset()                    { *m = AnonymousQueryResponse{} }
func (m *AnonymousQueryResponse) String() string            { return proto.CompactTextString(m) }
func (*AnonymousQueryResponse) ProtoMessage()               {}
func (*AnonymousQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{12} }

func (m *AnonymousQueryResponse) GetSha256Fp() []byte {
	if m != nil {
		return m.Sha256Fp
	}
	return nil
}

func (m *AnonymousQueryResponse) GetStatus() AnonymousQueryResponse_ResponseStatus {
	if m != nil {
		return m.Status
	}
	return AnonymousQueryResponse_RESERVED
}

func (m *AnonymousQueryResponse) GetRecord() *AnonymousRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *AnonymousQueryResponse) GetRecords() []*AnonymousRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *AnonymousQueryResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type UserDataRequest struct {
	Ip     uint32        `protobuf:"fixed32,1,opt,name=ip" json:"ip,omitempty"`
	Domain string        `protobuf:"bytes,2,opt,name=domain" json:"domain,omitempty"`
	Data   *UserdataAtom `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *UserDataRequest) Reset()                    { *m = UserDataRequest{} }
func (m *UserDataRequest) String() string            { return proto.CompactTextString(m) }
func (*UserDataRequest) ProtoMessage()               {}
func (*UserDataRequest) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{13} }

func (m *UserDataRequest) GetIp() uint32 {
	if m != nil {
		return m.Ip
	}
	return 0
}

func (m *UserDataRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *UserDataRequest) GetData() *UserdataAtom {
	if m != nil {
		return m.Data
	}
	return nil
}

type RootStoreQuery struct {
	Type RootStoreQuery_RootStoreQueryType `protobuf:"varint,1,opt,name=type,enum=censys_definitions.RootStoreQuery_RootStoreQueryType" json:"type,omitempty"`
}

func (m *RootStoreQuery) Reset()                    { *m = RootStoreQuery{} }
func (m *RootStoreQuery) String() string            { return proto.CompactTextString(m) }
func (*RootStoreQuery) ProtoMessage()               {}
func (*RootStoreQuery) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{14} }

func (m *RootStoreQuery) GetType() RootStoreQuery_RootStoreQueryType {
	if m != nil {
		return m.Type
	}
	return RootStoreQuery_RESERVED
}

type RootStoreReply struct {
	Certificates []*Certificate `protobuf:"bytes,1,rep,name=certificates" json:"certificates,omitempty"`
}

func (m *RootStoreReply) Reset()                    { *m = RootStoreReply{} }
func (m *RootStoreReply) String() string            { return proto.CompactTextString(m) }
func (*RootStoreReply) ProtoMessage()               {}
func (*RootStoreReply) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{15} }

func (m *RootStoreReply) GetCertificates() []*Certificate {
	if m != nil {
		return m.Certificates
	}
	return nil
}

func init() {
	proto.RegisterType((*MinScanId)(nil), "censys_definitions.MinScanId")
	proto.RegisterType((*MozillaOneCRLEntry)(nil), "censys_definitions.MozillaOneCRLEntry")
	proto.RegisterType((*Command)(nil), "censys_definitions.Command")
	proto.RegisterType((*AnonymousStoreStatistics)(nil), "censys_definitions.AnonymousStoreStatistics")
	proto.RegisterType((*StatisticsPair)(nil), "censys_definitions.StatisticsPair")
	proto.RegisterType((*StoreStatistics)(nil), "censys_definitions.StoreStatistics")
	proto.RegisterType((*ServerStatistics)(nil), "censys_definitions.ServerStatistics")
	proto.RegisterType((*PruneStatistics)(nil), "censys_definitions.PruneStatistics")
	proto.RegisterType((*CommandReply)(nil), "censys_definitions.CommandReply")
	proto.RegisterType((*HostQuery)(nil), "censys_definitions.HostQuery")
	proto.RegisterType((*HostQueryResponse)(nil), "censys_definitions.HostQueryResponse")
	proto.RegisterType((*AnonymousQuery)(nil), "censys_definitions.AnonymousQuery")
	proto.RegisterType((*AnonymousQueryResponse)(nil), "censys_definitions.AnonymousQueryResponse")
	proto.RegisterType((*UserDataRequest)(nil), "censys_definitions.UserDataRequest")
	proto.RegisterType((*RootStoreQuery)(nil), "censys_definitions.RootStoreQuery")
	proto.RegisterType((*RootStoreReply)(nil), "censys_definitions.RootStoreReply")
	proto.RegisterEnum("censys_definitions.CommandReply_CommandStatus", CommandReply_CommandStatus_name, CommandReply_CommandStatus_value)
	proto.RegisterEnum("censys_definitions.HostQueryResponse_ResponseStatus", HostQueryResponse_ResponseStatus_name, HostQueryResponse_ResponseStatus_value)
	proto.RegisterEnum("censys_definitions.AnonymousQueryResponse_ResponseStatus", AnonymousQueryResponse_ResponseStatus_name, AnonymousQueryResponse_ResponseStatus_value)
	proto.RegisterEnum("censys_definitions.RootStoreQuery_RootStoreQueryType", RootStoreQuery_RootStoreQueryType_name, RootStoreQuery_RootStoreQueryType_value)
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 1359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0x5e, 0xc7, 0xce, 0x3e, 0xff, 0xed, 0x50, 0x5a, 0xd7, 0xa2, 0x34, 0xda, 0x52, 0x94,
	0x4a, 0x55, 0x0e, 0x6e, 0x0b, 0xb4, 0x15, 0x2a, 0xae, 0xe3, 0x8a, 0x08, 0x27, 0x4e, 0xc7, 0x09,
	0x07, 0x2e, 0xab, 0xe9, 0xee, 0xa4, 0x59, 0x75, 0x77, 0x66, 0x3b, 0x33, 0x2e, 0x35, 0x27, 0xbe,
	0x06, 0x57, 0x0e, 0x5c, 0xe1, 0xce, 0x9d, 0x33, 0xdf, 0x00, 0x3e, 0x0a, 0xda, 0xd9, 0x3f, 0xb6,
	0xd7, 0x1b, 0x2b, 0x45, 0xe2, 0xe6, 0x79, 0xef, 0xfd, 0xde, 0xbf, 0xdf, 0x9b, 0x37, 0x6b, 0x30,
	0x45, 0xe8, 0xec, 0x85, 0x82, 0x2b, 0x8e, 0x90, 0x43, 0x99, 0x9c, 0x4b, 0xdb, 0xa5, 0x67, 0x1e,
	0xf3, 0x94, 0xc7, 0x99, 0xec, 0x35, 0x1c, 0x1e, 0x04, 0x9c, 0xc5, 0x16, 0xbd, 0x2b, 0x0e, 0x15,
	0xca, 0x3b, 0xf3, 0x1c, 0xa2, 0x68, 0x22, 0x6a, 0x13, 0xc6, 0x99, 0x54, 0x5c, 0x64, 0x82, 0x73,
	0x2e, 0xd5, 0x92, 0xc0, 0xb2, 0xc1, 0x3c, 0xf4, 0xd8, 0xd4, 0x21, 0xec, 0xc0, 0x45, 0x7d, 0x30,
	0x5e, 0xd3, 0x79, 0xb7, 0xb4, 0x53, 0xda, 0xad, 0xf7, 0x77, 0xf6, 0xd6, 0x23, 0xee, 0x0d, 0x18,
	0x67, 0xf3, 0x80, 0xcf, 0xe4, 0xb7, 0x74, 0x8e, 0x23, 0x63, 0xf4, 0x09, 0xd4, 0x03, 0x8f, 0xd9,
	0xd2, 0x21, 0xcc, 0xf6, 0xdc, 0x6e, 0x79, 0xa7, 0xb4, 0xdb, 0xc4, 0x66, 0x90, 0xfa, 0xb4, 0xe6,
	0x80, 0x0e, 0xf9, 0x8f, 0x9e, 0xef, 0x93, 0x09, 0xa3, 0x43, 0x3c, 0x1e, 0x31, 0x25, 0xe6, 0xe8,
	0x1a, 0x54, 0x3d, 0x29, 0x67, 0x54, 0xe8, 0x60, 0x0d, 0x9c, 0x9c, 0x22, 0xb9, 0xa4, 0xc2, 0x23,
	0xbe, 0x76, 0xd4, 0xc0, 0xc9, 0x09, 0xb5, 0xa0, 0xec, 0xb9, 0x5d, 0x63, 0xa7, 0xb4, 0x6b, 0xe2,
	0xb2, 0xe7, 0xa2, 0xdb, 0xd0, 0xf4, 0x89, 0x54, 0x76, 0xc0, 0x5d, 0xef, 0xcc, 0xa3, 0x6e, 0xb7,
	0xa2, 0xe3, 0x36, 0x22, 0xe1, 0x61, 0x22, 0xb3, 0xfe, 0x2a, 0x43, 0x6d, 0xc8, 0x83, 0x80, 0x30,
	0x17, 0xdd, 0x85, 0x8e, 0xc7, 0x1c, 0x41, 0x03, 0xca, 0x14, 0xf1, 0x6d, 0x77, 0x16, 0x84, 0x3a,
	0xf4, 0x36, 0x6e, 0x2f, 0xc9, 0xf7, 0x67, 0x41, 0x88, 0x9e, 0x42, 0x63, 0xa9, 0x22, 0xd9, 0x2d,
	0xef, 0x18, 0xbb, 0xf5, 0xfe, 0xcd, 0xa2, 0x76, 0x64, 0xad, 0xc3, 0x90, 0x55, 0x2c, 0x51, 0x0f,
	0xb6, 0xcf, 0x3c, 0x9f, 0x86, 0x44, 0x9d, 0x27, 0x29, 0x67, 0x67, 0x74, 0x0b, 0xea, 0x01, 0x79,
	0x67, 0x0b, 0xea, 0x70, 0xe1, 0xca, 0x24, 0x6d, 0x08, 0xc8, 0x3b, 0x1c, 0x4b, 0xd0, 0x0d, 0xd8,
	0x96, 0x8a, 0x08, 0x65, 0x7b, 0x61, 0x77, 0x4b, 0x6b, 0x6b, 0xfa, 0x7c, 0x10, 0xa2, 0xeb, 0x50,
	0x93, 0x8a, 0x87, 0x91, 0xa6, 0xaa, 0x35, 0xd5, 0xe8, 0x78, 0x10, 0xa2, 0x23, 0x68, 0x73, 0x46,
	0x6d, 0x47, 0xf8, 0x36, 0x65, 0x4a, 0x78, 0x54, 0x76, 0x6b, 0x3a, 0xe9, 0xcf, 0x0a, 0x93, 0x5e,
	0xa3, 0x03, 0x37, 0x39, 0xa3, 0x43, 0xe1, 0x8f, 0x62, 0x30, 0xea, 0x42, 0x4d, 0x9d, 0x0b, 0x4a,
	0x5c, 0xd9, 0xdd, 0x8e, 0x53, 0x48, 0x8e, 0xd6, 0x9f, 0x06, 0x74, 0xb3, 0x19, 0x98, 0x46, 0x73,
	0x34, 0x55, 0x44, 0x79, 0x52, 0x79, 0x8e, 0x8c, 0x48, 0x51, 0x3c, 0xea, 0x6e, 0x5a, 0x5d, 0xd4,
	0xe0, 0x0a, 0x6e, 0x68, 0x61, 0x5a, 0xdf, 0x17, 0xd0, 0x4d, 0xd4, 0x36, 0x71, 0x5d, 0xea, 0xda,
	0x9a, 0x47, 0x41, 0x25, 0x55, 0x9a, 0xf3, 0x0a, 0xfe, 0x28, 0xd1, 0x0f, 0x22, 0xf5, 0x98, 0x48,
	0x85, 0x23, 0x25, 0x7a, 0x02, 0xbd, 0x14, 0x38, 0x0b, 0x5d, 0xa2, 0x56, 0xa1, 0x86, 0x86, 0x5e,
	0x4f, 0x2c, 0x4e, 0x63, 0x83, 0x05, 0xf8, 0x29, 0x7c, 0x9c, 0x81, 0x99, 0x73, 0x4e, 0xd8, 0xab,
	0x55, 0x78, 0x45, 0xc3, 0x6f, 0xa4, 0xf0, 0xd4, 0x64, 0xe1, 0xe0, 0x2e, 0x74, 0x52, 0x07, 0x82,
	0x3a, 0xd4, 0x7b, 0x4b, 0x5d, 0x4d, 0x4f, 0x05, 0xb7, 0x13, 0x39, 0x4e, 0xc4, 0xe8, 0x3e, 0x5c,
	0x4b, 0x4d, 0x3d, 0x66, 0x0b, 0xea, 0x7a, 0xd2, 0x7e, 0x33, 0xa3, 0x33, 0x9a, 0xb0, 0xf6, 0x61,
	0xa2, 0x3d, 0x60, 0x38, 0xd2, 0xbd, 0x88, 0x54, 0x68, 0x37, 0xf2, 0x9f, 0x59, 0xda, 0x8c, 0x04,
	0xb4, 0x5b, 0xd3, 0xb3, 0xd3, 0x12, 0x99, 0xd5, 0x11, 0x09, 0x28, 0xba, 0x09, 0x10, 0xdb, 0xa8,
	0x79, 0x48, 0x35, 0x3f, 0x26, 0x36, 0xb5, 0xe4, 0x64, 0x1e, 0x52, 0x74, 0x07, 0x5a, 0x3f, 0x70,
	0xf1, 0x9a, 0x0a, 0x3b, 0xa5, 0xd0, 0xd4, 0x51, 0x9b, 0xb1, 0xf4, 0x24, 0x21, 0xf2, 0xf7, 0x12,
	0xb4, 0x16, 0xd4, 0x1d, 0x13, 0x4f, 0x20, 0x04, 0x95, 0x90, 0x0b, 0xa5, 0x59, 0x6b, 0x62, 0xfd,
	0x3b, 0x1a, 0x65, 0xbd, 0x27, 0x1c, 0xee, 0x27, 0x57, 0x3b, 0x3b, 0xa3, 0x1d, 0xa8, 0xcb, 0xd9,
	0xcb, 0x4c, 0x6d, 0x68, 0xf5, 0xb2, 0x08, 0x8d, 0x01, 0x64, 0x16, 0x43, 0xf7, 0xb8, 0xde, 0xbf,
	0xb7, 0x71, 0xad, 0xe4, 0x46, 0x0a, 0x2f, 0xe1, 0xad, 0x9f, 0x4b, 0xd0, 0xce, 0x8f, 0xdc, 0x3e,
	0x54, 0x5f, 0xf9, 0xfc, 0x25, 0xf1, 0x93, 0xa5, 0xf5, 0x7e, 0xde, 0x13, 0x2c, 0xfa, 0x1a, 0xcc,
	0x34, 0xe7, 0xf4, 0xba, 0x5b, 0x45, 0x8e, 0x56, 0x1b, 0x86, 0x17, 0x20, 0xeb, 0x6f, 0x03, 0x3a,
	0x53, 0x2a, 0xde, 0x52, 0xb1, 0x94, 0x9c, 0x0b, 0x1d, 0xbd, 0x6a, 0xed, 0xa5, 0x26, 0x94, 0xb4,
	0xf7, 0x47, 0x85, 0xde, 0x73, 0xf8, 0xbd, 0x5c, 0xba, 0xf1, 0x55, 0x6d, 0xcb, 0x5c, 0x0b, 0x7e,
	0x2a, 0x41, 0x8f, 0xa4, 0x15, 0xda, 0x6b, 0x01, 0xe3, 0x72, 0x9e, 0x5d, 0x2a, 0xe0, 0x45, 0x8d,
	0x8a, 0x23, 0x77, 0xc9, 0x05, 0xea, 0xde, 0x2b, 0xb8, 0x5a, 0x84, 0x40, 0x9d, 0xc5, 0x7b, 0x62,
	0xc6, 0xaf, 0xc5, 0x23, 0xd8, 0x7a, 0x4b, 0xfc, 0x19, 0xd5, 0xc3, 0x54, 0xef, 0xdf, 0x2e, 0xee,
	0xf2, 0x2a, 0x4b, 0x31, 0xe2, 0x71, 0xf9, 0xcb, 0x52, 0x6f, 0x0e, 0x37, 0x37, 0xe6, 0x58, 0x10,
	0xf1, 0xd9, 0x6a, 0xc4, 0xf7, 0x1b, 0x90, 0x45, 0x68, 0xcb, 0x87, 0xf6, 0xb1, 0x98, 0xb1, 0xe5,
	0xce, 0xff, 0x97, 0xe7, 0xf2, 0x0e, 0xb4, 0xd2, 0xe5, 0x10, 0x46, 0xee, 0xdc, 0x64, 0xe9, 0x35,
	0x13, 0xa9, 0x8e, 0xe1, 0x5a, 0x7f, 0x94, 0xa1, 0x91, 0x3c, 0x5d, 0x98, 0x86, 0xfe, 0x1c, 0x3d,
	0x87, 0x6a, 0x44, 0xea, 0x2c, 0x5e, 0xaa, 0xad, 0xfe, 0x5e, 0x51, 0xb8, 0x65, 0x44, 0x7a, 0x98,
	0x6a, 0x14, 0x4e, 0xd0, 0xe8, 0x2a, 0x6c, 0x51, 0x21, 0xb8, 0xd0, 0x61, 0x4d, 0x1c, 0x1f, 0xd0,
	0x63, 0xd8, 0x8a, 0xf4, 0x52, 0x5f, 0xe2, 0x7a, 0xff, 0xd3, 0xcb, 0x4c, 0x0b, 0x8e, 0x21, 0xe8,
	0x08, 0x3a, 0xba, 0x12, 0x7b, 0xe5, 0xaa, 0x1b, 0x17, 0xb1, 0x9b, 0x6b, 0x22, 0x6e, 0x87, 0xab,
	0x02, 0x6b, 0x00, 0xcd, 0x95, 0xd4, 0x91, 0x09, 0x5b, 0xcf, 0x07, 0x27, 0x83, 0x71, 0xe7, 0x03,
	0x54, 0x87, 0xda, 0xf4, 0x74, 0x38, 0x1c, 0x4d, 0xa7, 0x9d, 0x52, 0x24, 0x1f, 0x61, 0x3c, 0xc1,
	0x9d, 0x32, 0x6a, 0x82, 0x79, 0x34, 0xb1, 0xf1, 0x68, 0x38, 0xc1, 0xfb, 0x1d, 0xc3, 0xfa, 0xb5,
	0x04, 0xe6, 0x37, 0x5c, 0xaa, 0x17, 0x33, 0x2a, 0xe6, 0xfa, 0xdb, 0x21, 0x7e, 0xec, 0x6b, 0xb8,
	0xec, 0x85, 0xd1, 0x37, 0x86, 0xcb, 0x03, 0xe2, 0xb1, 0xa4, 0x07, 0xc9, 0x29, 0xdb, 0x7f, 0xc6,
	0x05, 0xfb, 0xaf, 0xb2, 0x79, 0xff, 0x6d, 0xad, 0xef, 0xbf, 0xdc, 0x63, 0x5f, 0xcd, 0x3f, 0xf6,
	0xd6, 0x2f, 0x06, 0x5c, 0xc9, 0x12, 0xc5, 0x54, 0x86, 0x9c, 0x49, 0x8a, 0xc6, 0x39, 0xae, 0x1f,
	0x14, 0xf5, 0x71, 0x0d, 0xb6, 0x97, 0xfe, 0xc8, 0x31, 0x1e, 0x97, 0x5f, 0x2e, 0x28, 0xdf, 0x28,
	0x2c, 0xbf, 0x72, 0x41, 0xf9, 0x5b, 0x9b, 0xcb, 0xaf, 0xae, 0x97, 0xdf, 0x87, 0x6a, 0x5c, 0xba,
	0x7e, 0xc9, 0xea, 0xfd, 0x5e, 0x51, 0x1d, 0x71, 0x2b, 0x70, 0x62, 0x89, 0x1e, 0x40, 0x2d, 0x6d,
	0xd7, 0xb6, 0x1e, 0xa2, 0x4d, 0xa0, 0xd4, 0x74, 0x31, 0xd5, 0xe6, 0xd2, 0x54, 0x5b, 0x23, 0x68,
	0xad, 0xf6, 0x04, 0x35, 0x60, 0x1b, 0x8f, 0xa6, 0x23, 0xfc, 0xdd, 0x68, 0x3f, 0x3f, 0x4d, 0x2b,
	0x23, 0x54, 0x5e, 0x0c, 0x97, 0x61, 0xdd, 0x83, 0x56, 0x76, 0x8f, 0xe3, 0x89, 0xea, 0xc1, 0xb6,
	0x3c, 0x27, 0xfd, 0x87, 0x9f, 0x9f, 0x85, 0xc9, 0xf7, 0x6b, 0x76, 0xb6, 0xfe, 0x29, 0xc3, 0xb5,
	0x55, 0xf3, 0x8c, 0xd7, 0x0d, 0x30, 0xf4, 0x22, 0xe3, 0xbc, 0xac, 0x39, 0x7f, 0xb4, 0x71, 0x9d,
	0x5c, 0x8a, 0xf8, 0x27, 0x59, 0xfb, 0x8d, 0x8b, 0x97, 0x6d, 0xe6, 0x32, 0xc7, 0xc3, 0x57, 0x0b,
	0x1e, 0x36, 0x5c, 0xe6, 0x3c, 0x7a, 0x9d, 0x90, 0x27, 0xff, 0x03, 0x21, 0x1c, 0xda, 0xa7, 0x92,
	0x8a, 0x7d, 0xa2, 0x08, 0xa6, 0x6f, 0x66, 0x54, 0xaa, 0x4b, 0xdf, 0xf1, 0x07, 0x50, 0x71, 0x89,
	0x22, 0x49, 0x47, 0x0a, 0x77, 0x76, 0xe4, 0x3a, 0xb2, 0x19, 0x28, 0x1e, 0x60, 0x6d, 0x6d, 0xfd,
	0x56, 0x82, 0x16, 0xe6, 0x5c, 0xe9, 0xe7, 0x21, 0x1e, 0x81, 0x03, 0xa8, 0xe8, 0xef, 0xaf, 0xf8,
	0x86, 0x3e, 0x2c, 0x1c, 0xd2, 0x15, 0x44, 0xee, 0x18, 0x7d, 0xab, 0x61, 0xed, 0xc2, 0xc2, 0x80,
	0xd6, 0x75, 0xeb, 0x9d, 0x39, 0x9c, 0x7c, 0x7f, 0x30, 0x1e, 0x0f, 0xe2, 0xce, 0x1c, 0x1e, 0x0c,
	0xf1, 0x64, 0x3a, 0x79, 0x7e, 0x12, 0x77, 0x66, 0x70, 0x7c, 0x3c, 0x1e, 0x75, 0x0c, 0x54, 0x03,
	0x63, 0x30, 0x1e, 0x77, 0x2a, 0xd6, 0xe9, 0x52, 0xc2, 0xf1, 0x03, 0x32, 0x84, 0xc6, 0xd2, 0xff,
	0xc3, 0xf4, 0x43, 0xe4, 0x56, 0xe1, 0x33, 0xb2, 0xb0, 0xc3, 0x2b, 0xa0, 0x97, 0x55, 0x7d, 0xb7,
	0xef, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x69, 0x9b, 0x35, 0x77, 0x98, 0x0e, 0x00, 0x00,
}
