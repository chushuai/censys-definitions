// Code generated by protoc-gen-go.
// source: pubkey.proto
// DO NOT EDIT!

package censys_definitions

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CryptographicKey_KeyType int32

const (
	CryptographicKey_RESERVED CryptographicKey_KeyType = 0
	CryptographicKey_UNKNOWN  CryptographicKey_KeyType = 1
	CryptographicKey_RSA      CryptographicKey_KeyType = 2
	CryptographicKey_DSA      CryptographicKey_KeyType = 3
	CryptographicKey_ECC      CryptographicKey_KeyType = 4
)

var CryptographicKey_KeyType_name = map[int32]string{
	0: "RESERVED",
	1: "UNKNOWN",
	2: "RSA",
	3: "DSA",
	4: "ECC",
}
var CryptographicKey_KeyType_value = map[string]int32{
	"RESERVED": 0,
	"UNKNOWN":  1,
	"RSA":      2,
	"DSA":      3,
	"ECC":      4,
}

func (x CryptographicKey_KeyType) String() string {
	return proto.EnumName(CryptographicKey_KeyType_name, int32(x))
}
func (CryptographicKey_KeyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor6, []int{3, 0} }

type RSACryptographicKey struct {
	Modulus  []byte `protobuf:"bytes,1,opt,name=modulus,proto3" json:"modulus,omitempty"`
	Exponent []byte `protobuf:"bytes,2,opt,name=exponent,proto3" json:"exponent,omitempty"`
	P        []byte `protobuf:"bytes,3,opt,name=p,proto3" json:"p,omitempty"`
	Q        []byte `protobuf:"bytes,4,opt,name=q,proto3" json:"q,omitempty"`
}

func (m *RSACryptographicKey) Reset()                    { *m = RSACryptographicKey{} }
func (m *RSACryptographicKey) String() string            { return proto.CompactTextString(m) }
func (*RSACryptographicKey) ProtoMessage()               {}
func (*RSACryptographicKey) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *RSACryptographicKey) GetModulus() []byte {
	if m != nil {
		return m.Modulus
	}
	return nil
}

func (m *RSACryptographicKey) GetExponent() []byte {
	if m != nil {
		return m.Exponent
	}
	return nil
}

func (m *RSACryptographicKey) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *RSACryptographicKey) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

type DSACryptographicKey struct {
	P []byte `protobuf:"bytes,1,opt,name=p,proto3" json:"p,omitempty"`
	Q []byte `protobuf:"bytes,2,opt,name=q,proto3" json:"q,omitempty"`
	G []byte `protobuf:"bytes,3,opt,name=g,proto3" json:"g,omitempty"`
	Y []byte `protobuf:"bytes,4,opt,name=y,proto3" json:"y,omitempty"`
	X []byte `protobuf:"bytes,5,opt,name=x,proto3" json:"x,omitempty"`
}

func (m *DSACryptographicKey) Reset()                    { *m = DSACryptographicKey{} }
func (m *DSACryptographicKey) String() string            { return proto.CompactTextString(m) }
func (*DSACryptographicKey) ProtoMessage()               {}
func (*DSACryptographicKey) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *DSACryptographicKey) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *DSACryptographicKey) GetQ() []byte {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *DSACryptographicKey) GetG() []byte {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *DSACryptographicKey) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

func (m *DSACryptographicKey) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

type ECCCryptographicKey struct {
	Curve   uint32 `protobuf:"varint,1,opt,name=curve" json:"curve,omitempty"`
	X       []byte `protobuf:"bytes,2,opt,name=x,proto3" json:"x,omitempty"`
	Y       []byte `protobuf:"bytes,3,opt,name=y,proto3" json:"y,omitempty"`
	Private []byte `protobuf:"bytes,4,opt,name=private,proto3" json:"private,omitempty"`
}

func (m *ECCCryptographicKey) Reset()                    { *m = ECCCryptographicKey{} }
func (m *ECCCryptographicKey) String() string            { return proto.CompactTextString(m) }
func (*ECCCryptographicKey) ProtoMessage()               {}
func (*ECCCryptographicKey) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *ECCCryptographicKey) GetCurve() uint32 {
	if m != nil {
		return m.Curve
	}
	return 0
}

func (m *ECCCryptographicKey) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *ECCCryptographicKey) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

func (m *ECCCryptographicKey) GetPrivate() []byte {
	if m != nil {
		return m.Private
	}
	return nil
}

type CryptographicKey struct {
	Type CryptographicKey_KeyType `protobuf:"varint,1,opt,name=type,enum=censys_definitions.CryptographicKey_KeyType" json:"type,omitempty"`
	// Types that are valid to be assigned to KeyOneof:
	//	*CryptographicKey_Rsa
	//	*CryptographicKey_Dsa
	//	*CryptographicKey_Ecc
	KeyOneof isCryptographicKey_KeyOneof `protobuf_oneof:"key_oneof"`
	Broken   bool                        `protobuf:"varint,5,opt,name=broken" json:"broken,omitempty"`
	Common   bool                        `protobuf:"varint,6,opt,name=common" json:"common,omitempty"`
	Debian   bool                        `protobuf:"varint,7,opt,name=debian" json:"debian,omitempty"`
}

func (m *CryptographicKey) Reset()                    { *m = CryptographicKey{} }
func (m *CryptographicKey) String() string            { return proto.CompactTextString(m) }
func (*CryptographicKey) ProtoMessage()               {}
func (*CryptographicKey) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

type isCryptographicKey_KeyOneof interface {
	isCryptographicKey_KeyOneof()
}

type CryptographicKey_Rsa struct {
	Rsa *RSACryptographicKey `protobuf:"bytes,2,opt,name=rsa,oneof"`
}
type CryptographicKey_Dsa struct {
	Dsa *DSACryptographicKey `protobuf:"bytes,3,opt,name=dsa,oneof"`
}
type CryptographicKey_Ecc struct {
	Ecc *ECCCryptographicKey `protobuf:"bytes,4,opt,name=ecc,oneof"`
}

func (*CryptographicKey_Rsa) isCryptographicKey_KeyOneof() {}
func (*CryptographicKey_Dsa) isCryptographicKey_KeyOneof() {}
func (*CryptographicKey_Ecc) isCryptographicKey_KeyOneof() {}

func (m *CryptographicKey) GetKeyOneof() isCryptographicKey_KeyOneof {
	if m != nil {
		return m.KeyOneof
	}
	return nil
}

func (m *CryptographicKey) GetType() CryptographicKey_KeyType {
	if m != nil {
		return m.Type
	}
	return CryptographicKey_RESERVED
}

func (m *CryptographicKey) GetRsa() *RSACryptographicKey {
	if x, ok := m.GetKeyOneof().(*CryptographicKey_Rsa); ok {
		return x.Rsa
	}
	return nil
}

func (m *CryptographicKey) GetDsa() *DSACryptographicKey {
	if x, ok := m.GetKeyOneof().(*CryptographicKey_Dsa); ok {
		return x.Dsa
	}
	return nil
}

func (m *CryptographicKey) GetEcc() *ECCCryptographicKey {
	if x, ok := m.GetKeyOneof().(*CryptographicKey_Ecc); ok {
		return x.Ecc
	}
	return nil
}

func (m *CryptographicKey) GetBroken() bool {
	if m != nil {
		return m.Broken
	}
	return false
}

func (m *CryptographicKey) GetCommon() bool {
	if m != nil {
		return m.Common
	}
	return false
}

func (m *CryptographicKey) GetDebian() bool {
	if m != nil {
		return m.Debian
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CryptographicKey) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CryptographicKey_OneofMarshaler, _CryptographicKey_OneofUnmarshaler, _CryptographicKey_OneofSizer, []interface{}{
		(*CryptographicKey_Rsa)(nil),
		(*CryptographicKey_Dsa)(nil),
		(*CryptographicKey_Ecc)(nil),
	}
}

func _CryptographicKey_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CryptographicKey)
	// key_oneof
	switch x := m.KeyOneof.(type) {
	case *CryptographicKey_Rsa:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rsa); err != nil {
			return err
		}
	case *CryptographicKey_Dsa:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Dsa); err != nil {
			return err
		}
	case *CryptographicKey_Ecc:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ecc); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CryptographicKey.KeyOneof has unexpected type %T", x)
	}
	return nil
}

func _CryptographicKey_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CryptographicKey)
	switch tag {
	case 2: // key_oneof.rsa
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RSACryptographicKey)
		err := b.DecodeMessage(msg)
		m.KeyOneof = &CryptographicKey_Rsa{msg}
		return true, err
	case 3: // key_oneof.dsa
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DSACryptographicKey)
		err := b.DecodeMessage(msg)
		m.KeyOneof = &CryptographicKey_Dsa{msg}
		return true, err
	case 4: // key_oneof.ecc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ECCCryptographicKey)
		err := b.DecodeMessage(msg)
		m.KeyOneof = &CryptographicKey_Ecc{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CryptographicKey_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CryptographicKey)
	// key_oneof
	switch x := m.KeyOneof.(type) {
	case *CryptographicKey_Rsa:
		s := proto.Size(x.Rsa)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptographicKey_Dsa:
		s := proto.Size(x.Dsa)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CryptographicKey_Ecc:
		s := proto.Size(x.Ecc)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*RSACryptographicKey)(nil), "censys_definitions.RSACryptographicKey")
	proto.RegisterType((*DSACryptographicKey)(nil), "censys_definitions.DSACryptographicKey")
	proto.RegisterType((*ECCCryptographicKey)(nil), "censys_definitions.ECCCryptographicKey")
	proto.RegisterType((*CryptographicKey)(nil), "censys_definitions.CryptographicKey")
	proto.RegisterEnum("censys_definitions.CryptographicKey_KeyType", CryptographicKey_KeyType_name, CryptographicKey_KeyType_value)
}

func init() { proto.RegisterFile("pubkey.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x86, 0x37, 0x4d, 0xb7, 0x29, 0xd3, 0x80, 0x22, 0x17, 0x21, 0x6b, 0x4f, 0x28, 0x17, 0x38,
	0xa0, 0x1e, 0x96, 0x23, 0x07, 0x28, 0x69, 0x24, 0xa4, 0x4a, 0x45, 0x72, 0xf9, 0x38, 0x70, 0x58,
	0xa5, 0xce, 0x6c, 0x88, 0x4a, 0x6d, 0x6f, 0x3e, 0x56, 0xf1, 0xcf, 0xe1, 0x9f, 0x22, 0xdb, 0x09,
	0x12, 0x34, 0xbd, 0xf9, 0x99, 0xe4, 0x79, 0xc7, 0x1e, 0x1b, 0x42, 0xd5, 0x1e, 0x8e, 0xa8, 0x57,
	0xaa, 0x92, 0x8d, 0x24, 0x84, 0xa3, 0xa8, 0x75, 0x7d, 0x97, 0xe3, 0x7d, 0x29, 0xca, 0xa6, 0x94,
	0xa2, 0xbe, 0x09, 0xb9, 0x3c, 0x9d, 0xa4, 0x70, 0x7f, 0xc4, 0x05, 0x2c, 0xd9, 0x7e, 0x9d, 0x54,
	0x5a, 0x35, 0xb2, 0xa8, 0x32, 0xf5, 0xb3, 0xe4, 0x5b, 0xd4, 0x84, 0x42, 0x70, 0x92, 0x79, 0xfb,
	0xab, 0xad, 0xa9, 0xf7, 0xd2, 0x7b, 0x1d, 0xb2, 0x01, 0xc9, 0x0d, 0xcc, 0xb1, 0x53, 0x52, 0xa0,
	0x68, 0xe8, 0xc4, 0x7e, 0xfa, 0xcb, 0x24, 0x04, 0x4f, 0x51, 0xdf, 0x16, 0x3d, 0x65, 0xe8, 0x81,
	0x4e, 0x1d, 0x3d, 0xc4, 0x3f, 0x60, 0xb9, 0x19, 0x69, 0x64, 0x15, 0xef, 0x1f, 0x65, 0xd2, 0x2b,
	0x86, 0x8a, 0x21, 0xae, 0x30, 0xa4, 0x87, 0x38, 0xeb, 0x75, 0xf4, 0xda, 0x51, 0x17, 0x67, 0xb0,
	0x4c, 0x93, 0xe4, 0x2c, 0xfc, 0x39, 0x5c, 0xf3, 0xb6, 0x7a, 0x44, 0xdb, 0xe0, 0x29, 0x73, 0xe0,
	0xd4, 0xbe, 0x49, 0xe7, 0x62, 0xfd, 0x21, 0x96, 0x42, 0xa0, 0xaa, 0xf2, 0x31, 0x6b, 0xb0, 0x6f,
	0x35, 0x60, 0xfc, 0xdb, 0x87, 0xe8, 0xac, 0xc1, 0x07, 0x98, 0x36, 0x5a, 0xb9, 0xfc, 0x67, 0xb7,
	0x6f, 0x56, 0xe7, 0xe3, 0x5e, 0xfd, 0xef, 0xac, 0xb6, 0xa8, 0xbf, 0x68, 0x85, 0xcc, 0x9a, 0xe4,
	0x1d, 0xf8, 0x55, 0x9d, 0xd9, 0xed, 0x2c, 0x6e, 0x5f, 0x8d, 0x05, 0x8c, 0x5c, 0xcf, 0xa7, 0x2b,
	0x66, 0x2c, 0x23, 0xe7, 0x75, 0x66, 0x77, 0x7f, 0x41, 0xde, 0x8c, 0xcb, 0xb9, 0x93, 0x91, 0x73,
	0x7b, 0xcc, 0x0b, 0xf2, 0xc8, 0x48, 0x8d, 0x8c, 0x9c, 0x93, 0x17, 0x30, 0x3b, 0x54, 0xf2, 0x88,
	0xc2, 0xde, 0xc1, 0x9c, 0xf5, 0x64, 0xea, 0xee, 0x79, 0xd1, 0x99, 0xab, 0x3b, 0x32, 0xf5, 0x1c,
	0x0f, 0x65, 0x26, 0x68, 0xe0, 0xea, 0x8e, 0xe2, 0xf7, 0x10, 0xf4, 0xf3, 0x20, 0x21, 0xcc, 0x59,
	0xba, 0x4f, 0xd9, 0xb7, 0x74, 0x13, 0x5d, 0x91, 0x05, 0x04, 0x5f, 0x77, 0xdb, 0xdd, 0xe7, 0xef,
	0xbb, 0xc8, 0x23, 0x01, 0xf8, 0x6c, 0xbf, 0x8e, 0x26, 0x66, 0xb1, 0xd9, 0xaf, 0x23, 0xdf, 0x2c,
	0xd2, 0x24, 0x89, 0xa6, 0x1f, 0x17, 0xf0, 0xe4, 0x88, 0xfa, 0x4e, 0x0a, 0x94, 0xf7, 0x87, 0x99,
	0x7d, 0xd3, 0x6f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xde, 0x18, 0x79, 0x05, 0x03, 0x00,
	0x00,
}
