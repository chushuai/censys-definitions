// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ct.proto

package censys_definitions

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CTPushStatus int32

const (
	CTPushStatus_CT_PUSH_STATUS_RESERVED       CTPushStatus = 0
	CTPushStatus_CT_PUSH_STATUS_UNKNOWN        CTPushStatus = 1
	CTPushStatus_CT_PUSH_STATUS_SUCCESS        CTPushStatus = 2
	CTPushStatus_CT_PUSH_STATUS_UNKNOWN_ERROR  CTPushStatus = 3
	CTPushStatus_CT_PUSH_STATUS_INVALID_ROOT   CTPushStatus = 4
	CTPushStatus_CT_PUSH_STATUS_ALREADY_EXISTS CTPushStatus = 5
	CTPushStatus_CT_PUSH_STATUS_WILL_NOT_PUSH  CTPushStatus = 6
)

var CTPushStatus_name = map[int32]string{
	0: "CT_PUSH_STATUS_RESERVED",
	1: "CT_PUSH_STATUS_UNKNOWN",
	2: "CT_PUSH_STATUS_SUCCESS",
	3: "CT_PUSH_STATUS_UNKNOWN_ERROR",
	4: "CT_PUSH_STATUS_INVALID_ROOT",
	5: "CT_PUSH_STATUS_ALREADY_EXISTS",
	6: "CT_PUSH_STATUS_WILL_NOT_PUSH",
}
var CTPushStatus_value = map[string]int32{
	"CT_PUSH_STATUS_RESERVED":       0,
	"CT_PUSH_STATUS_UNKNOWN":        1,
	"CT_PUSH_STATUS_SUCCESS":        2,
	"CT_PUSH_STATUS_UNKNOWN_ERROR":  3,
	"CT_PUSH_STATUS_INVALID_ROOT":   4,
	"CT_PUSH_STATUS_ALREADY_EXISTS": 5,
	"CT_PUSH_STATUS_WILL_NOT_PUSH":  6,
}

func (x CTPushStatus) String() string {
	return proto.EnumName(CTPushStatus_name, int32(x))
}
func (CTPushStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type CTServer int32

const (
	CTServer_CT_SERVER_RESERVED CTServer = 0
	// Censys
	CTServer_CT_SERVER_CENSYS_PRODUCTION  CTServer = 1
	CTServer_CT_SERVER_CENSYS_DEVELOPMENT CTServer = 2
	// Google
	CTServer_CT_SERVER_GOOGLE_PILOT      CTServer = 11
	CTServer_CT_SERVER_GOOGLE_ROCKETEER  CTServer = 12
	CTServer_CT_SERVER_GOOGLE_SUBMARINER CTServer = 13
	CTServer_CT_SERVER_GOOGLE_TESTTUBE   CTServer = 14
	CTServer_CT_SERVER_GOOGLE_ICARUS     CTServer = 15
	CTServer_CT_SERVER_GOOGLE_SKYDIVER   CTServer = 16
	CTServer_CT_SERVER_GOOGLE_DAEDALUS   CTServer = 17
	CTServer_CT_SERVER_GOOGLE_AVIATOR    CTServer = 10
	// Symantec
	CTServer_CT_SERVER_SYMANTEC_WS_CT     CTServer = 23
	CTServer_CT_SERVER_SYMANTEC_WS_VEGA   CTServer = 24
	CTServer_CT_SERVER_SYMANTEC_WS_DENEB  CTServer = 32
	CTServer_CT_SERVER_SYMANTEC_WS_SIRIUS CTServer = 37
	// Comodo
	CTServer_CT_SERVER_COMODO_DODO    CTServer = 35
	CTServer_CT_SERVER_COMODO_MAMMOTH CTServer = 36
	CTServer_CT_SERVER_COMODO_SABRE   CTServer = 41
	// Wosign
	CTServer_CT_SERVER_WOSIGN_CTLOG CTServer = 25
	CTServer_CT_SERVER_WOSIGN_CT    CTServer = 26
	// Venafi
	CTServer_CT_SERVER_VENAFI_API_CTLOG      CTServer = 31
	CTServer_CT_SERVER_VENAFI_API_CTLOG_GEN2 CTServer = 39
	// GDCA
	CTServer_CT_SERVER_GDCA_CT    CTServer = 28
	CTServer_CT_SERVER_GDCA_CTLOG CTServer = 34
	// Izenpe
	CTServer_CT_SERVER_IZENPE_COM_CT CTServer = 21
	CTServer_CT_SERVER_IZENPE_EUS_CT CTServer = 22
	// Digicert
	CTServer_CT_SERVER_DIGICERT_CT1 CTServer = 20
	CTServer_CT_SERVER_DIGICERT_CT2 CTServer = 40
	// Other
	CTServer_CT_SERVER_CNNIC_CTSERVER                CTServer = 27
	CTServer_CT_SERVER_STARTSSL_CT                   CTServer = 29
	CTServer_CT_SERVER_CERTLY_LOG                    CTServer = 30
	CTServer_CT_SERVER_NORDU_CT_PLAUSIBLE            CTServer = 33
	CTServer_CT_SERVER_CERTIFICATETRANSPARENCY_CN_CT CTServer = 38
	CTServer_CT_SERVER_SHECA_CT                      CTServer = 42
	CTServer_CT_SERVER_LETSENCRYPT_CT_CLICKY         CTServer = 44
)

var CTServer_name = map[int32]string{
	0:  "CT_SERVER_RESERVED",
	1:  "CT_SERVER_CENSYS_PRODUCTION",
	2:  "CT_SERVER_CENSYS_DEVELOPMENT",
	11: "CT_SERVER_GOOGLE_PILOT",
	12: "CT_SERVER_GOOGLE_ROCKETEER",
	13: "CT_SERVER_GOOGLE_SUBMARINER",
	14: "CT_SERVER_GOOGLE_TESTTUBE",
	15: "CT_SERVER_GOOGLE_ICARUS",
	16: "CT_SERVER_GOOGLE_SKYDIVER",
	17: "CT_SERVER_GOOGLE_DAEDALUS",
	10: "CT_SERVER_GOOGLE_AVIATOR",
	23: "CT_SERVER_SYMANTEC_WS_CT",
	24: "CT_SERVER_SYMANTEC_WS_VEGA",
	32: "CT_SERVER_SYMANTEC_WS_DENEB",
	37: "CT_SERVER_SYMANTEC_WS_SIRIUS",
	35: "CT_SERVER_COMODO_DODO",
	36: "CT_SERVER_COMODO_MAMMOTH",
	41: "CT_SERVER_COMODO_SABRE",
	25: "CT_SERVER_WOSIGN_CTLOG",
	26: "CT_SERVER_WOSIGN_CT",
	31: "CT_SERVER_VENAFI_API_CTLOG",
	39: "CT_SERVER_VENAFI_API_CTLOG_GEN2",
	28: "CT_SERVER_GDCA_CT",
	34: "CT_SERVER_GDCA_CTLOG",
	21: "CT_SERVER_IZENPE_COM_CT",
	22: "CT_SERVER_IZENPE_EUS_CT",
	20: "CT_SERVER_DIGICERT_CT1",
	40: "CT_SERVER_DIGICERT_CT2",
	27: "CT_SERVER_CNNIC_CTSERVER",
	29: "CT_SERVER_STARTSSL_CT",
	30: "CT_SERVER_CERTLY_LOG",
	33: "CT_SERVER_NORDU_CT_PLAUSIBLE",
	38: "CT_SERVER_CERTIFICATETRANSPARENCY_CN_CT",
	42: "CT_SERVER_SHECA_CT",
	44: "CT_SERVER_LETSENCRYPT_CT_CLICKY",
}
var CTServer_value = map[string]int32{
	"CT_SERVER_RESERVED":                      0,
	"CT_SERVER_CENSYS_PRODUCTION":             1,
	"CT_SERVER_CENSYS_DEVELOPMENT":            2,
	"CT_SERVER_GOOGLE_PILOT":                  11,
	"CT_SERVER_GOOGLE_ROCKETEER":              12,
	"CT_SERVER_GOOGLE_SUBMARINER":             13,
	"CT_SERVER_GOOGLE_TESTTUBE":               14,
	"CT_SERVER_GOOGLE_ICARUS":                 15,
	"CT_SERVER_GOOGLE_SKYDIVER":               16,
	"CT_SERVER_GOOGLE_DAEDALUS":               17,
	"CT_SERVER_GOOGLE_AVIATOR":                10,
	"CT_SERVER_SYMANTEC_WS_CT":                23,
	"CT_SERVER_SYMANTEC_WS_VEGA":              24,
	"CT_SERVER_SYMANTEC_WS_DENEB":             32,
	"CT_SERVER_SYMANTEC_WS_SIRIUS":            37,
	"CT_SERVER_COMODO_DODO":                   35,
	"CT_SERVER_COMODO_MAMMOTH":                36,
	"CT_SERVER_COMODO_SABRE":                  41,
	"CT_SERVER_WOSIGN_CTLOG":                  25,
	"CT_SERVER_WOSIGN_CT":                     26,
	"CT_SERVER_VENAFI_API_CTLOG":              31,
	"CT_SERVER_VENAFI_API_CTLOG_GEN2":         39,
	"CT_SERVER_GDCA_CT":                       28,
	"CT_SERVER_GDCA_CTLOG":                    34,
	"CT_SERVER_IZENPE_COM_CT":                 21,
	"CT_SERVER_IZENPE_EUS_CT":                 22,
	"CT_SERVER_DIGICERT_CT1":                  20,
	"CT_SERVER_DIGICERT_CT2":                  40,
	"CT_SERVER_CNNIC_CTSERVER":                27,
	"CT_SERVER_STARTSSL_CT":                   29,
	"CT_SERVER_CERTLY_LOG":                    30,
	"CT_SERVER_NORDU_CT_PLAUSIBLE":            33,
	"CT_SERVER_CERTIFICATETRANSPARENCY_CN_CT": 38,
	"CT_SERVER_SHECA_CT":                      42,
	"CT_SERVER_LETSENCRYPT_CT_CLICKY":         44,
}

func (x CTServer) String() string {
	return proto.EnumName(CTServer_name, int32(x))
}
func (CTServer) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

type CTServerStatus struct {
	Index int64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	// parsed out timestamp inside the SCT
	CtTimestamp int64 `protobuf:"varint,2,opt,name=ct_timestamp,json=ctTimestamp" json:"ct_timestamp,omitempty"`
	// when we found the certificate in CT
	PullTimestamp int64 `protobuf:"varint,3,opt,name=pull_timestamp,json=pullTimestamp" json:"pull_timestamp,omitempty"`
	// when we pushed the record to CT
	PushTimestamp int64        `protobuf:"varint,4,opt,name=push_timestamp,json=pushTimestamp" json:"push_timestamp,omitempty"`
	PushStatus    CTPushStatus `protobuf:"varint,5,opt,name=push_status,json=pushStatus,enum=zsearch.CTPushStatus" json:"push_status,omitempty"`
	Sct           []byte       `protobuf:"bytes,6,opt,name=sct,proto3" json:"sct,omitempty"`
	PushError     string       `protobuf:"bytes,7,opt,name=push_error,json=pushError" json:"push_error,omitempty"`
}

func (m *CTServerStatus) Reset()                    { *m = CTServerStatus{} }
func (m *CTServerStatus) String() string            { return proto.CompactTextString(m) }
func (*CTServerStatus) ProtoMessage()               {}
func (*CTServerStatus) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *CTServerStatus) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CTServerStatus) GetCtTimestamp() int64 {
	if m != nil {
		return m.CtTimestamp
	}
	return 0
}

func (m *CTServerStatus) GetPullTimestamp() int64 {
	if m != nil {
		return m.PullTimestamp
	}
	return 0
}

func (m *CTServerStatus) GetPushTimestamp() int64 {
	if m != nil {
		return m.PushTimestamp
	}
	return 0
}

func (m *CTServerStatus) GetPushStatus() CTPushStatus {
	if m != nil {
		return m.PushStatus
	}
	return CTPushStatus_CT_PUSH_STATUS_RESERVED
}

func (m *CTServerStatus) GetSct() []byte {
	if m != nil {
		return m.Sct
	}
	return nil
}

func (m *CTServerStatus) GetPushError() string {
	if m != nil {
		return m.PushError
	}
	return ""
}

type CTStatus struct {
	CensysDev                   *CTServerStatus `protobuf:"bytes,1,opt,name=censys_dev,json=censysDev" json:"censys_dev,omitempty"`
	Censys                      *CTServerStatus `protobuf:"bytes,2,opt,name=censys" json:"censys,omitempty"`
	GoogleAviator               *CTServerStatus `protobuf:"bytes,10,opt,name=google_aviator,json=googleAviator" json:"google_aviator,omitempty"`
	GooglePilot                 *CTServerStatus `protobuf:"bytes,11,opt,name=google_pilot,json=googlePilot" json:"google_pilot,omitempty"`
	GoogleRocketeer             *CTServerStatus `protobuf:"bytes,12,opt,name=google_rocketeer,json=googleRocketeer" json:"google_rocketeer,omitempty"`
	GoogleSubmariner            *CTServerStatus `protobuf:"bytes,13,opt,name=google_submariner,json=googleSubmariner" json:"google_submariner,omitempty"`
	GoogleTesttube              *CTServerStatus `protobuf:"bytes,14,opt,name=google_testtube,json=googleTesttube" json:"google_testtube,omitempty"`
	GoogleIcarus                *CTServerStatus `protobuf:"bytes,15,opt,name=google_icarus,json=googleIcarus" json:"google_icarus,omitempty"`
	GoogleSkydiver              *CTServerStatus `protobuf:"bytes,16,opt,name=google_skydiver,json=googleSkydiver" json:"google_skydiver,omitempty"`
	GoogleDaedalus              *CTServerStatus `protobuf:"bytes,17,opt,name=google_daedalus,json=googleDaedalus" json:"google_daedalus,omitempty"`
	DigicertCt1                 *CTServerStatus `protobuf:"bytes,20,opt,name=digicert_ct1,json=digicertCt1" json:"digicert_ct1,omitempty"`
	DigicertCt2                 *CTServerStatus `protobuf:"bytes,40,opt,name=digicert_ct2,json=digicertCt2" json:"digicert_ct2,omitempty"`
	IzenpeComCt                 *CTServerStatus `protobuf:"bytes,21,opt,name=izenpe_com_ct,json=izenpeComCt" json:"izenpe_com_ct,omitempty"`
	IzenpeEusCt                 *CTServerStatus `protobuf:"bytes,22,opt,name=izenpe_eus_ct,json=izenpeEusCt" json:"izenpe_eus_ct,omitempty"`
	SymantecWsCt                *CTServerStatus `protobuf:"bytes,23,opt,name=symantec_ws_ct,json=symantecWsCt" json:"symantec_ws_ct,omitempty"`
	SymantecWsVega              *CTServerStatus `protobuf:"bytes,24,opt,name=symantec_ws_vega,json=symantecWsVega" json:"symantec_ws_vega,omitempty"`
	SymantecWsSirius            *CTServerStatus `protobuf:"bytes,37,opt,name=symantec_ws_sirius,json=symantecWsSirius" json:"symantec_ws_sirius,omitempty"`
	SymantecWsDeneb             *CTServerStatus `protobuf:"bytes,32,opt,name=symantec_ws_deneb,json=symantecWsDeneb" json:"symantec_ws_deneb,omitempty"`
	ComodoDodo                  *CTServerStatus `protobuf:"bytes,34,opt,name=comodo_dodo,json=comodoDodo" json:"comodo_dodo,omitempty"`
	ComodoMammoth               *CTServerStatus `protobuf:"bytes,35,opt,name=comodo_mammoth,json=comodoMammoth" json:"comodo_mammoth,omitempty"`
	ComodoSabre                 *CTServerStatus `protobuf:"bytes,41,opt,name=comodo_sabre,json=comodoSabre" json:"comodo_sabre,omitempty"`
	WosignCtlog                 *CTServerStatus `protobuf:"bytes,25,opt,name=wosign_ctlog,json=wosignCtlog" json:"wosign_ctlog,omitempty"`
	WosignCt                    *CTServerStatus `protobuf:"bytes,26,opt,name=wosign_ct,json=wosignCt" json:"wosign_ct,omitempty"`
	GdcaCt                      *CTServerStatus `protobuf:"bytes,28,opt,name=gdca_ct,json=gdcaCt" json:"gdca_ct,omitempty"`
	GdcaCtlog                   *CTServerStatus `protobuf:"bytes,36,opt,name=gdca_ctlog,json=gdcaCtlog" json:"gdca_ctlog,omitempty"`
	VenafiApiCtlog              *CTServerStatus `protobuf:"bytes,31,opt,name=venafi_api_ctlog,json=venafiApiCtlog" json:"venafi_api_ctlog,omitempty"`
	VenafiApiCtlogGen2          *CTServerStatus `protobuf:"bytes,39,opt,name=venafi_api_ctlog_gen2,json=venafiApiCtlogGen2" json:"venafi_api_ctlog_gen2,omitempty"`
	NorduCtPlausible            *CTServerStatus `protobuf:"bytes,33,opt,name=nordu_ct_plausible,json=norduCtPlausible" json:"nordu_ct_plausible,omitempty"`
	CnnicCtserver               *CTServerStatus `protobuf:"bytes,27,opt,name=cnnic_ctserver,json=cnnicCtserver" json:"cnnic_ctserver,omitempty"`
	StartsslCt                  *CTServerStatus `protobuf:"bytes,29,opt,name=startssl_ct,json=startsslCt" json:"startssl_ct,omitempty"`
	CertlyLog                   *CTServerStatus `protobuf:"bytes,30,opt,name=certly_log,json=certlyLog" json:"certly_log,omitempty"`
	ShecaCt                     *CTServerStatus `protobuf:"bytes,42,opt,name=sheca_ct,json=shecaCt" json:"sheca_ct,omitempty"`
	CertificatetransparencyCnCt *CTServerStatus `protobuf:"bytes,38,opt,name=certificatetransparency_cn_ct,json=certificatetransparencyCnCt" json:"certificatetransparency_cn_ct,omitempty"`
	LetsencryptCtClicky         *CTServerStatus `protobuf:"bytes,43,opt,name=letsencrypt_ct_clicky,json=letsencryptCtClicky" json:"letsencrypt_ct_clicky,omitempty"`
}

func (m *CTStatus) Reset()                    { *m = CTStatus{} }
func (m *CTStatus) String() string            { return proto.CompactTextString(m) }
func (*CTStatus) ProtoMessage()               {}
func (*CTStatus) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *CTStatus) GetCensysDev() *CTServerStatus {
	if m != nil {
		return m.CensysDev
	}
	return nil
}

func (m *CTStatus) GetCensys() *CTServerStatus {
	if m != nil {
		return m.Censys
	}
	return nil
}

func (m *CTStatus) GetGoogleAviator() *CTServerStatus {
	if m != nil {
		return m.GoogleAviator
	}
	return nil
}

func (m *CTStatus) GetGooglePilot() *CTServerStatus {
	if m != nil {
		return m.GooglePilot
	}
	return nil
}

func (m *CTStatus) GetGoogleRocketeer() *CTServerStatus {
	if m != nil {
		return m.GoogleRocketeer
	}
	return nil
}

func (m *CTStatus) GetGoogleSubmariner() *CTServerStatus {
	if m != nil {
		return m.GoogleSubmariner
	}
	return nil
}

func (m *CTStatus) GetGoogleTesttube() *CTServerStatus {
	if m != nil {
		return m.GoogleTesttube
	}
	return nil
}

func (m *CTStatus) GetGoogleIcarus() *CTServerStatus {
	if m != nil {
		return m.GoogleIcarus
	}
	return nil
}

func (m *CTStatus) GetGoogleSkydiver() *CTServerStatus {
	if m != nil {
		return m.GoogleSkydiver
	}
	return nil
}

func (m *CTStatus) GetGoogleDaedalus() *CTServerStatus {
	if m != nil {
		return m.GoogleDaedalus
	}
	return nil
}

func (m *CTStatus) GetDigicertCt1() *CTServerStatus {
	if m != nil {
		return m.DigicertCt1
	}
	return nil
}

func (m *CTStatus) GetDigicertCt2() *CTServerStatus {
	if m != nil {
		return m.DigicertCt2
	}
	return nil
}

func (m *CTStatus) GetIzenpeComCt() *CTServerStatus {
	if m != nil {
		return m.IzenpeComCt
	}
	return nil
}

func (m *CTStatus) GetIzenpeEusCt() *CTServerStatus {
	if m != nil {
		return m.IzenpeEusCt
	}
	return nil
}

func (m *CTStatus) GetSymantecWsCt() *CTServerStatus {
	if m != nil {
		return m.SymantecWsCt
	}
	return nil
}

func (m *CTStatus) GetSymantecWsVega() *CTServerStatus {
	if m != nil {
		return m.SymantecWsVega
	}
	return nil
}

func (m *CTStatus) GetSymantecWsSirius() *CTServerStatus {
	if m != nil {
		return m.SymantecWsSirius
	}
	return nil
}

func (m *CTStatus) GetSymantecWsDeneb() *CTServerStatus {
	if m != nil {
		return m.SymantecWsDeneb
	}
	return nil
}

func (m *CTStatus) GetComodoDodo() *CTServerStatus {
	if m != nil {
		return m.ComodoDodo
	}
	return nil
}

func (m *CTStatus) GetComodoMammoth() *CTServerStatus {
	if m != nil {
		return m.ComodoMammoth
	}
	return nil
}

func (m *CTStatus) GetComodoSabre() *CTServerStatus {
	if m != nil {
		return m.ComodoSabre
	}
	return nil
}

func (m *CTStatus) GetWosignCtlog() *CTServerStatus {
	if m != nil {
		return m.WosignCtlog
	}
	return nil
}

func (m *CTStatus) GetWosignCt() *CTServerStatus {
	if m != nil {
		return m.WosignCt
	}
	return nil
}

func (m *CTStatus) GetGdcaCt() *CTServerStatus {
	if m != nil {
		return m.GdcaCt
	}
	return nil
}

func (m *CTStatus) GetGdcaCtlog() *CTServerStatus {
	if m != nil {
		return m.GdcaCtlog
	}
	return nil
}

func (m *CTStatus) GetVenafiApiCtlog() *CTServerStatus {
	if m != nil {
		return m.VenafiApiCtlog
	}
	return nil
}

func (m *CTStatus) GetVenafiApiCtlogGen2() *CTServerStatus {
	if m != nil {
		return m.VenafiApiCtlogGen2
	}
	return nil
}

func (m *CTStatus) GetNorduCtPlausible() *CTServerStatus {
	if m != nil {
		return m.NorduCtPlausible
	}
	return nil
}

func (m *CTStatus) GetCnnicCtserver() *CTServerStatus {
	if m != nil {
		return m.CnnicCtserver
	}
	return nil
}

func (m *CTStatus) GetStartsslCt() *CTServerStatus {
	if m != nil {
		return m.StartsslCt
	}
	return nil
}

func (m *CTStatus) GetCertlyLog() *CTServerStatus {
	if m != nil {
		return m.CertlyLog
	}
	return nil
}

func (m *CTStatus) GetShecaCt() *CTServerStatus {
	if m != nil {
		return m.ShecaCt
	}
	return nil
}

func (m *CTStatus) GetCertificatetransparencyCnCt() *CTServerStatus {
	if m != nil {
		return m.CertificatetransparencyCnCt
	}
	return nil
}

func (m *CTStatus) GetLetsencryptCtClicky() *CTServerStatus {
	if m != nil {
		return m.LetsencryptCtClicky
	}
	return nil
}

type SCT struct {
	Sha256Fp []byte          `protobuf:"bytes,1,opt,name=sha256fp,proto3" json:"sha256fp,omitempty"`
	Server   CTServer        `protobuf:"varint,2,opt,name=server,enum=zsearch.CTServer" json:"server,omitempty"`
	Status   *CTServerStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *SCT) Reset()                    { *m = SCT{} }
func (m *SCT) String() string            { return proto.CompactTextString(m) }
func (*SCT) ProtoMessage()               {}
func (*SCT) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *SCT) GetSha256Fp() []byte {
	if m != nil {
		return m.Sha256Fp
	}
	return nil
}

func (m *SCT) GetServer() CTServer {
	if m != nil {
		return m.Server
	}
	return CTServer_CT_SERVER_RESERVED
}

func (m *SCT) GetStatus() *CTServerStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*CTServerStatus)(nil), "zsearch.CTServerStatus")
	proto.RegisterType((*CTStatus)(nil), "zsearch.CTStatus")
	proto.RegisterType((*SCT)(nil), "zsearch.SCT")
	proto.RegisterEnum("zsearch.CTPushStatus", CTPushStatus_name, CTPushStatus_value)
	proto.RegisterEnum("zsearch.CTServer", CTServer_name, CTServer_value)
}

func init() { proto.RegisterFile("ct.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 1461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x97, 0x6f, 0x53, 0xdc, 0xb8,
	0x19, 0xc0, 0x0b, 0x5c, 0x08, 0x11, 0x7f, 0x22, 0x74, 0x21, 0x28, 0x10, 0x12, 0x42, 0x2e, 0x17,
	0x92, 0xeb, 0xa4, 0xcd, 0xb6, 0xcd, 0x74, 0xfa, 0x6f, 0x6a, 0x64, 0x1d, 0x71, 0xf1, 0xda, 0x3b,
	0x92, 0x76, 0xe9, 0xb6, 0x2f, 0x34, 0xc6, 0xab, 0x2c, 0x9e, 0xec, 0xda, 0x3b, 0xb6, 0x96, 0x2b,
	0x99, 0xe9, 0x4c, 0x3f, 0x50, 0xbf, 0x59, 0x5f, 0xf7, 0xfd, 0x8d, 0x6c, 0x6f, 0x62, 0x03, 0x59,
	0xf3, 0x6e, 0xad, 0xe7, 0xf7, 0x7b, 0x24, 0x3d, 0x8f, 0x2c, 0x0c, 0x58, 0x09, 0xf5, 0x9b, 0x49,
	0x9a, 0xe8, 0x04, 0xdd, 0xfd, 0x94, 0xa9, 0x20, 0x0d, 0xcf, 0x0f, 0xfe, 0xb3, 0x08, 0x36, 0x88,
	0xe0, 0x2a, 0xbd, 0x50, 0x29, 0xd7, 0x81, 0x9e, 0x66, 0xe8, 0x01, 0xb8, 0x13, 0xc5, 0x03, 0xf5,
	0x2f, 0xbc, 0xb0, 0xbf, 0x70, 0xb8, 0xc4, 0x8a, 0x07, 0xf4, 0x0c, 0xac, 0x85, 0x5a, 0xea, 0x68,
	0xac, 0x32, 0x1d, 0x8c, 0x27, 0x78, 0x31, 0x0f, 0xae, 0x86, 0x5a, 0xcc, 0x86, 0xd0, 0x0b, 0xb0,
	0x31, 0x99, 0x8e, 0x46, 0x15, 0x68, 0x29, 0x87, 0xd6, 0xcd, 0xe8, 0x15, 0x2c, 0x3b, 0xaf, 0x60,
	0xdf, 0xcc, 0xb0, 0xec, 0xfc, 0x0b, 0xf6, 0x0e, 0xac, 0xe6, 0x58, 0x96, 0xaf, 0x0a, 0xdf, 0xd9,
	0x5f, 0x38, 0xdc, 0x68, 0x6d, 0xbd, 0x29, 0x17, 0xfe, 0x86, 0x88, 0xce, 0x34, 0x3b, 0x2f, 0x96,
	0xcc, 0xc0, 0xe4, 0xf3, 0x6f, 0x04, 0xc1, 0x52, 0x16, 0x6a, 0xbc, 0xbc, 0xbf, 0x70, 0xb8, 0xc6,
	0xcc, 0x4f, 0xb4, 0x07, 0xf2, 0xb8, 0x54, 0x69, 0x9a, 0xa4, 0xf8, 0xee, 0xfe, 0xc2, 0xe1, 0x3d,
	0x76, 0xcf, 0x8c, 0x50, 0x33, 0x70, 0xf0, 0x7f, 0x08, 0x56, 0x88, 0x28, 0xed, 0x77, 0x00, 0x84,
	0x2a, 0xce, 0x2e, 0x33, 0x39, 0x50, 0x17, 0x79, 0x05, 0x56, 0x5b, 0xdb, 0x95, 0x49, 0xab, 0x95,
	0x62, 0xf7, 0x0a, 0xd4, 0x56, 0x17, 0xe8, 0x57, 0x60, 0xb9, 0x78, 0xc8, 0x0b, 0x33, 0xc7, 0x29,
	0x31, 0xf4, 0x17, 0xb0, 0x31, 0x4c, 0x92, 0xe1, 0x48, 0xc9, 0xe0, 0x22, 0x0a, 0x74, 0x92, 0x62,
	0x30, 0x5f, 0x5c, 0x2f, 0x70, 0xab, 0xa0, 0xd1, 0x1f, 0xc0, 0x5a, 0xe9, 0x4f, 0xa2, 0x51, 0xa2,
	0xf1, 0xea, 0x7c, 0x7b, 0xb5, 0x80, 0x3b, 0x86, 0x45, 0x47, 0x00, 0x96, 0x6e, 0x9a, 0x84, 0x1f,
	0x95, 0x56, 0x2a, 0xc5, 0x6b, 0xf3, 0xfd, 0xfb, 0x85, 0xc0, 0x66, 0x3c, 0xb2, 0xc1, 0x66, 0x99,
	0x23, 0x9b, 0x9e, 0x8d, 0x83, 0x34, 0x8a, 0x55, 0x8a, 0xd7, 0xe7, 0x27, 0x29, 0x67, 0xe5, 0x9f,
	0x05, 0xf4, 0x57, 0x50, 0x26, 0x96, 0x5a, 0x65, 0x5a, 0x4f, 0xcf, 0x14, 0xde, 0x98, 0x9f, 0xa3,
	0xac, 0x9a, 0x28, 0x71, 0xf4, 0x27, 0x50, 0x16, 0x46, 0x46, 0x61, 0x90, 0x4e, 0x33, 0x7c, 0x7f,
	0xbe, 0x5f, 0x56, 0xcd, 0xc9, 0xe1, 0xca, 0xfc, 0xd9, 0xc7, 0xcb, 0x41, 0x74, 0xa1, 0x52, 0x0c,
	0x6f, 0x35, 0x3f, 0x2f, 0xf1, 0x4a, 0x86, 0x41, 0xa0, 0x06, 0xc1, 0x68, 0x9a, 0xe1, 0xcd, 0x5b,
	0x65, 0xb0, 0x4b, 0xdc, 0x74, 0x72, 0x10, 0x0d, 0xa3, 0x50, 0xa5, 0x5a, 0x86, 0xfa, 0x2d, 0x7e,
	0xd0, 0xd0, 0xc9, 0x19, 0x4c, 0xf4, 0xdb, 0x2b, 0x6e, 0x0b, 0x1f, 0xde, 0xda, 0x6d, 0xa1, 0x3f,
	0x82, 0xf5, 0xe8, 0x93, 0x8a, 0x27, 0x4a, 0x86, 0xc9, 0x58, 0x86, 0x1a, 0x6f, 0x35, 0xc8, 0x05,
	0x4d, 0x92, 0x31, 0xd1, 0x15, 0x59, 0x4d, 0x33, 0x23, 0x3f, 0xbc, 0x95, 0x4c, 0xa7, 0x19, 0xd1,
	0xe8, 0xcf, 0x60, 0x23, 0xbb, 0x1c, 0x07, 0xb1, 0x56, 0xa1, 0xfc, 0x29, 0xb7, 0xb7, 0x1b, 0x9a,
	0x36, 0xc3, 0x4f, 0x8d, 0x6e, 0x01, 0x58, 0xd5, 0x2f, 0xd4, 0x30, 0xc0, 0xb8, 0xa1, 0xe6, 0x5f,
	0x12, 0xf4, 0xd4, 0x30, 0x40, 0x14, 0xa0, 0x6a, 0x8a, 0x2c, 0x4a, 0xa3, 0x69, 0x86, 0x5f, 0x34,
	0x1c, 0xdf, 0x2f, 0x49, 0x78, 0x2e, 0x20, 0x02, 0x36, 0xab, 0x69, 0x06, 0x2a, 0x56, 0x67, 0x78,
	0xbf, 0xe1, 0x4d, 0xfa, 0x92, 0xc5, 0x36, 0x3c, 0xfa, 0x3d, 0x58, 0x0d, 0x93, 0x71, 0x32, 0x48,
	0xe4, 0x20, 0x19, 0x24, 0xf8, 0x60, 0xbe, 0x0e, 0x0a, 0xd6, 0x4e, 0x06, 0x89, 0xb9, 0x43, 0x4a,
	0x73, 0x1c, 0x8c, 0xc7, 0x89, 0x3e, 0xc7, 0xcf, 0x1b, 0xee, 0x90, 0x02, 0x6f, 0x17, 0xb4, 0x39,
	0x3d, 0xa5, 0x9f, 0x05, 0x67, 0xa9, 0xc2, 0xaf, 0x1a, 0x7a, 0x58, 0xc0, 0xdc, 0xb0, 0xc6, 0xfd,
	0x29, 0xc9, 0xa2, 0x61, 0x2c, 0x43, 0x3d, 0x4a, 0x86, 0xf8, 0x51, 0x83, 0x5b, 0xc0, 0xc4, 0xb0,
	0xe8, 0xb7, 0xe0, 0xde, 0x67, 0x17, 0xef, 0xcc, 0x17, 0x57, 0x66, 0x22, 0xfa, 0x35, 0xb8, 0x3b,
	0x1c, 0x84, 0x81, 0x71, 0x1e, 0x37, 0xdc, 0xb1, 0x86, 0x23, 0xda, 0x5c, 0xe6, 0xa5, 0x61, 0x56,
	0xf8, 0x5d, 0xc3, 0x65, 0x5e, 0x48, 0x66, 0x7d, 0x16, 0x80, 0x17, 0x2a, 0x0e, 0x3e, 0x44, 0x32,
	0x98, 0x44, 0xa5, 0xfd, 0xb4, 0xe1, 0x80, 0x15, 0x82, 0x35, 0x89, 0x8a, 0x14, 0x7f, 0x03, 0x5b,
	0x57, 0x53, 0xc8, 0xa1, 0x8a, 0x5b, 0xf8, 0xe5, 0xfc, 0x3c, 0xa8, 0x9e, 0xe7, 0x58, 0xc5, 0x2d,
	0x73, 0x58, 0xe3, 0x24, 0x1d, 0x4c, 0x65, 0xa8, 0xe5, 0x64, 0x14, 0x4c, 0xb3, 0xe8, 0x6c, 0xa4,
	0xf0, 0xb3, 0x86, 0xc3, 0x9a, 0x2b, 0x44, 0x77, 0x66, 0x42, 0x7e, 0x5a, 0xe2, 0x38, 0x0a, 0x65,
	0xa8, 0xb3, 0x9c, 0xc4, 0xbb, 0x4d, 0xa7, 0xc5, 0xe0, 0xa4, 0xa4, 0xcd, 0x39, 0xcd, 0x74, 0x90,
	0xea, 0x2c, 0x1b, 0x99, 0x1e, 0xec, 0x35, 0x9c, 0xd3, 0x19, 0x5b, 0xf4, 0xc1, 0x5c, 0x3a, 0xa3,
	0x4b, 0x69, 0x2a, 0xf9, 0xa4, 0xf1, 0x8f, 0xaa, 0x41, 0xdd, 0x64, 0x88, 0x5a, 0x60, 0x25, 0x3b,
	0x57, 0x45, 0xcb, 0x5f, 0xcf, 0xb7, 0xee, 0xe6, 0x20, 0xd1, 0xe8, 0x9f, 0x60, 0xcf, 0x24, 0x88,
	0x3e, 0x44, 0x61, 0xa0, 0x95, 0x4e, 0x83, 0x38, 0x9b, 0x04, 0xa9, 0x8a, 0xc3, 0x4b, 0x19, 0xe6,
	0xe7, 0xed, 0xfb, 0xf9, 0x89, 0x76, 0xbf, 0x62, 0x13, 0x73, 0x04, 0x4f, 0xc0, 0xd6, 0x48, 0xe9,
	0x4c, 0xc5, 0x61, 0x7a, 0x39, 0x31, 0x37, 0xae, 0x0c, 0x47, 0x51, 0xf8, 0xf1, 0x12, 0xff, 0x30,
	0x3f, 0xe9, 0xb7, 0x15, 0x8b, 0x68, 0x92, 0x3b, 0x07, 0xff, 0x06, 0x4b, 0x9c, 0x08, 0xb4, 0x63,
	0x36, 0x19, 0xb4, 0x7e, 0xf7, 0xee, 0xc3, 0x24, 0xff, 0xde, 0x58, 0x63, 0x9f, 0x9f, 0xd1, 0x2b,
	0xb0, 0x5c, 0xb6, 0x6a, 0x31, 0xff, 0xfc, 0xd9, 0xbc, 0x36, 0x01, 0x2b, 0x01, 0xf3, 0x01, 0x52,
	0x7e, 0x29, 0x2d, 0x35, 0xbc, 0x1c, 0x05, 0xf6, 0xfa, 0x7f, 0x0b, 0x60, 0xad, 0xfa, 0x11, 0x85,
	0x76, 0xc1, 0x36, 0x11, 0xb2, 0xd3, 0xe5, 0xef, 0x25, 0x17, 0x96, 0xe8, 0x72, 0xc9, 0x28, 0xa7,
	0xac, 0x47, 0x6d, 0xf8, 0x0b, 0xb4, 0x03, 0x1e, 0x5e, 0x09, 0x76, 0xbd, 0x13, 0xcf, 0x3f, 0xf5,
	0xe0, 0xc2, 0x0d, 0x31, 0xde, 0x25, 0x84, 0x72, 0x0e, 0x17, 0xd1, 0x3e, 0x78, 0x7c, 0xb3, 0x27,
	0x29, 0x63, 0x3e, 0x83, 0x4b, 0xe8, 0x29, 0xd8, 0xbd, 0x42, 0x38, 0x5e, 0xcf, 0x72, 0x1d, 0x5b,
	0x32, 0xdf, 0x17, 0xf0, 0x1b, 0xf4, 0x0c, 0xec, 0x5d, 0x01, 0x2c, 0x97, 0x51, 0xcb, 0xee, 0x4b,
	0xfa, 0x77, 0x87, 0x0b, 0x0e, 0xef, 0xdc, 0x30, 0xcb, 0xa9, 0xe3, 0xba, 0xd2, 0xf3, 0x8b, 0x41,
	0xb8, 0xfc, 0xfa, 0xbf, 0x2b, 0xf9, 0x47, 0x5e, 0x51, 0xab, 0x87, 0x00, 0x11, 0x21, 0xf3, 0xbd,
	0xb1, 0xea, 0x26, 0x8b, 0xa5, 0x94, 0xe3, 0x84, 0x7a, 0xbc, 0xcf, 0x65, 0x87, 0xf9, 0x76, 0x97,
	0x08, 0xc7, 0x37, 0x3b, 0x2d, 0xe6, 0xa9, 0x03, 0x36, 0xed, 0x51, 0xd7, 0xef, 0xb4, 0xa9, 0x27,
	0xe0, 0x62, 0x59, 0x8b, 0x92, 0x38, 0xf6, 0xfd, 0x63, 0x97, 0xca, 0x8e, 0xe3, 0xfa, 0x02, 0xae,
	0xa2, 0x27, 0x60, 0xe7, 0x5a, 0x8c, 0xf9, 0xe4, 0x84, 0x0a, 0x4a, 0x19, 0x5c, 0xab, 0x4f, 0x5f,
	0xc6, 0x79, 0xf7, 0xa8, 0x6d, 0x31, 0xc7, 0xa3, 0x0c, 0xae, 0xa3, 0x3d, 0xf0, 0xe8, 0x1a, 0x20,
	0x28, 0x17, 0xa2, 0x7b, 0x44, 0xe1, 0x46, 0xd9, 0xc0, 0x7a, 0xd8, 0x21, 0x16, 0xeb, 0x72, 0x78,
	0xff, 0x46, 0x97, 0x9f, 0xf4, 0x6d, 0xa7, 0x47, 0x19, 0x84, 0x37, 0x86, 0x6d, 0x8b, 0xda, 0x96,
	0xdb, 0xe5, 0x70, 0x13, 0x3d, 0x06, 0xf8, 0x5a, 0xd8, 0xea, 0x39, 0x96, 0xf0, 0x19, 0x04, 0xf5,
	0x28, 0xef, 0xb7, 0x2d, 0x4f, 0x50, 0x22, 0x4f, 0xb9, 0x24, 0x02, 0x6e, 0xd7, 0xb7, 0x5d, 0x8d,
	0xf6, 0xe8, 0xb1, 0x05, 0x71, 0x7d, 0xdb, 0xd5, 0xb8, 0x4d, 0x3d, 0x7a, 0x04, 0xf7, 0xeb, 0x55,
	0xaf, 0x02, 0xdc, 0x61, 0x4e, 0x97, 0xc3, 0x17, 0xe8, 0x11, 0xd8, 0xaa, 0xf4, 0xc5, 0x6f, 0xfb,
	0xb6, 0x2f, 0x6d, 0xdf, 0xf6, 0xe1, 0xf3, 0xfa, 0xda, 0xca, 0x50, 0xdb, 0x6a, 0xb7, 0x7d, 0xf1,
	0x1e, 0x7e, 0x57, 0x6f, 0x57, 0x19, 0xe5, 0xd6, 0x11, 0xa3, 0xf0, 0x55, 0x3d, 0x76, 0xea, 0x73,
	0xe7, 0xd8, 0x93, 0x44, 0xb8, 0xfe, 0x31, 0x7c, 0x84, 0xb6, 0xc1, 0xb7, 0x37, 0xc4, 0xe0, 0x4e,
	0x7d, 0xb3, 0x3d, 0xea, 0x59, 0x3f, 0x3a, 0xd2, 0xea, 0x38, 0xa5, 0xf8, 0x14, 0x3d, 0x07, 0x4f,
	0xbf, 0x1e, 0x97, 0xc7, 0xd4, 0x6b, 0xc1, 0x97, 0x68, 0x0b, 0x6c, 0x56, 0xaa, 0x6d, 0x13, 0xcb,
	0xe4, 0x7e, 0x8c, 0x30, 0x78, 0x70, 0x6d, 0xd8, 0x64, 0x3d, 0xa8, 0x77, 0xde, 0xf9, 0x07, 0xf5,
	0x3a, 0xd4, 0xec, 0xc6, 0x68, 0x5b, 0x37, 0x06, 0x69, 0x37, 0x6f, 0xce, 0xc3, 0xfa, 0x26, 0x6d,
	0xe7, 0xd8, 0x21, 0x94, 0x09, 0x49, 0xc4, 0x5b, 0xf8, 0xe0, 0xab, 0xb1, 0x16, 0x3c, 0xbc, 0x52,
	0x56, 0xcf, 0x73, 0x88, 0x24, 0xa2, 0x78, 0x84, 0xbb, 0xf5, 0x7e, 0x70, 0x61, 0x31, 0xc1, 0xb9,
	0x6b, 0x26, 0xdc, 0xab, 0x6f, 0xc2, 0x24, 0x74, 0xfb, 0xd2, 0x6c, 0xe2, 0x49, 0xbd, 0xcd, 0x9e,
	0xcf, 0xec, 0xae, 0x34, 0x2f, 0xb5, 0x6b, 0x75, 0xb9, 0x73, 0xe4, 0x52, 0xf8, 0x0c, 0xfd, 0x00,
	0x5e, 0xd6, 0x5d, 0xe7, 0x47, 0x87, 0x58, 0x82, 0x0a, 0x66, 0x79, 0xbc, 0x63, 0x31, 0xea, 0x91,
	0xbe, 0x24, 0x79, 0x27, 0xbe, 0xaf, 0xbf, 0xe4, 0xfc, 0x3d, 0x2d, 0xaa, 0xf8, 0xba, 0xde, 0x01,
	0x97, 0x0a, 0x4e, 0x3d, 0xc2, 0xfa, 0x1d, 0xb3, 0x31, 0x49, 0x5c, 0x87, 0x9c, 0xf4, 0xe1, 0x2f,
	0xcf, 0x96, 0xf3, 0x7f, 0x93, 0x7f, 0xf3, 0x73, 0x00, 0x00, 0x00, 0xff, 0xff, 0xda, 0x79, 0x71,
	0x41, 0x32, 0x0f, 0x00, 0x00,
}
