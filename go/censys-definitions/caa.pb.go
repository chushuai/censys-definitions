// Code generated by protoc-gen-go. DO NOT EDIT.
// source: caa.proto

package censys_definitions

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CAAStatus int32

const (
	CAAStatus_CAA_STATUS_RESERVED                CAAStatus = 0
	CAAStatus_CAA_STATUS_VALIDATION_SUCCESS      CAAStatus = 1
	CAAStatus_CAA_STATUS_VALIDATION_FAIL         CAAStatus = 2
	CAAStatus_CAA_STATUS_VALIDATION_SKIPPED      CAAStatus = 3
	CAAStatus_CAA_STATUS_DNS_ERROR_SERVFAIL      CAAStatus = 4
	CAAStatus_CAA_STATUS_DNS_ERROR_AUTHFAIL      CAAStatus = 5
	CAAStatus_CAA_STATUS_DNS_ERROR_NO_RECORD     CAAStatus = 6
	CAAStatus_CAA_STATUS_DNS_ERROR_BLACKLIST     CAAStatus = 7
	CAAStatus_CAA_STATUS_DNS_ERROR_NO_OUTPUT     CAAStatus = 8
	CAAStatus_CAA_STATUS_DNS_ERROR_NO_ANSWER     CAAStatus = 9
	CAAStatus_CAA_STATUS_DNS_ERROR_ILLEGAL_INPUT CAAStatus = 10
	CAAStatus_CAA_STATUS_DNS_ERROR_TIMEOUT       CAAStatus = 11
	CAAStatus_CAA_STATUS_DNS_ERROR_ITER_TIMEOUT  CAAStatus = 12
	CAAStatus_CAA_STATUS_DNS_ERROR_TEMPORARY     CAAStatus = 13
	CAAStatus_CAA_STATUS_DNS_ERROR_TRUNCATED     CAAStatus = 14
)

var CAAStatus_name = map[int32]string{
	0:  "CAA_STATUS_RESERVED",
	1:  "CAA_STATUS_VALIDATION_SUCCESS",
	2:  "CAA_STATUS_VALIDATION_FAIL",
	3:  "CAA_STATUS_VALIDATION_SKIPPED",
	4:  "CAA_STATUS_DNS_ERROR_SERVFAIL",
	5:  "CAA_STATUS_DNS_ERROR_AUTHFAIL",
	6:  "CAA_STATUS_DNS_ERROR_NO_RECORD",
	7:  "CAA_STATUS_DNS_ERROR_BLACKLIST",
	8:  "CAA_STATUS_DNS_ERROR_NO_OUTPUT",
	9:  "CAA_STATUS_DNS_ERROR_NO_ANSWER",
	10: "CAA_STATUS_DNS_ERROR_ILLEGAL_INPUT",
	11: "CAA_STATUS_DNS_ERROR_TIMEOUT",
	12: "CAA_STATUS_DNS_ERROR_ITER_TIMEOUT",
	13: "CAA_STATUS_DNS_ERROR_TEMPORARY",
	14: "CAA_STATUS_DNS_ERROR_TRUNCATED",
}
var CAAStatus_value = map[string]int32{
	"CAA_STATUS_RESERVED":                0,
	"CAA_STATUS_VALIDATION_SUCCESS":      1,
	"CAA_STATUS_VALIDATION_FAIL":         2,
	"CAA_STATUS_VALIDATION_SKIPPED":      3,
	"CAA_STATUS_DNS_ERROR_SERVFAIL":      4,
	"CAA_STATUS_DNS_ERROR_AUTHFAIL":      5,
	"CAA_STATUS_DNS_ERROR_NO_RECORD":     6,
	"CAA_STATUS_DNS_ERROR_BLACKLIST":     7,
	"CAA_STATUS_DNS_ERROR_NO_OUTPUT":     8,
	"CAA_STATUS_DNS_ERROR_NO_ANSWER":     9,
	"CAA_STATUS_DNS_ERROR_ILLEGAL_INPUT": 10,
	"CAA_STATUS_DNS_ERROR_TIMEOUT":       11,
	"CAA_STATUS_DNS_ERROR_ITER_TIMEOUT":  12,
	"CAA_STATUS_DNS_ERROR_TEMPORARY":     13,
	"CAA_STATUS_DNS_ERROR_TRUNCATED":     14,
}

func (x CAAStatus) String() string {
	return proto.EnumName(CAAStatus_name, int32(x))
}
func (CAAStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type CAATagValue struct {
	// flag is one byte, this is the cheapest way to store it
	Flag  int32  `protobuf:"varint,1,opt,name=flag" json:"flag,omitempty"`
	Tag   string `protobuf:"bytes,2,opt,name=tag" json:"tag,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Ttl   uint32 `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *CAATagValue) Reset()                    { *m = CAATagValue{} }
func (m *CAATagValue) String() string            { return proto.CompactTextString(m) }
func (*CAATagValue) ProtoMessage()               {}
func (*CAATagValue) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CAATagValue) GetFlag() int32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *CAATagValue) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *CAATagValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CAATagValue) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type CAARecord struct {
	Domain string         `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Result CAAStatus      `protobuf:"varint,2,opt,name=result,enum=zsearch.CAAStatus" json:"result,omitempty"`
	Values []*CAATagValue `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
}

func (m *CAARecord) Reset()                    { *m = CAARecord{} }
func (m *CAARecord) String() string            { return proto.CompactTextString(m) }
func (*CAARecord) ProtoMessage()               {}
func (*CAARecord) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CAARecord) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CAARecord) GetResult() CAAStatus {
	if m != nil {
		return m.Result
	}
	return CAAStatus_CAA_STATUS_RESERVED
}

func (m *CAARecord) GetValues() []*CAATagValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type CAALookup struct {
	Timestamp uint64       `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Records   []*CAARecord `protobuf:"bytes,2,rep,name=records" json:"records,omitempty"`
}

func (m *CAALookup) Reset()                    { *m = CAALookup{} }
func (m *CAALookup) String() string            { return proto.CompactTextString(m) }
func (*CAALookup) ProtoMessage()               {}
func (*CAALookup) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *CAALookup) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CAALookup) GetRecords() []*CAARecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func init() {
	proto.RegisterType((*CAATagValue)(nil), "zsearch.CAATagValue")
	proto.RegisterType((*CAARecord)(nil), "zsearch.CAARecord")
	proto.RegisterType((*CAALookup)(nil), "zsearch.CAALookup")
	proto.RegisterEnum("zsearch.CAAStatus", CAAStatus_name, CAAStatus_value)
}

func init() { proto.RegisterFile("caa.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd3, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x06, 0x60, 0xd2, 0xa4, 0x29, 0x39, 0x65, 0x93, 0x65, 0x26, 0x88, 0xd0, 0x98, 0xb2, 0x48,
	0xa0, 0x6a, 0x9a, 0x7a, 0x31, 0x9e, 0xc0, 0x24, 0x06, 0xa2, 0x65, 0x49, 0x75, 0xec, 0x74, 0x42,
	0x5c, 0x44, 0xa6, 0x0b, 0x65, 0xa2, 0x25, 0x55, 0x92, 0x72, 0x81, 0xc4, 0x83, 0xf0, 0xb6, 0x28,
	0x6e, 0xa7, 0x8d, 0x29, 0xed, 0xdd, 0xb1, 0xf3, 0xe9, 0x3f, 0xbf, 0x2f, 0x02, 0xce, 0x4c, 0xa9,
	0xf1, 0xaa, 0x2a, 0x9b, 0x92, 0x0e, 0x7e, 0xd7, 0x85, 0xaa, 0x66, 0xdf, 0xfd, 0x2f, 0x30, 0x0c,
	0x18, 0x93, 0x6a, 0x3e, 0x55, 0x8b, 0x75, 0x41, 0x29, 0x58, 0xdf, 0x16, 0x6a, 0xee, 0x1a, 0x9e,
	0x31, 0xea, 0xa3, 0x9e, 0x29, 0x01, 0xb3, 0x51, 0x73, 0xb7, 0xe7, 0x19, 0x23, 0x07, 0xdb, 0x91,
	0x1e, 0x41, 0xff, 0x57, 0xcb, 0x5d, 0x53, 0xdf, 0x6d, 0x0e, 0xda, 0x35, 0x0b, 0xd7, 0xf2, 0x8c,
	0xd1, 0x01, 0xb6, 0xa3, 0xff, 0x07, 0x9c, 0x80, 0x31, 0x2c, 0x66, 0x65, 0x75, 0x43, 0x5f, 0x80,
	0x7d, 0x53, 0x2e, 0xd5, 0xed, 0x4f, 0x1d, 0xee, 0xe0, 0xf6, 0x44, 0xcf, 0xc0, 0xae, 0x8a, 0x7a,
	0xbd, 0x68, 0xf4, 0x86, 0xc3, 0x0b, 0x3a, 0xde, 0x76, 0x1b, 0x07, 0x8c, 0x89, 0x46, 0x35, 0xeb,
	0x1a, 0xb7, 0x82, 0x9e, 0x83, 0xad, 0x77, 0xd5, 0xae, 0xe9, 0x99, 0xa3, 0xe1, 0xc5, 0xd1, 0x43,
	0x7b, 0xf7, 0x08, 0xdc, 0x1a, 0xff, 0x5a, 0xaf, 0x8f, 0xcb, 0xf2, 0xc7, 0x7a, 0x45, 0x8f, 0xc1,
	0x69, 0x6e, 0x97, 0x45, 0xdd, 0xa8, 0xe5, 0x4a, 0x37, 0xb0, 0xf0, 0xfe, 0x82, 0x9e, 0xc3, 0xa0,
	0xd2, 0x35, 0x6b, 0xb7, 0xa7, 0x93, 0xff, 0x6b, 0xb1, 0x79, 0x01, 0xde, 0x91, 0xb3, 0xbf, 0x96,
	0x4e, 0xde, 0x94, 0xa3, 0x2f, 0xe1, 0x79, 0xc0, 0x58, 0x2e, 0x24, 0x93, 0x99, 0xc8, 0x91, 0x0b,
	0x8e, 0x53, 0x1e, 0x92, 0x27, 0xf4, 0x14, 0x5e, 0x3f, 0xf8, 0x30, 0x65, 0x71, 0x14, 0x32, 0x19,
	0xa5, 0x49, 0x2e, 0xb2, 0x20, 0xe0, 0x42, 0x10, 0x83, 0x9e, 0xc0, 0xab, 0x6e, 0xf2, 0x81, 0x45,
	0x31, 0xe9, 0xed, 0x89, 0xb8, 0x8c, 0x26, 0x13, 0x1e, 0x12, 0xf3, 0x11, 0x09, 0x13, 0x91, 0x73,
	0xc4, 0x14, 0xf3, 0xb6, 0x86, 0x4e, 0xb1, 0x76, 0x12, 0x96, 0xc9, 0x4f, 0x9a, 0xf4, 0xa9, 0x0f,
	0x27, 0x9d, 0x24, 0x49, 0x73, 0xe4, 0x41, 0x8a, 0x21, 0xb1, 0x77, 0x9a, 0xf7, 0x31, 0x0b, 0x2e,
	0xe3, 0x48, 0x48, 0x32, 0xd8, 0x97, 0x93, 0x66, 0x72, 0x92, 0x49, 0xf2, 0x74, 0x9f, 0x61, 0x89,
	0xb8, 0xe6, 0x48, 0x1c, 0xfa, 0x16, 0xfc, 0x4e, 0x13, 0xc5, 0x31, 0xff, 0xc8, 0xe2, 0x3c, 0x4a,
	0xda, 0x2c, 0xa0, 0x1e, 0x1c, 0x77, 0x3a, 0x19, 0x5d, 0xf1, 0x34, 0x93, 0x64, 0x48, 0xdf, 0xc0,
	0x69, 0x77, 0x92, 0xe4, 0xf7, 0xec, 0xd9, 0xce, 0x52, 0x92, 0x5f, 0x4d, 0x52, 0x64, 0xf8, 0x99,
	0x1c, 0xec, 0x36, 0x98, 0x25, 0x01, 0x93, 0x3c, 0x24, 0x87, 0x5f, 0x6d, 0xfd, 0x83, 0xbd, 0xfb,
	0x17, 0x00, 0x00, 0xff, 0xff, 0xca, 0x11, 0xeb, 0x61, 0x6d, 0x03, 0x00, 0x00,
}
