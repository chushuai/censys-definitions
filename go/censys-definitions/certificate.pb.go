// Code generated by protoc-gen-go.
// source: certificate.proto
// DO NOT EDIT!

package censys_definitions

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CertificateType int32

const (
	CertificateType_CERTIFICATE_TYPE_RESERVED     CertificateType = 0
	CertificateType_CERTIFICATE_TYPE_UNKNOWN      CertificateType = 1
	CertificateType_CERTIFICATE_TYPE_LEAF         CertificateType = 2
	CertificateType_CERTIFICATE_TYPE_INTERMEDIATE CertificateType = 3
	CertificateType_CERTIFICATE_TYPE_ROOT         CertificateType = 4
)

var CertificateType_name = map[int32]string{
	0: "CERTIFICATE_TYPE_RESERVED",
	1: "CERTIFICATE_TYPE_UNKNOWN",
	2: "CERTIFICATE_TYPE_LEAF",
	3: "CERTIFICATE_TYPE_INTERMEDIATE",
	4: "CERTIFICATE_TYPE_ROOT",
}
var CertificateType_value = map[string]int32{
	"CERTIFICATE_TYPE_RESERVED":     0,
	"CERTIFICATE_TYPE_UNKNOWN":      1,
	"CERTIFICATE_TYPE_LEAF":         2,
	"CERTIFICATE_TYPE_INTERMEDIATE": 3,
	"CERTIFICATE_TYPE_ROOT":         4,
}

func (x CertificateType) String() string {
	return proto.EnumName(CertificateType_name, int32(x))
}
func (CertificateType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

type CertificateSource int32

const (
	CertificateSource_CERTIFICATE_SOURCE_RESERVED           CertificateSource = 0
	CertificateSource_CERTIFICATE_SOURCE_UNKNOWN            CertificateSource = 1
	CertificateSource_CERTIFICATE_SOURCE_SCAN               CertificateSource = 2
	CertificateSource_CERTIFICATE_SOURCE_CT                 CertificateSource = 3
	CertificateSource_CERTIFICATE_SOURCE_MOZILLA_SALESFORCE CertificateSource = 4
	CertificateSource_CERTIFICATE_SOURCE_RESEARCH           CertificateSource = 5
	CertificateSource_CERTIFICATE_SOURCE_RAPID7             CertificateSource = 6
	CertificateSource_CERTIFICATE_SOURCE_HUBBLE             CertificateSource = 7
	CertificateSource_CERTIFICATE_SOURCE_CT_CHAIN           CertificateSource = 8
)

var CertificateSource_name = map[int32]string{
	0: "CERTIFICATE_SOURCE_RESERVED",
	1: "CERTIFICATE_SOURCE_UNKNOWN",
	2: "CERTIFICATE_SOURCE_SCAN",
	3: "CERTIFICATE_SOURCE_CT",
	4: "CERTIFICATE_SOURCE_MOZILLA_SALESFORCE",
	5: "CERTIFICATE_SOURCE_RESEARCH",
	6: "CERTIFICATE_SOURCE_RAPID7",
	7: "CERTIFICATE_SOURCE_HUBBLE",
	8: "CERTIFICATE_SOURCE_CT_CHAIN",
}
var CertificateSource_value = map[string]int32{
	"CERTIFICATE_SOURCE_RESERVED":           0,
	"CERTIFICATE_SOURCE_UNKNOWN":            1,
	"CERTIFICATE_SOURCE_SCAN":               2,
	"CERTIFICATE_SOURCE_CT":                 3,
	"CERTIFICATE_SOURCE_MOZILLA_SALESFORCE": 4,
	"CERTIFICATE_SOURCE_RESEARCH":           5,
	"CERTIFICATE_SOURCE_RAPID7":             6,
	"CERTIFICATE_SOURCE_HUBBLE":             7,
	"CERTIFICATE_SOURCE_CT_CHAIN":           8,
}

func (x CertificateSource) String() string {
	return proto.EnumName(CertificateSource_name, int32(x))
}
func (CertificateSource) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type CertificateParseStatus int32

const (
	CertificateParseStatus_CERTIFICATE_PARSE_STATUS_RESERVED   CertificateParseStatus = 0
	CertificateParseStatus_CERTIFICATE_PARSE_STATUS_UNKNOWN    CertificateParseStatus = 1
	CertificateParseStatus_CERTIFICATE_PARSE_STATUS_SUCCESS    CertificateParseStatus = 2
	CertificateParseStatus_CERTIFICATE_PARSE_STATUS_FAIL       CertificateParseStatus = 3
	CertificateParseStatus_CERTIFICATE_PARSE_STATUS_NOT_PARSED CertificateParseStatus = 4
)

var CertificateParseStatus_name = map[int32]string{
	0: "CERTIFICATE_PARSE_STATUS_RESERVED",
	1: "CERTIFICATE_PARSE_STATUS_UNKNOWN",
	2: "CERTIFICATE_PARSE_STATUS_SUCCESS",
	3: "CERTIFICATE_PARSE_STATUS_FAIL",
	4: "CERTIFICATE_PARSE_STATUS_NOT_PARSED",
}
var CertificateParseStatus_value = map[string]int32{
	"CERTIFICATE_PARSE_STATUS_RESERVED":   0,
	"CERTIFICATE_PARSE_STATUS_UNKNOWN":    1,
	"CERTIFICATE_PARSE_STATUS_SUCCESS":    2,
	"CERTIFICATE_PARSE_STATUS_FAIL":       3,
	"CERTIFICATE_PARSE_STATUS_NOT_PARSED": 4,
}

func (x CertificateParseStatus) String() string {
	return proto.EnumName(CertificateParseStatus_name, int32(x))
}
func (CertificateParseStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

type CertificateRevocationReason int32

const (
	CertificateRevocationReason_CERTIFICATE_REVOCATION_REASON_RESERVED CertificateRevocationReason = 0
	CertificateRevocationReason_CERTIFICATE_REVOCATION_REASON_UNKNOWN  CertificateRevocationReason = 1
	// RFC 5280
	CertificateRevocationReason_CERTIFICATE_REVOCATION_REASON_UNSPECIFIED            CertificateRevocationReason = 2
	CertificateRevocationReason_CERTIFICATE_REVOCATION_REASON_KEY_COMPROMISE         CertificateRevocationReason = 3
	CertificateRevocationReason_CERTIFICATE_REVOCATION_REASON_CA_COMPROMISE          CertificateRevocationReason = 4
	CertificateRevocationReason_CERTIFICATE_REVOCATION_REASON_AFFILIATION_CHANGED    CertificateRevocationReason = 5
	CertificateRevocationReason_CERTIFICATE_REVOCATION_REASON_SUPERSEDED             CertificateRevocationReason = 6
	CertificateRevocationReason_CERTIFICATE_REVOCATION_REASON_CESSATION_OF_OPERATION CertificateRevocationReason = 7
	CertificateRevocationReason_CERTIFICATE_REVOCATION_REASON_CERTIFICATE_HOLD       CertificateRevocationReason = 8
	CertificateRevocationReason_CERTIFICATE_REVOCATION_REASON_REMOVE_FROM_CRL        CertificateRevocationReason = 9
	CertificateRevocationReason_CERTIFICATE_REVOCATION_REASON_PRIVILEGE_WITHDRAWN    CertificateRevocationReason = 10
	CertificateRevocationReason_CERTIFICATE_REVOCATION_REASON_AA_COMPROMISE          CertificateRevocationReason = 11
)

var CertificateRevocationReason_name = map[int32]string{
	0:  "CERTIFICATE_REVOCATION_REASON_RESERVED",
	1:  "CERTIFICATE_REVOCATION_REASON_UNKNOWN",
	2:  "CERTIFICATE_REVOCATION_REASON_UNSPECIFIED",
	3:  "CERTIFICATE_REVOCATION_REASON_KEY_COMPROMISE",
	4:  "CERTIFICATE_REVOCATION_REASON_CA_COMPROMISE",
	5:  "CERTIFICATE_REVOCATION_REASON_AFFILIATION_CHANGED",
	6:  "CERTIFICATE_REVOCATION_REASON_SUPERSEDED",
	7:  "CERTIFICATE_REVOCATION_REASON_CESSATION_OF_OPERATION",
	8:  "CERTIFICATE_REVOCATION_REASON_CERTIFICATE_HOLD",
	9:  "CERTIFICATE_REVOCATION_REASON_REMOVE_FROM_CRL",
	10: "CERTIFICATE_REVOCATION_REASON_PRIVILEGE_WITHDRAWN",
	11: "CERTIFICATE_REVOCATION_REASON_AA_COMPROMISE",
}
var CertificateRevocationReason_value = map[string]int32{
	"CERTIFICATE_REVOCATION_REASON_RESERVED":               0,
	"CERTIFICATE_REVOCATION_REASON_UNKNOWN":                1,
	"CERTIFICATE_REVOCATION_REASON_UNSPECIFIED":            2,
	"CERTIFICATE_REVOCATION_REASON_KEY_COMPROMISE":         3,
	"CERTIFICATE_REVOCATION_REASON_CA_COMPROMISE":          4,
	"CERTIFICATE_REVOCATION_REASON_AFFILIATION_CHANGED":    5,
	"CERTIFICATE_REVOCATION_REASON_SUPERSEDED":             6,
	"CERTIFICATE_REVOCATION_REASON_CESSATION_OF_OPERATION": 7,
	"CERTIFICATE_REVOCATION_REASON_CERTIFICATE_HOLD":       8,
	"CERTIFICATE_REVOCATION_REASON_REMOVE_FROM_CRL":        9,
	"CERTIFICATE_REVOCATION_REASON_PRIVILEGE_WITHDRAWN":    10,
	"CERTIFICATE_REVOCATION_REASON_AA_COMPROMISE":          11,
}

func (x CertificateRevocationReason) String() string {
	return proto.EnumName(CertificateRevocationReason_name, int32(x))
}
func (CertificateRevocationReason) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

type Path struct {
	// Contains SHA256 fingerprints of a chain of certificates
	Sha256Fp [][]byte `protobuf:"bytes,1,rep,name=sha256fp,proto3" json:"sha256fp,omitempty"`
}

func (m *Path) Reset()                    { *m = Path{} }
func (m *Path) String() string            { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()               {}
func (*Path) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Path) GetSha256Fp() [][]byte {
	if m != nil {
		return m.Sha256Fp
	}
	return nil
}

type RootStoreStatus struct {
	// ((has_trusted_path && !revoked && !blacklisted) || whitelisted) && !expired
	Valid bool `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
	// True if the certificate is valid now or was ever valid in the past.
	WasValid bool `protobuf:"varint,2,opt,name=was_valid,json=wasValid" json:"was_valid,omitempty"`
	// True if there exists a path from the certificate to the root store.
	TrustedPath bool `protobuf:"varint,3,opt,name=trusted_path,json=trustedPath" json:"trusted_path,omitempty"`
	// True if now or at some point in the past there existed a path from the
	// certificate to the root store.
	HadTrustedPath bool `protobuf:"varint,4,opt,name=had_trusted_path,json=hadTrustedPath" json:"had_trusted_path,omitempty"`
	// True if the certificate is explicitly blacklisted by some method other
	// than OneCRL / CRLSet. For example, a set of certificates revoked by
	// Cloudflare are blacklisted by SPKI hash in Chrome.
	Blacklisted bool `protobuf:"varint,5,opt,name=blacklisted" json:"blacklisted,omitempty"`
	// True if the certificate is explicitly whitelisted, e.g. the set of
	// trusted WoSign certificates Apple uses.
	Whitelisted bool `protobuf:"varint,6,opt,name=whitelisted" json:"whitelisted,omitempty"`
	// Indicates if the certificate is a root, intermediate, or leaf.
	Type CertificateType `protobuf:"varint,7,opt,name=type,enum=zsearch.CertificateType" json:"type,omitempty"`
	// Current trusted paths to the root store. Only valid if
	// `has_trusted_paths = true`.
	TrustedPaths []*Path `protobuf:"bytes,8,rep,name=trusted_paths,json=trustedPaths" json:"trusted_paths,omitempty"`
	// True if the certificate is in the revocation set (e.g. OneCRL)
	// associated with this root store.
	InRevocationSet bool `protobuf:"varint,9,opt,name=in_revocation_set,json=inRevocationSet" json:"in_revocation_set,omitempty"`
	// SHA256 fingerprints of immediate parents.
	Parents [][]byte `protobuf:"bytes,10,rep,name=parents,proto3" json:"parents,omitempty"`
}

func (m *RootStoreStatus) Reset()                    { *m = RootStoreStatus{} }
func (m *RootStoreStatus) String() string            { return proto.CompactTextString(m) }
func (*RootStoreStatus) ProtoMessage()               {}
func (*RootStoreStatus) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *RootStoreStatus) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *RootStoreStatus) GetWasValid() bool {
	if m != nil {
		return m.WasValid
	}
	return false
}

func (m *RootStoreStatus) GetTrustedPath() bool {
	if m != nil {
		return m.TrustedPath
	}
	return false
}

func (m *RootStoreStatus) GetHadTrustedPath() bool {
	if m != nil {
		return m.HadTrustedPath
	}
	return false
}

func (m *RootStoreStatus) GetBlacklisted() bool {
	if m != nil {
		return m.Blacklisted
	}
	return false
}

func (m *RootStoreStatus) GetWhitelisted() bool {
	if m != nil {
		return m.Whitelisted
	}
	return false
}

func (m *RootStoreStatus) GetType() CertificateType {
	if m != nil {
		return m.Type
	}
	return CertificateType_CERTIFICATE_TYPE_RESERVED
}

func (m *RootStoreStatus) GetTrustedPaths() []*Path {
	if m != nil {
		return m.TrustedPaths
	}
	return nil
}

func (m *RootStoreStatus) GetInRevocationSet() bool {
	if m != nil {
		return m.InRevocationSet
	}
	return false
}

func (m *RootStoreStatus) GetParents() [][]byte {
	if m != nil {
		return m.Parents
	}
	return nil
}

type CertificateValidation struct {
	Nss       *RootStoreStatus `protobuf:"bytes,1,opt,name=nss" json:"nss,omitempty"`
	Microsoft *RootStoreStatus `protobuf:"bytes,2,opt,name=microsoft" json:"microsoft,omitempty"`
	Apple     *RootStoreStatus `protobuf:"bytes,3,opt,name=apple" json:"apple,omitempty"`
	Java      *RootStoreStatus `protobuf:"bytes,4,opt,name=java" json:"java,omitempty"`
	Android   *RootStoreStatus `protobuf:"bytes,5,opt,name=android" json:"android,omitempty"`
	// also track for Google CT servers so we know what to push
	GoogleCtPrimary *RootStoreStatus `protobuf:"bytes,10,opt,name=google_ct_primary,json=googleCtPrimary" json:"google_ct_primary,omitempty"`
}

func (m *CertificateValidation) Reset()                    { *m = CertificateValidation{} }
func (m *CertificateValidation) String() string            { return proto.CompactTextString(m) }
func (*CertificateValidation) ProtoMessage()               {}
func (*CertificateValidation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *CertificateValidation) GetNss() *RootStoreStatus {
	if m != nil {
		return m.Nss
	}
	return nil
}

func (m *CertificateValidation) GetMicrosoft() *RootStoreStatus {
	if m != nil {
		return m.Microsoft
	}
	return nil
}

func (m *CertificateValidation) GetApple() *RootStoreStatus {
	if m != nil {
		return m.Apple
	}
	return nil
}

func (m *CertificateValidation) GetJava() *RootStoreStatus {
	if m != nil {
		return m.Java
	}
	return nil
}

func (m *CertificateValidation) GetAndroid() *RootStoreStatus {
	if m != nil {
		return m.Android
	}
	return nil
}

func (m *CertificateValidation) GetGoogleCtPrimary() *RootStoreStatus {
	if m != nil {
		return m.GoogleCtPrimary
	}
	return nil
}

type MozillaSalesForceStatus struct {
	CurrentInIntermediates          bool   `protobuf:"varint,1,opt,name=current_in_intermediates,json=currentInIntermediates" json:"current_in_intermediates,omitempty"`
	WasInIntermediates              bool   `protobuf:"varint,2,opt,name=was_in_intermediates,json=wasInIntermediates" json:"was_in_intermediates,omitempty"`
	OwnerName                       string `protobuf:"bytes,3,opt,name=owner_name,json=ownerName" json:"owner_name,omitempty"`
	ParentName                      string `protobuf:"bytes,4,opt,name=parent_name,json=parentName" json:"parent_name,omitempty"`
	CertificateName                 string `protobuf:"bytes,5,opt,name=certificate_name,json=certificateName" json:"certificate_name,omitempty"`
	CertificatePolicy               string `protobuf:"bytes,6,opt,name=certificate_policy,json=certificatePolicy" json:"certificate_policy,omitempty"`
	CertificationPracticeStatement  string `protobuf:"bytes,7,opt,name=certification_practice_statement,json=certificationPracticeStatement" json:"certification_practice_statement,omitempty"`
	CpSameAsParent                  bool   `protobuf:"varint,8,opt,name=cp_same_as_parent,json=cpSameAsParent" json:"cp_same_as_parent,omitempty"`
	AuditSameAsParent               bool   `protobuf:"varint,9,opt,name=audit_same_as_parent,json=auditSameAsParent" json:"audit_same_as_parent,omitempty"`
	StandardAudit                   string `protobuf:"bytes,10,opt,name=standard_audit,json=standardAudit" json:"standard_audit,omitempty"`
	BrAudit                         string `protobuf:"bytes,11,opt,name=br_audit,json=brAudit" json:"br_audit,omitempty"`
	Auditor                         string `protobuf:"bytes,12,opt,name=auditor" json:"auditor,omitempty"`
	StandardAuditStatementTimestamp uint32 `protobuf:"varint,13,opt,name=standard_audit_statement_timestamp,json=standardAuditStatementTimestamp" json:"standard_audit_statement_timestamp,omitempty"`
	ManagementAssertionsBy          string `protobuf:"bytes,14,opt,name=management_assertions_by,json=managementAssertionsBy" json:"management_assertions_by,omitempty"`
	Comments                        string `protobuf:"bytes,15,opt,name=comments" json:"comments,omitempty"`
	// root fields
	EvPolicyOids              string `protobuf:"bytes,16,opt,name=ev_policy_oids,json=evPolicyOids" json:"ev_policy_oids,omitempty"`
	ApprovalBug               string `protobuf:"bytes,17,opt,name=approval_bug,json=approvalBug" json:"approval_bug,omitempty"`
	FirstNssRelease           string `protobuf:"bytes,18,opt,name=first_nss_release,json=firstNssRelease" json:"first_nss_release,omitempty"`
	FirstFirefoxRelease       string `protobuf:"bytes,19,opt,name=first_firefox_release,json=firstFirefoxRelease" json:"first_firefox_release,omitempty"`
	EvAudit                   string `protobuf:"bytes,20,opt,name=ev_audit,json=evAudit" json:"ev_audit,omitempty"`
	CurrentInRoots            bool   `protobuf:"varint,21,opt,name=current_in_roots,json=currentInRoots" json:"current_in_roots,omitempty"`
	WasInRoots                bool   `protobuf:"varint,22,opt,name=was_in_roots,json=wasInRoots" json:"was_in_roots,omitempty"`
	TestWebsiteValid          string `protobuf:"bytes,23,opt,name=test_website_valid,json=testWebsiteValid" json:"test_website_valid,omitempty"`
	MozillaAppliedConstraints string `protobuf:"bytes,24,opt,name=mozilla_applied_constraints,json=mozillaAppliedConstraints" json:"mozilla_applied_constraints,omitempty"`
	CompanyWebsite            string `protobuf:"bytes,25,opt,name=company_website,json=companyWebsite" json:"company_website,omitempty"`
	GeographicFocus           string `protobuf:"bytes,26,opt,name=geographic_focus,json=geographicFocus" json:"geographic_focus,omitempty"`
	StandardAuditType         string `protobuf:"bytes,27,opt,name=standard_audit_type,json=standardAuditType" json:"standard_audit_type,omitempty"`
}

func (m *MozillaSalesForceStatus) Reset()                    { *m = MozillaSalesForceStatus{} }
func (m *MozillaSalesForceStatus) String() string            { return proto.CompactTextString(m) }
func (*MozillaSalesForceStatus) ProtoMessage()               {}
func (*MozillaSalesForceStatus) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *MozillaSalesForceStatus) GetCurrentInIntermediates() bool {
	if m != nil {
		return m.CurrentInIntermediates
	}
	return false
}

func (m *MozillaSalesForceStatus) GetWasInIntermediates() bool {
	if m != nil {
		return m.WasInIntermediates
	}
	return false
}

func (m *MozillaSalesForceStatus) GetOwnerName() string {
	if m != nil {
		return m.OwnerName
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetParentName() string {
	if m != nil {
		return m.ParentName
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetCertificateName() string {
	if m != nil {
		return m.CertificateName
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetCertificatePolicy() string {
	if m != nil {
		return m.CertificatePolicy
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetCertificationPracticeStatement() string {
	if m != nil {
		return m.CertificationPracticeStatement
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetCpSameAsParent() bool {
	if m != nil {
		return m.CpSameAsParent
	}
	return false
}

func (m *MozillaSalesForceStatus) GetAuditSameAsParent() bool {
	if m != nil {
		return m.AuditSameAsParent
	}
	return false
}

func (m *MozillaSalesForceStatus) GetStandardAudit() string {
	if m != nil {
		return m.StandardAudit
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetBrAudit() string {
	if m != nil {
		return m.BrAudit
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetAuditor() string {
	if m != nil {
		return m.Auditor
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetStandardAuditStatementTimestamp() uint32 {
	if m != nil {
		return m.StandardAuditStatementTimestamp
	}
	return 0
}

func (m *MozillaSalesForceStatus) GetManagementAssertionsBy() string {
	if m != nil {
		return m.ManagementAssertionsBy
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetComments() string {
	if m != nil {
		return m.Comments
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetEvPolicyOids() string {
	if m != nil {
		return m.EvPolicyOids
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetApprovalBug() string {
	if m != nil {
		return m.ApprovalBug
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetFirstNssRelease() string {
	if m != nil {
		return m.FirstNssRelease
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetFirstFirefoxRelease() string {
	if m != nil {
		return m.FirstFirefoxRelease
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetEvAudit() string {
	if m != nil {
		return m.EvAudit
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetCurrentInRoots() bool {
	if m != nil {
		return m.CurrentInRoots
	}
	return false
}

func (m *MozillaSalesForceStatus) GetWasInRoots() bool {
	if m != nil {
		return m.WasInRoots
	}
	return false
}

func (m *MozillaSalesForceStatus) GetTestWebsiteValid() string {
	if m != nil {
		return m.TestWebsiteValid
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetMozillaAppliedConstraints() string {
	if m != nil {
		return m.MozillaAppliedConstraints
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetCompanyWebsite() string {
	if m != nil {
		return m.CompanyWebsite
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetGeographicFocus() string {
	if m != nil {
		return m.GeographicFocus
	}
	return ""
}

func (m *MozillaSalesForceStatus) GetStandardAuditType() string {
	if m != nil {
		return m.StandardAuditType
	}
	return ""
}

type CertificateRevocation struct {
	Revoked bool                        `protobuf:"varint,1,opt,name=revoked" json:"revoked,omitempty"`
	Reason  CertificateRevocationReason `protobuf:"varint,2,opt,name=reason,enum=zsearch.CertificateRevocationReason" json:"reason,omitempty"`
}

func (m *CertificateRevocation) Reset()                    { *m = CertificateRevocation{} }
func (m *CertificateRevocation) String() string            { return proto.CompactTextString(m) }
func (*CertificateRevocation) ProtoMessage()               {}
func (*CertificateRevocation) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *CertificateRevocation) GetRevoked() bool {
	if m != nil {
		return m.Revoked
	}
	return false
}

func (m *CertificateRevocation) GetReason() CertificateRevocationReason {
	if m != nil {
		return m.Reason
	}
	return CertificateRevocationReason_CERTIFICATE_REVOCATION_REASON_RESERVED
}

type CertificateAudit struct {
	Mozilla *MozillaSalesForceStatus `protobuf:"bytes,1,opt,name=mozilla" json:"mozilla,omitempty"`
}

func (m *CertificateAudit) Reset()                    { *m = CertificateAudit{} }
func (m *CertificateAudit) String() string            { return proto.CompactTextString(m) }
func (*CertificateAudit) ProtoMessage()               {}
func (*CertificateAudit) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *CertificateAudit) GetMozilla() *MozillaSalesForceStatus {
	if m != nil {
		return m.Mozilla
	}
	return nil
}

// Database Records
type Certificate struct {
	Sha1Fp       []byte                 `protobuf:"bytes,1,opt,name=sha1fp,proto3" json:"sha1fp,omitempty"`
	Sha256Fp     []byte                 `protobuf:"bytes,2,opt,name=sha256fp,proto3" json:"sha256fp,omitempty"`
	Raw          []byte                 `protobuf:"bytes,3,opt,name=raw,proto3" json:"raw,omitempty"`
	Parsed       string                 `protobuf:"bytes,4,opt,name=parsed" json:"parsed,omitempty"`
	ParseStatus  CertificateParseStatus `protobuf:"varint,44,opt,name=parse_status,json=parseStatus,enum=zsearch.CertificateParseStatus" json:"parse_status,omitempty"`
	ParseVersion uint32                 `protobuf:"varint,39,opt,name=parse_version,json=parseVersion" json:"parse_version,omitempty"`
	ParseError   string                 `protobuf:"bytes,47,opt,name=parse_error,json=parseError" json:"parse_error,omitempty"`
	Parents      [][]byte               `protobuf:"bytes,5,rep,name=parents,proto3" json:"parents,omitempty"`
	// the chain that we received with the certificate and pass
	// to the certificate processing daemon.
	PresentedChain       [][]byte               `protobuf:"bytes,45,rep,name=presented_chain,json=presentedChain,proto3" json:"presented_chain,omitempty"`
	Source               CertificateSource      `protobuf:"varint,28,opt,name=source,enum=zsearch.CertificateSource" json:"source,omitempty"`
	SeenInScan           bool                   `protobuf:"varint,29,opt,name=seen_in_scan,json=seenInScan" json:"seen_in_scan,omitempty"`
	PostProcessed        bool                   `protobuf:"varint,26,opt,name=post_processed,json=postProcessed" json:"post_processed,omitempty"`
	PostProcessTimestamp uint32                 `protobuf:"varint,37,opt,name=post_process_timestamp,json=postProcessTimestamp" json:"post_process_timestamp,omitempty"`
	Validation           *CertificateValidation `protobuf:"bytes,35,opt,name=validation" json:"validation,omitempty"`
	Ct                   *CTStatus              `protobuf:"bytes,30,opt,name=ct" json:"ct,omitempty"`
	Zlint                *ZLint                 `protobuf:"bytes,38,opt,name=zlint" json:"zlint,omitempty"`
	Caa                  *CAALookup             `protobuf:"bytes,49,opt,name=caa" json:"caa,omitempty"`
	Revocation           *CertificateRevocation `protobuf:"bytes,43,opt,name=revocation" json:"revocation,omitempty"`
	Audit                *CertificateAudit      `protobuf:"bytes,46,opt,name=audit" json:"audit,omitempty"`
	// store wheter record is precert so that CT synchronization
	// daemon can quickly decide what to do without reparsing the
	// raw certificate
	IsPrecert bool `protobuf:"varint,32,opt,name=is_precert,json=isPrecert" json:"is_precert,omitempty"`
	// store time range that certificate is valid so that cert
	// dump job can mark certificates as expired
	NotValidAfter  uint32 `protobuf:"varint,41,opt,name=not_valid_after,json=notValidAfter" json:"not_valid_after,omitempty"`
	NotValidBefore uint32 `protobuf:"varint,42,opt,name=not_valid_before,json=notValidBefore" json:"not_valid_before,omitempty"`
	Expired        bool   `protobuf:"varint,48,opt,name=expired" json:"expired,omitempty"`
	// deprecated stuff
	InNss                 bool                     `protobuf:"varint,6,opt,name=in_nss,json=inNss" json:"in_nss,omitempty"`
	InMicrosoft           bool                     `protobuf:"varint,7,opt,name=in_microsoft,json=inMicrosoft" json:"in_microsoft,omitempty"`
	InApple               bool                     `protobuf:"varint,8,opt,name=in_apple,json=inApple" json:"in_apple,omitempty"`
	ValidationTimestamp   uint32                   `protobuf:"varint,10,opt,name=validation_timestamp,json=validationTimestamp" json:"validation_timestamp,omitempty"`
	ValidNss              bool                     `protobuf:"varint,11,opt,name=valid_nss,json=validNss" json:"valid_nss,omitempty"`
	ValidMicrosoft        bool                     `protobuf:"varint,12,opt,name=valid_microsoft,json=validMicrosoft" json:"valid_microsoft,omitempty"`
	ValidApple            bool                     `protobuf:"varint,13,opt,name=valid_apple,json=validApple" json:"valid_apple,omitempty"`
	WasValidNss           bool                     `protobuf:"varint,14,opt,name=was_valid_nss,json=wasValidNss" json:"was_valid_nss,omitempty"`
	WasValidMicrosoft     bool                     `protobuf:"varint,15,opt,name=was_valid_microsoft,json=wasValidMicrosoft" json:"was_valid_microsoft,omitempty"`
	WasValidApple         bool                     `protobuf:"varint,16,opt,name=was_valid_apple,json=wasValidApple" json:"was_valid_apple,omitempty"`
	WasInNss              bool                     `protobuf:"varint,17,opt,name=was_in_nss,json=wasInNss" json:"was_in_nss,omitempty"`
	WasInMicrosoft        bool                     `protobuf:"varint,18,opt,name=was_in_microsoft,json=wasInMicrosoft" json:"was_in_microsoft,omitempty"`
	WasInApple            bool                     `protobuf:"varint,19,opt,name=was_in_apple,json=wasInApple" json:"was_in_apple,omitempty"`
	CurrentValidNss       bool                     `protobuf:"varint,20,opt,name=current_valid_nss,json=currentValidNss" json:"current_valid_nss,omitempty"`
	CurrentValidMicrosoft bool                     `protobuf:"varint,21,opt,name=current_valid_microsoft,json=currentValidMicrosoft" json:"current_valid_microsoft,omitempty"`
	CurrentValidApple     bool                     `protobuf:"varint,22,opt,name=current_valid_apple,json=currentValidApple" json:"current_valid_apple,omitempty"`
	CurrentInNss          bool                     `protobuf:"varint,23,opt,name=current_in_nss,json=currentInNss" json:"current_in_nss,omitempty"`
	CurrentInMicrosoft    bool                     `protobuf:"varint,24,opt,name=current_in_microsoft,json=currentInMicrosoft" json:"current_in_microsoft,omitempty"`
	CurrentInApple        bool                     `protobuf:"varint,25,opt,name=current_in_apple,json=currentInApple" json:"current_in_apple,omitempty"`
	NssAudit              *MozillaSalesForceStatus `protobuf:"bytes,31,opt,name=nss_audit,json=nssAudit" json:"nss_audit,omitempty"`
	ShouldPostProcess     bool                     `protobuf:"varint,27,opt,name=should_post_process,json=shouldPostProcess" json:"should_post_process,omitempty"`
	DoNotPostProcess      bool                     `protobuf:"varint,36,opt,name=do_not_post_process,json=doNotPostProcess" json:"do_not_post_process,omitempty"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *Certificate) GetSha1Fp() []byte {
	if m != nil {
		return m.Sha1Fp
	}
	return nil
}

func (m *Certificate) GetSha256Fp() []byte {
	if m != nil {
		return m.Sha256Fp
	}
	return nil
}

func (m *Certificate) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *Certificate) GetParsed() string {
	if m != nil {
		return m.Parsed
	}
	return ""
}

func (m *Certificate) GetParseStatus() CertificateParseStatus {
	if m != nil {
		return m.ParseStatus
	}
	return CertificateParseStatus_CERTIFICATE_PARSE_STATUS_RESERVED
}

func (m *Certificate) GetParseVersion() uint32 {
	if m != nil {
		return m.ParseVersion
	}
	return 0
}

func (m *Certificate) GetParseError() string {
	if m != nil {
		return m.ParseError
	}
	return ""
}

func (m *Certificate) GetParents() [][]byte {
	if m != nil {
		return m.Parents
	}
	return nil
}

func (m *Certificate) GetPresentedChain() [][]byte {
	if m != nil {
		return m.PresentedChain
	}
	return nil
}

func (m *Certificate) GetSource() CertificateSource {
	if m != nil {
		return m.Source
	}
	return CertificateSource_CERTIFICATE_SOURCE_RESERVED
}

func (m *Certificate) GetSeenInScan() bool {
	if m != nil {
		return m.SeenInScan
	}
	return false
}

func (m *Certificate) GetPostProcessed() bool {
	if m != nil {
		return m.PostProcessed
	}
	return false
}

func (m *Certificate) GetPostProcessTimestamp() uint32 {
	if m != nil {
		return m.PostProcessTimestamp
	}
	return 0
}

func (m *Certificate) GetValidation() *CertificateValidation {
	if m != nil {
		return m.Validation
	}
	return nil
}

func (m *Certificate) GetCt() *CTStatus {
	if m != nil {
		return m.Ct
	}
	return nil
}

func (m *Certificate) GetZlint() *ZLint {
	if m != nil {
		return m.Zlint
	}
	return nil
}

func (m *Certificate) GetCaa() *CAALookup {
	if m != nil {
		return m.Caa
	}
	return nil
}

func (m *Certificate) GetRevocation() *CertificateRevocation {
	if m != nil {
		return m.Revocation
	}
	return nil
}

func (m *Certificate) GetAudit() *CertificateAudit {
	if m != nil {
		return m.Audit
	}
	return nil
}

func (m *Certificate) GetIsPrecert() bool {
	if m != nil {
		return m.IsPrecert
	}
	return false
}

func (m *Certificate) GetNotValidAfter() uint32 {
	if m != nil {
		return m.NotValidAfter
	}
	return 0
}

func (m *Certificate) GetNotValidBefore() uint32 {
	if m != nil {
		return m.NotValidBefore
	}
	return 0
}

func (m *Certificate) GetExpired() bool {
	if m != nil {
		return m.Expired
	}
	return false
}

func (m *Certificate) GetInNss() bool {
	if m != nil {
		return m.InNss
	}
	return false
}

func (m *Certificate) GetInMicrosoft() bool {
	if m != nil {
		return m.InMicrosoft
	}
	return false
}

func (m *Certificate) GetInApple() bool {
	if m != nil {
		return m.InApple
	}
	return false
}

func (m *Certificate) GetValidationTimestamp() uint32 {
	if m != nil {
		return m.ValidationTimestamp
	}
	return 0
}

func (m *Certificate) GetValidNss() bool {
	if m != nil {
		return m.ValidNss
	}
	return false
}

func (m *Certificate) GetValidMicrosoft() bool {
	if m != nil {
		return m.ValidMicrosoft
	}
	return false
}

func (m *Certificate) GetValidApple() bool {
	if m != nil {
		return m.ValidApple
	}
	return false
}

func (m *Certificate) GetWasValidNss() bool {
	if m != nil {
		return m.WasValidNss
	}
	return false
}

func (m *Certificate) GetWasValidMicrosoft() bool {
	if m != nil {
		return m.WasValidMicrosoft
	}
	return false
}

func (m *Certificate) GetWasValidApple() bool {
	if m != nil {
		return m.WasValidApple
	}
	return false
}

func (m *Certificate) GetWasInNss() bool {
	if m != nil {
		return m.WasInNss
	}
	return false
}

func (m *Certificate) GetWasInMicrosoft() bool {
	if m != nil {
		return m.WasInMicrosoft
	}
	return false
}

func (m *Certificate) GetWasInApple() bool {
	if m != nil {
		return m.WasInApple
	}
	return false
}

func (m *Certificate) GetCurrentValidNss() bool {
	if m != nil {
		return m.CurrentValidNss
	}
	return false
}

func (m *Certificate) GetCurrentValidMicrosoft() bool {
	if m != nil {
		return m.CurrentValidMicrosoft
	}
	return false
}

func (m *Certificate) GetCurrentValidApple() bool {
	if m != nil {
		return m.CurrentValidApple
	}
	return false
}

func (m *Certificate) GetCurrentInNss() bool {
	if m != nil {
		return m.CurrentInNss
	}
	return false
}

func (m *Certificate) GetCurrentInMicrosoft() bool {
	if m != nil {
		return m.CurrentInMicrosoft
	}
	return false
}

func (m *Certificate) GetCurrentInApple() bool {
	if m != nil {
		return m.CurrentInApple
	}
	return false
}

func (m *Certificate) GetNssAudit() *MozillaSalesForceStatus {
	if m != nil {
		return m.NssAudit
	}
	return nil
}

func (m *Certificate) GetShouldPostProcess() bool {
	if m != nil {
		return m.ShouldPostProcess
	}
	return false
}

func (m *Certificate) GetDoNotPostProcess() bool {
	if m != nil {
		return m.DoNotPostProcess
	}
	return false
}

func init() {
	proto.RegisterType((*Path)(nil), "zsearch.Path")
	proto.RegisterType((*RootStoreStatus)(nil), "zsearch.RootStoreStatus")
	proto.RegisterType((*CertificateValidation)(nil), "zsearch.CertificateValidation")
	proto.RegisterType((*MozillaSalesForceStatus)(nil), "zsearch.MozillaSalesForceStatus")
	proto.RegisterType((*CertificateRevocation)(nil), "zsearch.CertificateRevocation")
	proto.RegisterType((*CertificateAudit)(nil), "zsearch.CertificateAudit")
	proto.RegisterType((*Certificate)(nil), "zsearch.Certificate")
	proto.RegisterEnum("zsearch.CertificateType", CertificateType_name, CertificateType_value)
	proto.RegisterEnum("zsearch.CertificateSource", CertificateSource_name, CertificateSource_value)
	proto.RegisterEnum("zsearch.CertificateParseStatus", CertificateParseStatus_name, CertificateParseStatus_value)
	proto.RegisterEnum("zsearch.CertificateRevocationReason", CertificateRevocationReason_name, CertificateRevocationReason_value)
}

func init() { proto.RegisterFile("certificate.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 2219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x58, 0xdd, 0x52, 0xdb, 0x48,
	0xf6, 0xff, 0xf3, 0x6d, 0x1f, 0x1b, 0x23, 0x9a, 0x8f, 0x08, 0x98, 0x04, 0x87, 0x90, 0x09, 0x21,
	0x84, 0x04, 0xff, 0x33, 0xb3, 0x53, 0x53, 0x5b, 0x53, 0x25, 0x8c, 0x3c, 0xb8, 0x62, 0x6c, 0x97,
	0x64, 0x48, 0xcd, 0xdc, 0x74, 0x35, 0x72, 0x03, 0xda, 0xd8, 0x6a, 0x95, 0xba, 0x0d, 0x43, 0x5e,
	0x68, 0x1f, 0x61, 0xdf, 0x60, 0x5f, 0x60, 0x2f, 0xf6, 0x01, 0xf6, 0x15, 0xf6, 0x76, 0xab, 0xb6,
	0xba, 0x5b, 0x96, 0x64, 0x3e, 0xcc, 0x5e, 0xe1, 0x3e, 0xe7, 0xf7, 0xeb, 0x3e, 0x7d, 0xfa, 0x7c,
	0x09, 0x58, 0xf4, 0x68, 0x24, 0xfc, 0x0b, 0xdf, 0x23, 0x82, 0xee, 0x87, 0x11, 0x13, 0x0c, 0xcd,
	0x7d, 0xe3, 0x94, 0x44, 0xde, 0xd5, 0x7a, 0xd1, 0x63, 0xfd, 0x3e, 0x0b, 0xb4, 0x78, 0xbd, 0xf0,
	0xad, 0xe7, 0x07, 0x22, 0x5e, 0xe4, 0xbc, 0xe1, 0xaf, 0xbc, 0x47, 0x88, 0xfe, 0xb9, 0xb5, 0x05,
	0xd3, 0x6d, 0x22, 0xae, 0xd0, 0x3a, 0xe4, 0xf8, 0x15, 0xa9, 0xfc, 0xf0, 0xe3, 0x45, 0x68, 0x4e,
	0x94, 0xa7, 0x76, 0x8a, 0x4e, 0xb2, 0xde, 0xfa, 0xcf, 0x24, 0x2c, 0x38, 0x8c, 0x09, 0x57, 0xb0,
	0x88, 0xba, 0x82, 0x88, 0x01, 0x47, 0xcb, 0x30, 0x73, 0x4d, 0x7a, 0x7e, 0xd7, 0x9c, 0x28, 0x4f,
	0xec, 0xe4, 0x1c, 0xbd, 0x40, 0x1b, 0x90, 0xbf, 0x21, 0x1c, 0x6b, 0xcd, 0xa4, 0xd2, 0xe4, 0x6e,
	0x08, 0x3f, 0x53, 0xca, 0x97, 0x50, 0x14, 0xd1, 0x80, 0x0b, 0xda, 0xc5, 0x21, 0x11, 0x57, 0xe6,
	0x94, 0xd2, 0x17, 0x62, 0x99, 0xb2, 0x62, 0x07, 0x8c, 0x2b, 0xd2, 0xc5, 0x23, 0xb0, 0x69, 0x05,
	0x2b, 0x5d, 0x91, 0x6e, 0x27, 0x83, 0x2c, 0x43, 0xe1, 0xbc, 0x47, 0xbc, 0xaf, 0x3d, 0x5f, 0x8a,
	0xcc, 0x19, 0xbd, 0x57, 0x46, 0x24, 0x11, 0x37, 0x57, 0xbe, 0xa0, 0x31, 0x62, 0x56, 0x23, 0x32,
	0x22, 0xb4, 0x07, 0xd3, 0xe2, 0x36, 0xa4, 0xe6, 0x5c, 0x79, 0x62, 0xa7, 0x54, 0x31, 0xf7, 0x63,
	0x1f, 0xee, 0x57, 0x53, 0xf7, 0x76, 0x6e, 0x43, 0xea, 0x28, 0x14, 0xaa, 0xc0, 0x7c, 0xd6, 0x2e,
	0x6e, 0xe6, 0xca, 0x53, 0x3b, 0x85, 0xca, 0x7c, 0x42, 0x93, 0x76, 0x39, 0xc5, 0xcc, 0x75, 0x38,
	0xda, 0x85, 0x45, 0x3f, 0xc0, 0x11, 0xbd, 0x66, 0x1e, 0x11, 0x3e, 0x0b, 0x30, 0xa7, 0xc2, 0xcc,
	0x2b, 0x4b, 0x16, 0xfc, 0xc0, 0x49, 0xe4, 0x2e, 0x15, 0xc8, 0x84, 0xb9, 0x90, 0x44, 0x34, 0x10,
	0xdc, 0x04, 0xf5, 0x00, 0xc3, 0xe5, 0xd6, 0x3f, 0x26, 0x61, 0x25, 0x63, 0x93, 0xf2, 0xa6, 0xa2,
	0xa1, 0x5d, 0x98, 0x0a, 0x38, 0x57, 0x6f, 0x50, 0xc8, 0x5c, 0xe0, 0xce, 0x63, 0x39, 0x12, 0x84,
	0x7e, 0x84, 0x7c, 0xdf, 0xf7, 0x22, 0xc6, 0xd9, 0x85, 0x50, 0x6f, 0x33, 0x8e, 0x91, 0x42, 0xd1,
	0x3e, 0xcc, 0x90, 0x30, 0xec, 0x51, 0xf5, 0x5e, 0xe3, 0x38, 0x1a, 0x26, 0xbd, 0xfa, 0x17, 0x72,
	0x4d, 0xd4, 0xbb, 0x8d, 0x83, 0x2b, 0x14, 0xaa, 0xc0, 0x1c, 0x09, 0xba, 0x11, 0xf3, 0xf5, 0x1b,
	0x8e, 0x23, 0x0c, 0x81, 0xe8, 0x08, 0x16, 0x2f, 0x19, 0xbb, 0xec, 0x51, 0xec, 0x09, 0x1c, 0x46,
	0x7e, 0x9f, 0x44, 0xb7, 0x26, 0x3c, 0xc1, 0x5e, 0xd0, 0x94, 0xaa, 0x68, 0x6b, 0xc2, 0xd6, 0xdf,
	0xf3, 0xf0, 0xec, 0x84, 0x7d, 0xf3, 0x7b, 0x3d, 0xe2, 0x92, 0x1e, 0xe5, 0x35, 0x16, 0x79, 0xc3,
	0xe8, 0xfe, 0x09, 0x4c, 0x6f, 0x10, 0x49, 0xef, 0x63, 0x3f, 0xc0, 0x7e, 0x20, 0x68, 0xd4, 0xa7,
	0x5d, 0x9f, 0x08, 0xca, 0xe3, 0x80, 0x5f, 0x8d, 0xf5, 0xf5, 0xa0, 0x9e, 0xd5, 0xa2, 0x8f, 0xb0,
	0x2c, 0x33, 0xe0, 0x1e, 0x4b, 0x27, 0x03, 0xba, 0x21, 0xfc, 0x2e, 0xe3, 0x39, 0x00, 0xbb, 0x09,
	0x68, 0x84, 0x03, 0xd2, 0xd7, 0x4e, 0xce, 0x3b, 0x79, 0x25, 0x69, 0x92, 0x3e, 0x45, 0x9b, 0x50,
	0xd0, 0x71, 0xa0, 0xf5, 0xd3, 0x4a, 0x0f, 0x5a, 0xa4, 0x00, 0x6f, 0xc1, 0xc8, 0xd4, 0x03, 0x8d,
	0x9a, 0x51, 0xa8, 0x85, 0x8c, 0x5c, 0x41, 0xdf, 0x03, 0xca, 0x42, 0x43, 0xd6, 0xf3, 0xbd, 0x5b,
	0x95, 0x19, 0x79, 0x27, 0x5b, 0x54, 0xda, 0x4a, 0x81, 0x8e, 0xa1, 0x9c, 0x0a, 0x65, 0xf4, 0x86,
	0x11, 0xf1, 0x84, 0xef, 0x51, 0xcc, 0x05, 0x11, 0xb4, 0x4f, 0x03, 0xa1, 0x72, 0x27, 0xef, 0xbc,
	0x18, 0xc1, 0xb5, 0x63, 0x98, 0x3b, 0x44, 0xa1, 0xb7, 0xb0, 0xe8, 0x85, 0x98, 0x93, 0x3e, 0xc5,
	0x84, 0x63, 0x6d, 0xbc, 0x99, 0xd3, 0x89, 0xed, 0x85, 0x2e, 0xe9, 0x53, 0x8b, 0xb7, 0x95, 0x14,
	0x7d, 0x80, 0x65, 0x32, 0xe8, 0xfa, 0xe2, 0x2e, 0x5a, 0x67, 0xcd, 0xa2, 0xd2, 0x8d, 0x10, 0x5e,
	0x43, 0x89, 0x0b, 0x12, 0x74, 0x49, 0xd4, 0xc5, 0x4a, 0xab, 0x42, 0x21, 0xef, 0xcc, 0x0f, 0xa5,
	0x96, 0x14, 0xa2, 0x35, 0xc8, 0x9d, 0x47, 0x31, 0xa0, 0xa0, 0x00, 0x73, 0xe7, 0x91, 0x56, 0x99,
	0x30, 0xa7, 0xe4, 0x2c, 0x32, 0x8b, 0x5a, 0x13, 0x2f, 0xd1, 0x67, 0xd8, 0x1a, 0xdd, 0x3b, 0xbd,
	0x39, 0x16, 0x7e, 0x9f, 0x72, 0x41, 0xfa, 0xa1, 0x39, 0x5f, 0x9e, 0xd8, 0x99, 0x77, 0x36, 0x47,
	0xce, 0x4b, 0xee, 0xde, 0x19, 0xc2, 0x64, 0x50, 0xf5, 0x49, 0x40, 0x2e, 0x35, 0x9d, 0x70, 0x2e,
	0x7d, 0xc6, 0x02, 0x8e, 0xcf, 0x6f, 0xcd, 0x92, 0x3a, 0x77, 0x35, 0xd5, 0x5b, 0x89, 0xfa, 0xf0,
	0x56, 0x16, 0x67, 0x59, 0xd6, 0x55, 0x6d, 0x58, 0x50, 0xc8, 0x64, 0x8d, 0xb6, 0xa1, 0x44, 0xaf,
	0xe3, 0xa7, 0xc4, 0xcc, 0xef, 0x72, 0xd3, 0x50, 0x88, 0x22, 0xbd, 0xd6, 0xcf, 0xd8, 0xf2, 0xbb,
	0x5c, 0xd6, 0x5e, 0x12, 0x86, 0x11, 0xbb, 0x26, 0x3d, 0x7c, 0x3e, 0xb8, 0x34, 0x17, 0x15, 0xa6,
	0x30, 0x94, 0x1d, 0x0e, 0x2e, 0x65, 0xad, 0xba, 0xf0, 0x23, 0x2e, 0x70, 0xc0, 0x39, 0x8e, 0x68,
	0x8f, 0x12, 0x4e, 0x4d, 0xa4, 0x03, 0x49, 0x29, 0x9a, 0x9c, 0x3b, 0x5a, 0x8c, 0x2a, 0xb0, 0xa2,
	0xb1, 0x17, 0x7e, 0x44, 0x2f, 0xd8, 0x1f, 0x09, 0x7e, 0x49, 0xe1, 0x97, 0x94, 0xb2, 0xa6, 0x75,
	0x43, 0xce, 0x1a, 0xe4, 0xe8, 0x75, 0xfc, 0x00, 0xcb, 0xda, 0xcd, 0xf4, 0x5a, 0x3f, 0xc0, 0x0e,
	0x18, 0x99, 0x74, 0x8b, 0x18, 0x13, 0xdc, 0x5c, 0x89, 0xa3, 0x63, 0x98, 0x66, 0x32, 0x9f, 0x39,
	0x2a, 0x43, 0x31, 0x4e, 0x2f, 0x8d, 0x5a, 0x55, 0x28, 0x50, 0x69, 0xa5, 0x11, 0x7b, 0x80, 0x04,
	0xe5, 0x02, 0xdf, 0xd0, 0x73, 0xee, 0x0b, 0x1a, 0xf7, 0xa2, 0x67, 0xea, 0x40, 0x43, 0x6a, 0xbe,
	0x68, 0x85, 0xee, 0x49, 0xbf, 0xc0, 0x46, 0x5f, 0xd7, 0x00, 0x2c, 0xab, 0x97, 0x4f, 0xbb, 0xd8,
	0x63, 0x01, 0x17, 0x11, 0xf1, 0xa5, 0xb3, 0x4d, 0x45, 0x5b, 0x8b, 0x21, 0x96, 0x46, 0x54, 0x53,
	0x00, 0x7a, 0x03, 0x0b, 0x1e, 0xeb, 0x87, 0x24, 0xb8, 0x1d, 0x1e, 0x68, 0xae, 0x29, 0x4e, 0x29,
	0x16, 0xc7, 0xa7, 0xc9, 0x2c, 0xbd, 0xa4, 0xec, 0x32, 0x22, 0xe1, 0x95, 0xef, 0xe1, 0x0b, 0xe6,
	0x0d, 0xb8, 0xb9, 0xae, 0x9d, 0x9b, 0xca, 0x6b, 0x52, 0x8c, 0xf6, 0x61, 0xe9, 0x4e, 0xd0, 0xa9,
	0x2e, 0xb5, 0xa1, 0xd3, 0x74, 0x24, 0xca, 0x64, 0x7b, 0xda, 0x62, 0x23, 0xdd, 0x21, 0x6d, 0x2a,
	0x32, 0xae, 0x65, 0xeb, 0xf9, 0x4a, 0x87, 0x5d, 0x7a, 0xb8, 0x44, 0x7f, 0x86, 0xd9, 0x88, 0x12,
	0xce, 0x02, 0x55, 0x97, 0x4a, 0x95, 0xed, 0x87, 0x7a, 0x5f, 0xba, 0x93, 0xa3, 0xb0, 0x4e, 0xcc,
	0xd9, 0x6a, 0x82, 0x91, 0x81, 0xe9, 0x27, 0xfc, 0x19, 0xe6, 0x62, 0x2f, 0xc5, 0xdd, 0xa8, 0x9c,
	0x6c, 0xf9, 0x48, 0x91, 0x75, 0x86, 0x84, 0xad, 0x7f, 0x95, 0xa0, 0x90, 0xd9, 0x10, 0xad, 0xc2,
	0x2c, 0xbf, 0x22, 0x07, 0x6a, 0x12, 0x99, 0xd8, 0x29, 0x3a, 0xf1, 0x6a, 0x64, 0x46, 0x99, 0x54,
	0x9a, 0x64, 0x8d, 0x0c, 0x98, 0x8a, 0xc8, 0x8d, 0x2a, 0x9f, 0x45, 0x47, 0xfe, 0x94, 0xbb, 0x84,
	0x24, 0xe2, 0xb4, 0x1b, 0xd7, 0xcc, 0x78, 0x85, 0x0e, 0xa1, 0xa8, 0x7e, 0xa9, 0x54, 0x1e, 0x70,
	0x73, 0x4f, 0x79, 0x60, 0xf3, 0x21, 0x0f, 0xb4, 0x25, 0x2e, 0xb6, 0xb6, 0x10, 0xa6, 0x0b, 0xf4,
	0x0a, 0xe6, 0xf5, 0x1e, 0xd7, 0x34, 0xe2, 0x3e, 0x0b, 0xcc, 0x37, 0xaa, 0x04, 0xe8, 0x8d, 0xcf,
	0xb4, 0x2c, 0xae, 0xdc, 0x9c, 0x62, 0x1a, 0x45, 0x2c, 0x32, 0x3f, 0x24, 0x95, 0x9b, 0x53, 0x5b,
	0x4a, 0xb2, 0x1d, 0x7f, 0x66, 0xa4, 0xe3, 0xcb, 0xb0, 0x0a, 0x23, 0xca, 0x69, 0x20, 0xa7, 0x0d,
	0xef, 0x8a, 0xf8, 0x81, 0xf9, 0x5e, 0x21, 0x4a, 0x89, 0xb8, 0x2a, 0xa5, 0xa8, 0x02, 0xb3, 0x9c,
	0x0d, 0x22, 0x8f, 0x9a, 0xdf, 0xa9, 0x6b, 0xac, 0x3f, 0x74, 0x0d, 0x57, 0x21, 0x9c, 0x18, 0x29,
	0x73, 0x88, 0x53, 0x2a, 0x1b, 0x14, 0xe6, 0x1e, 0x09, 0xcc, 0xe7, 0x3a, 0x87, 0xa4, 0xac, 0x1e,
	0xb8, 0x1e, 0x09, 0x64, 0x49, 0x0d, 0x19, 0x97, 0xbd, 0x95, 0x79, 0x94, 0x4b, 0x17, 0xae, 0x2b,
	0xcc, 0xbc, 0x94, 0xb6, 0x87, 0x42, 0xf4, 0x09, 0x56, 0xb3, 0xb0, 0x4c, 0x45, 0x7c, 0xad, 0xdc,
	0xb1, 0x9c, 0x81, 0xa7, 0x65, 0xf0, 0x17, 0x80, 0xeb, 0x64, 0x82, 0x31, 0x5f, 0xa9, 0x60, 0x79,
	0xf1, 0x90, 0xd9, 0xe9, 0x9c, 0xe3, 0x64, 0x18, 0xe8, 0x25, 0x4c, 0x7a, 0xc2, 0x7c, 0xa1, 0x78,
	0x8b, 0x29, 0xaf, 0x13, 0xbf, 0xd3, 0xa4, 0x27, 0xd0, 0x36, 0xcc, 0xa8, 0xc1, 0xd7, 0xfc, 0x5e,
	0xa1, 0x4a, 0x09, 0xea, 0xf7, 0x86, 0x1f, 0x08, 0x47, 0x2b, 0xd1, 0x36, 0x4c, 0x79, 0x84, 0x98,
	0x07, 0x0a, 0x83, 0xd2, 0x9d, 0x2c, 0xab, 0xc1, 0xd8, 0xd7, 0x41, 0xe8, 0x48, 0xb5, 0x34, 0x37,
	0x9d, 0xdf, 0xcc, 0x77, 0x8f, 0x9b, 0x9b, 0x49, 0x97, 0x0c, 0x03, 0x7d, 0x80, 0x19, 0x5d, 0xf3,
	0xf6, 0x15, 0x75, 0xed, 0x21, 0xaa, 0x4a, 0x21, 0x47, 0xe3, 0xe4, 0x3c, 0xe0, 0x73, 0x1c, 0x46,
	0x54, 0xf6, 0x54, 0xb3, 0xac, 0x1c, 0x9f, 0xf7, 0x79, 0x5b, 0x0b, 0xd0, 0xf7, 0xb0, 0x10, 0x30,
	0xa1, 0xcb, 0x1a, 0x26, 0x17, 0x82, 0x46, 0xe6, 0x5b, 0xe5, 0xed, 0xf9, 0x80, 0x09, 0xe5, 0x32,
	0x4b, 0x0a, 0x65, 0x4d, 0x4d, 0x71, 0xe7, 0xf4, 0x82, 0x45, 0xd4, 0xdc, 0x55, 0xc0, 0xd2, 0x10,
	0x78, 0xa8, 0xa4, 0x32, 0x0c, 0xe9, 0x1f, 0xa1, 0x1f, 0xd1, 0xae, 0xf9, 0x51, 0x97, 0x89, 0x78,
	0x89, 0x56, 0x60, 0xd6, 0x0f, 0x64, 0x3f, 0x88, 0xa7, 0xe7, 0x19, 0x3f, 0x68, 0x72, 0x8e, 0x5e,
	0x43, 0xd1, 0x0f, 0x70, 0x3a, 0x4c, 0xca, 0x19, 0x20, 0x77, 0x38, 0x69, 0x4e, 0x38, 0x05, 0x3f,
	0x38, 0x49, 0x06, 0xc7, 0xe7, 0x90, 0xf3, 0x03, 0xac, 0x67, 0xc7, 0x5c, 0x02, 0x99, 0xf3, 0x03,
	0x4b, 0xcd, 0x89, 0x07, 0xb0, 0x9c, 0xbe, 0x6a, 0x26, 0x76, 0x40, 0x19, 0xb9, 0x94, 0xea, 0xd2,
	0xd0, 0xd9, 0x84, 0xbc, 0xbe, 0x8f, 0x34, 0xa9, 0x90, 0x6c, 0x99, 0x53, 0x42, 0x69, 0xd9, 0x3b,
	0x58, 0xd0, 0x80, 0xd4, 0xb8, 0x62, 0x02, 0x2b, 0x29, 0x55, 0x6a, 0xdf, 0x2b, 0x28, 0xc4, 0x5e,
	0x54, 0x26, 0xce, 0x27, 0x40, 0x1d, 0x6d, 0xda, 0xca, 0x2d, 0x98, 0x4f, 0xbe, 0x68, 0xd4, 0xb1,
	0xa5, 0xf8, 0x3b, 0x22, 0xfe, 0xaa, 0x91, 0xa7, 0x56, 0x60, 0x29, 0xc5, 0xa4, 0x27, 0x2f, 0x24,
	0x1b, 0x2e, 0x0e, 0xd1, 0xe9, 0xe1, 0xbb, 0xb0, 0x90, 0x72, 0xb4, 0x01, 0x46, 0x82, 0x9f, 0x1f,
	0xe2, 0xb5, 0x0d, 0x65, 0x80, 0xb8, 0xe9, 0x49, 0x03, 0x16, 0xd3, 0x7b, 0xab, 0xb6, 0x27, 0x2d,
	0xd8, 0x03, 0x23, 0x46, 0xa4, 0xc7, 0xa3, 0xf4, 0xe2, 0x0a, 0x97, 0x9e, 0xbd, 0x9d, 0x34, 0x51,
	0x7d, 0xf0, 0x52, 0x7a, 0x73, 0x85, 0xd4, 0xa7, 0xee, 0xc2, 0xe2, 0xb0, 0x29, 0xa7, 0xb7, 0x5f,
	0xd6, 0xdf, 0x2e, 0xb1, 0x22, 0xf1, 0xc0, 0xcf, 0xf0, 0x6c, 0x14, 0x9b, 0x9a, 0xb1, 0x92, 0x6c,
	0xbe, 0x92, 0x65, 0xa5, 0xd6, 0x54, 0x60, 0x69, 0x94, 0xab, 0x8d, 0x5a, 0x4d, 0xbd, 0x97, 0xe5,
	0x69, 0xdb, 0xb6, 0xa1, 0x94, 0x19, 0x18, 0xa4, 0x61, 0xcf, 0x94, 0x61, 0xc5, 0x64, 0x5c, 0x90,
	0x56, 0x7d, 0x82, 0xe5, 0x0c, 0x2a, 0x35, 0xc9, 0x4c, 0xb6, 0x46, 0x09, 0x3e, 0xb5, 0x67, 0x6f,
	0x64, 0x18, 0xd1, 0xc6, 0xac, 0xa5, 0xbe, 0x4c, 0x18, 0xda, 0x12, 0x0b, 0xf2, 0x72, 0x5e, 0xd2,
	0x29, 0xbe, 0xf9, 0xbf, 0x75, 0x3e, 0xfd, 0x78, 0x01, 0xe7, 0xba, 0x75, 0x56, 0x60, 0x89, 0x5f,
	0xb1, 0x41, 0xaf, 0x8b, 0xb3, 0xd5, 0x54, 0xf5, 0xfb, 0xd8, 0x01, 0x5a, 0xdd, 0x4e, 0xab, 0x29,
	0x3a, 0x80, 0xa5, 0x2e, 0xc3, 0x32, 0xc1, 0x47, 0x38, 0xdb, 0x09, 0xc7, 0xe8, 0xb2, 0x26, 0x13,
	0x19, 0xca, 0xee, 0x5f, 0x27, 0x60, 0xe1, 0xce, 0x97, 0x2d, 0x7a, 0x0e, 0x6b, 0x55, 0xdb, 0xe9,
	0xd4, 0x6b, 0xf5, 0xaa, 0xd5, 0xb1, 0x71, 0xe7, 0xb7, 0xb6, 0x8d, 0x1d, 0xdb, 0xb5, 0x9d, 0x33,
	0xfb, 0xc8, 0xf8, 0x3f, 0xf4, 0x1d, 0x98, 0xf7, 0xd4, 0xa7, 0xcd, 0xcf, 0xcd, 0xd6, 0x97, 0xa6,
	0x31, 0x81, 0xd6, 0x60, 0xe5, 0x9e, 0xb6, 0x61, 0x5b, 0x35, 0x63, 0x12, 0xbd, 0x84, 0xe7, 0xf7,
	0x54, 0xf5, 0x66, 0xc7, 0x76, 0x4e, 0xec, 0xa3, 0xba, 0xd5, 0xb1, 0x8d, 0xa9, 0x07, 0xd9, 0x4e,
	0xab, 0xd5, 0x31, 0xa6, 0x77, 0xff, 0x36, 0x09, 0x8b, 0xf7, 0xda, 0x17, 0xda, 0x84, 0x8d, 0x2c,
	0xc1, 0x6d, 0x9d, 0x3a, 0xd5, 0x11, 0x6b, 0x5f, 0xc0, 0xfa, 0x03, 0x80, 0xd4, 0xde, 0x0d, 0x78,
	0xf6, 0x80, 0xde, 0xad, 0x5a, 0x4d, 0x63, 0xf2, 0xae, 0x39, 0xb1, 0xb2, 0xda, 0x31, 0xa6, 0xd0,
	0x5b, 0x78, 0xfd, 0x80, 0xea, 0xa4, 0xf5, 0x7b, 0xbd, 0xd1, 0xb0, 0xb0, 0x6b, 0x35, 0x6c, 0xb7,
	0xd6, 0x72, 0xaa, 0xb6, 0x31, 0x3d, 0xc6, 0x46, 0xcb, 0xa9, 0x1e, 0x1b, 0x33, 0x77, 0x1d, 0x3e,
	0x04, 0x58, 0xed, 0xfa, 0xd1, 0x9f, 0x8c, 0xd9, 0x47, 0xd4, 0xc7, 0xa7, 0x87, 0x87, 0x0d, 0xdb,
	0x98, 0x7b, 0x64, 0xfb, 0x6a, 0x07, 0x57, 0x8f, 0xad, 0x7a, 0xd3, 0xc8, 0xed, 0xfe, 0x73, 0x02,
	0x56, 0x1f, 0x9e, 0x5f, 0xd0, 0x6b, 0x78, 0x99, 0xe5, 0xb6, 0x2d, 0xc7, 0xb5, 0xb1, 0xdb, 0xb1,
	0x3a, 0xa7, 0x6e, 0xd6, 0x89, 0xdb, 0x50, 0x7e, 0x14, 0x96, 0xba, 0x72, 0x1c, 0xca, 0x3d, 0xad,
	0x56, 0x6d, 0xd7, 0xbd, 0x1f, 0x05, 0x23, 0xa8, 0x9a, 0x55, 0x6f, 0x18, 0x53, 0xe8, 0x0d, 0xbc,
	0x7a, 0x14, 0xd2, 0x6c, 0x75, 0xb4, 0xe0, 0xc8, 0x98, 0xde, 0xfd, 0xf7, 0x34, 0x6c, 0x8c, 0x99,
	0x4d, 0xd1, 0x2e, 0x7c, 0x9f, 0xdd, 0xc8, 0xb1, 0xcf, 0x5a, 0x55, 0xab, 0x53, 0x6f, 0x35, 0xb1,
	0x63, 0x5b, 0xae, 0xfa, 0x93, 0xdc, 0xf1, 0xce, 0x83, 0xde, 0xc7, 0xa6, 0x17, 0x7d, 0x0f, 0x6f,
	0x9f, 0x82, 0xba, 0x6d, 0xbb, 0x5a, 0xaf, 0xd5, 0xed, 0x23, 0x63, 0x12, 0x7d, 0x84, 0xbd, 0xf1,
	0xf0, 0xcf, 0xf6, 0x6f, 0xb8, 0xda, 0x3a, 0x69, 0x3b, 0xad, 0x93, 0xba, 0x2b, 0xd3, 0xe0, 0x03,
	0xbc, 0x1b, 0xcf, 0xa8, 0x5a, 0x59, 0xc2, 0x34, 0xfa, 0x01, 0x0e, 0xc6, 0x13, 0xac, 0x5a, 0xad,
	0xde, 0xa8, 0x6b, 0x51, 0xf5, 0xd8, 0x6a, 0xfe, 0x6a, 0x1f, 0x19, 0x33, 0x68, 0x0f, 0x76, 0xc6,
	0xd3, 0xdc, 0xd3, 0xb6, 0x2d, 0x7d, 0x6d, 0x1f, 0x19, 0xb3, 0xe8, 0x27, 0xf8, 0xf4, 0x84, 0x55,
	0xb6, 0xeb, 0x6a, 0x41, 0xab, 0x86, 0x5b, 0x6d, 0xdb, 0x51, 0x0b, 0x63, 0x0e, 0x55, 0x60, 0xff,
	0x29, 0x66, 0xaa, 0x3d, 0x6e, 0x35, 0x8e, 0x8c, 0x1c, 0x3a, 0x80, 0xf7, 0x4f, 0xbd, 0xdd, 0x49,
	0xeb, 0xcc, 0xc6, 0x35, 0xa7, 0x75, 0x82, 0xab, 0x4e, 0xc3, 0xc8, 0x3f, 0xed, 0x85, 0xb6, 0x53,
	0x3f, 0xab, 0x37, 0xec, 0x5f, 0x6d, 0xfc, 0xa5, 0xde, 0x39, 0x3e, 0x72, 0xac, 0x2f, 0x4d, 0x03,
	0x9e, 0xf6, 0xb6, 0x35, 0xe2, 0xed, 0xc2, 0xf9, 0xac, 0xfa, 0x2f, 0xe9, 0xff, 0xff, 0x37, 0x00,
	0x00, 0xff, 0xff, 0x15, 0x75, 0x76, 0xe5, 0x73, 0x15, 0x00, 0x00,
}
